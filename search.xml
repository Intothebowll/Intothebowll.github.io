<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019</title>
    <url>/2019/12/12/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E5%90%8E%E5%8F%B0%E8%BF%9E%E6%8E%A5%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<h1 id="编写一个获取后台连接动态生成轮播图的例子"><a href="#编写一个获取后台连接动态生成轮播图的例子" class="headerlink" title="编写一个获取后台连接动态生成轮播图的例子"></a>编写一个获取后台连接动态生成轮播图的例子</h1><p>​        平时自己写的轮播图组件都是根据现成的图片来进行定量的设计，在后阶段的学习实践过程中发现这种代码的局限性太大了，在想拿到后台轮播图的数据在渲染到前端页面总得花费一般功夫，不如就自己封装一个轮播图代码吧！（前端菜鸟！大神不用看啦，代码其实也是很简单的，原创原创原创）</p>
<h2 id="一、首先对html进行构建"><a href="#一、首先对html进行构建" class="headerlink" title="一、首先对html进行构建"></a>一、首先对html进行构建</h2><p>​        封装一个轮播图组件，当然是为了他的复用性，所以代码的嵌入性能很关键，不能写一个不能适应各种页面环境的代码出来….废话不多说，开始吧</p>
<p>​        首先是对一整个轮播图的html框架的设计，由一个大盒子包裹住这个轮播图所有要实现的内容先<br>$$</p>
<div class="rotationPhoto">
    <div class="mainPicture">
        <ul>
            <!--<li><a href=""><img src="" alt=""></a></li>-->
        </ul>
    </div>
    <div class="left">
        //这里我放了两个svg图，是轮播图的左右按钮
    </div>
    <div class="right">
        //这里我放了两个svg图，是轮播图的左右按钮
    </div>
    <div class="smallCircle">
        <ul>
            <!--<li class="smallCircle-itemCurrent"></li>-->
            <!--<li class="smallCircle-item"></li>-->
        </ul>
    </div>
</div>
$$
​        其中mainPicture是放轮播图的主图的盒子，其中照片在ul的每一个li中

<p>​        而smallCircle是轮播图中跟着主图运动的小标识</p>
<p>​        而left和right两个盒子则是放轮播图前进和后退的两个按钮，我是用svg图来显示这两个按钮的</p>
<p>在这里我就普及一下svg图的优势吧：</p>
<p>​        1．任意放缩</p>
<p>　　　　用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。</p>
<p>　　2．文本独立</p>
<p>　　　　SVG图像中的文字独立于图像，文字保留可编辑和可搜寻的状态。也不会再有字体的限制，用户系统即使没有安装某一字体，也会看到和他们制作时完全相同的画面。</p>
<p>　　3．较小文件</p>
<p>　　　　总体来讲，SVG文件比那些GIF和JPEG格式的文件要小很多，因而下载也很快。</p>
<p>　　4．超强显示效果</p>
<p>　　　　SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨力和打印分辨力。</p>
<p>　　5．超级颜色控制</p>
<p>　　　　SVG图像提供一个1 600万种颜色的调色板，支持ICC颜色描述文件标准、RGB、线X填充、渐变和蒙版</p>
<p>​        就是它不是所有的浏览器都能支持的~</p>
<h2 id="二、对CSS样式的设定"><a href="#二、对CSS样式的设定" class="headerlink" title="二、对CSS样式的设定"></a>二、对CSS样式的设定</h2><p><img src="/.com//%22images%5Clunbo.png%22" alt="1576050702062"></p>
<p>那么如何将上面的html代码美化成我们需要的样式布局呢？</p>
<p>来看看我的思路吧！</p>
<p>首先我把最外层的这个大盒子设置为了弹性元素</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>：<span class="attribute">flex</span>；</span><br><span class="line"><span class="attribute">justify-content</span>: space-between;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure>

<p>​        为了这个轮播图在各个尺寸的屏幕下显示不会有太大的差距，根据上面的代码对弹性项目进行了两种布局，一种是水平线上的布局是两段对齐，项目中间的间隔相等，在竖轴线上是居中的，就实现了！</p>
<p>​        而下面的小方框由该怎么实现比较好？</p>
<p>​        我们的小方框一开始就不是固定的，而是根据后台获取到多少张轮播图的时候，我们才来动态的生成的，所以他的长度不定，看看我的做法吧</p>
<p>​        我将最外面的这个大盒子设置为相对定位（也是为了放轮播图片的原因），然后给最下面这个盒子设置为了绝对定位，然后根据绝对定位元素的自动伸缩的特性我将盒子的边距设置成auto</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br></pre></td></tr></table></figure>

<p>​        这样子他就可以在水平线上自动居中了，当然还有一定的条件，就是它的宽度必须被指定，否则他将占据整一行</p>
<p>​        轮播图主图设置为绝对定位，重叠在同一个位置，通过层级显示来实现图片的轮播效果</p>
<h2 id="三、js代码的实现"><a href="#三、js代码的实现" class="headerlink" title="三、js代码的实现"></a>三、js代码的实现</h2><p>​        代码是基于jqery来编写的（主要是因为懒，用jq写得快）</p>
<p>​        首先定义一个数组用来获取后台获取到的轮播图数据，这里因为是测试用所以我自己填入了模拟的信息</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var rotationPhotoData</span> = [</span><br><span class="line">       <span class="string">"images/lunbo_1.jpg"</span>,</span><br><span class="line">       <span class="string">"images/lunbo_2.jpg"</span>,</span><br><span class="line">       <span class="string">"images/lunbo_3.jpg"</span>,</span><br><span class="line">   ];</span><br></pre></td></tr></table></figure>

<p>​        编写一个方法，根据获取到的轮播图的数量和信息来动态生成图片元素，这里使用了ES6的模板字符串，调用这个方法就可以生成元素写入页面当中</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">function rotationPhoto(wImg,hImg)&#123;</span><br><span class="line">       $(rotationPhotoData).each(function(index,rotationPhotoItemData) &#123;</span><br><span class="line">           <span class="comment">//mainPicture的模板</span></span><br><span class="line">           <span class="variable">$mainPictureSon</span>.<span class="keyword">append</span>(</span><br><span class="line">               `&lt;<span class="keyword">li</span>&gt;&lt;a href=<span class="string">""</span>&gt;&lt;img src=<span class="string">"$&#123;rotationPhotoItemData&#125;"</span> alt=<span class="string">""</span></span><br><span class="line">               style=<span class="string">"width:$&#123;wImg&#125;px;height:$&#123;hImg&#125;px;position:absolute;"</span>&gt;&lt;/a&gt;&lt;/<span class="keyword">li</span>&gt;`</span><br><span class="line">           );</span><br><span class="line">           <span class="variable">$smallCircleSon</span>.<span class="keyword">append</span>(</span><br><span class="line">               `&lt;<span class="keyword">li</span> <span class="keyword">class</span>=<span class="string">"smallCircle-item"</span>&gt;&lt;/<span class="keyword">li</span>&gt;`</span><br><span class="line">           );</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p>​        这个方法传入两个参数，是决定轮播图的宽和高的，这里可以根据获取的图片尺寸来代入参数</p>
<p>​        根据获取到的轮播图的数量来决定两个部分的的尺寸——-轮播图尺寸和小圆点的尺寸和数量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$allRotationPhoto</span><span class="selector-class">.css</span>(&#123;</span><br><span class="line">     <span class="attribute">width</span>:wImg+<span class="string">"px"</span>,</span><br><span class="line">     height:hImg+<span class="string">"px"</span></span><br><span class="line"> &#125;);</span><br><span class="line"><span class="variable">$smallCircle</span><span class="selector-class">.css</span>(&#123;</span><br><span class="line">     <span class="attribute">width</span>:$(rotationPhotoData).length*<span class="number">14</span>+<span class="string">"px"</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>​        其他代码都很简单了，定义一个全局索引index，增加点击事件和定时器等，主要代码如下</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">function move()&#123;      			    $mainPictureSonLi.e<span class="string">q(index)</span>.children().children().css(<span class="string">"zIndex"</span>,<span class="string">"4"</span>).siblings(<span class="string">"img"</span>).css(<span class="string">"zIndex"</span>,<span class="string">"3"</span>);        $mainPictureSonLi.e<span class="string">q(index)</span>.siblings(<span class="string">"li"</span>).children().children().css(<span class="string">"zIndex"</span>,<span class="string">"3 "</span>);</span><br><span class="line">$smallCircleSonLi.e<span class="string">q(index)</span>.addClass(<span class="string">"smallCircle-   itemCurrent"</span>).siblings(<span class="string">"li"</span>).removeClass(<span class="string">"smallCircle-itemCurrent"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span></span> autoPhoto()&#123;</span><br><span class="line">            timeout = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="built_in">index</span>++;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">index</span> &gt; $mainPictureSonLi.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">index</span> = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                move();</span><br><span class="line">                console.<span class="built_in">log</span>(<span class="built_in">index</span>+<span class="string">"pppppp"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">$smallCircleSonLi.mouseenter(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            clearInterval(timeout);</span><br><span class="line">            <span class="built_in">index</span> = $(this).<span class="built_in">index</span>();</span><br><span class="line">            console.<span class="built_in">log</span>(<span class="built_in">index</span>);</span><br><span class="line">            move();</span><br><span class="line">        &#125;).mouseleave(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            autoPhoto();</span><br><span class="line">        &#125;)</span><br><span class="line">pre.mouseup(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">index</span>--;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">index</span>&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">index</span> = $mainPictureSonLi.length-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            move();</span><br><span class="line">        &#125;);</span><br><span class="line">        next.click(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">index</span>++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">index</span> &gt; $mainPictureSonLi.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">index</span> = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            move();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>最后我把我的例子放在github上面了，欢迎指正！</p>
]]></content>
  </entry>
  <entry>
    <title>2019</title>
    <url>/2019/12/12/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="第一章-Bootstrap介绍"><a href="#第一章-Bootstrap介绍" class="headerlink" title="第一章 Bootstrap介绍"></a>第一章 Bootstrap介绍</h1><h2 id="1-Bootstrap概述"><a href="#1-Bootstrap概述" class="headerlink" title="1. Bootstrap概述"></a>1. Bootstrap概述</h2><p>Bootstrap是由 Twiter 公司(全球最大的微博)的两名技术工程师研发的一个基于HTML、CSS、JavScript 的开源框架。该框架代码简洁、视觉优美，可用于快速、简单地构建基于 PC 及移动端设备的 Web 页面需求。<br>201 年 6 月，Twiter 内部的工程师为了解决前端开发任务中的协作统一问题。经历各种方案后，Bootstrap 最终被确定下来，并于 201 年 8 月发布。经过很长时间的迭代升级，由最初的 CSS 驱动项目发展成为内置很多 JavScript 插件和图标的多功能 Web 前端的开源框架。<br>Bootstrap最为重要的部分就是它的响应式布局，通过这种布局可以兼容 PC 端、PAD以及手机移动端的页面访问。</p>
<a id="more"></a>

<p>Bootstrap 下载及演示：<br>国内文档翻译官网：htp:/w.botcs.com<br>瓢城 Web 俱乐部官网：htp:/w.ycku.com</p>
<h2 id="2-Bootstrap特点"><a href="#2-Bootstrap特点" class="headerlink" title="2. Bootstrap特点"></a>2. Bootstrap特点</h2><p>Bootstrap非常流行，得益于它非常实用的功能和特点。主要核心功能特点如下：</p>
<ol>
<li>跨设备、跨浏览器<br>可以兼容所有现代浏览器，包括比较诟病的 IE7、8。当然，本课程不再考虑 IE9 以下浏览器。</li>
<li>响应式布局<br>不但可以支持 PC 端的各种分辨率的显示，还支持移动端 PAD、手机等屏幕的响应式切换显示。</li>
<li>提供的全面的组件<br>Bootstrap 提供了实用性很强的组件，包括：导航、标签、工具条、按钮等一系列组件，方便开发者调用。</li>
<li>内置 jQuery 插件<br>Bootstrap 提供了很多实用性的 jquery 插件，这些插件方便开发者实现 Web 中各种常规特效。</li>
<li>支持 HTML5、CSS3<br>HTML5 语义化标签和 CSS3 属性，都得到很好的支持。</li>
<li>支持 LESS 动态样式<br>LESS 使用变量、嵌套、操作混合编码，编写更快、更灵活的 CS。它和 Bootstrap 能很好的配合开发。</li>
</ol>
<h2 id="3-Bootstrap结构"><a href="#3-Bootstrap结构" class="headerlink" title="3. Bootstrap结构"></a>3. Bootstrap结构</h2><p>首先，想要了解 Bootstrap的文档结构，需要在官网先把它下载到本地。Bootstrap下载地址如下：<br>Bootstrap下载地址：htp:/v3.botcs.com/ (选择生产环境即可，v3.4)<br>解压后，目录呈现这样的结构：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Bootstrap/</span><br><span class="line">├─ css/</span><br><span class="line">│ ├─ Bootstrap .css</span><br><span class="line">│ ├─ Bootstrap <span class="selector-class">.cs</span><span class="selector-class">.map</span></span><br><span class="line">│ ├─ Bootstrap <span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">│ ├─ Bootstrap-them.css</span><br><span class="line">│ ├─ Bootstrap-them<span class="selector-class">.cs</span><span class="selector-class">.map</span></span><br><span class="line">│ └─ Bootstrap-them<span class="selector-class">.min</span><span class="selector-class">.css</span></span><br><span class="line">├─ js/</span><br><span class="line">│ ├─ Bootstrap.js</span><br><span class="line">│ └─ Bootstrap<span class="selector-class">.min</span><span class="selector-class">.js</span></span><br><span class="line">└─ fonts/</span><br><span class="line">├─ glyphicons-halfings-regular.eot</span><br><span class="line">├─ glyphicons-halfings-regular.svg</span><br><span class="line">├─ glyphicons-halfings-regular.tf</span><br><span class="line">├─ glyphicons-halfings-regular.wof</span><br><span class="line">└─ glyphicons-halfings-regular.wof2</span><br></pre></td></tr></table></figure>

<p>主要分为三大核心目录：cs(样式)、js(脚本)、fonts(字体)。</p>
<ol>
<li>css 目录中有四个 css 后缀的文件，其中包含 min 字样的，是压缩版本，一般使用这个；不包含的属于没有压缩的，可以学习了解 css 代码的文件；而 map 后缀的文件则是css 源码映射表，在一些特定的浏览器工具中使用。</li>
<li>js 目录包含两个文件，是未压缩和压缩的 js 文件。</li>
<li>fonts 目录包含了不同后缀的字体文件。</li>
</ol>
<h2 id="4-创建第一个页面"><a href="#4-创建第一个页面" class="headerlink" title="4. 创建第一个页面"></a>4. 创建第一个页面</h2><p>我们创建一个 HTML5 的页面，并且将 Bootstrap的核心文件引入，然后测试是否正常显示。</p>
<p>第一个 Bootstrap</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">htmlang="zh-cn"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tile</span>&gt;</span>Bootstrap 介绍<span class="tag">&lt;/<span class="name">tile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"styleshet"</span> <span class="attr">href</span>=<span class="string">"cs/Bootstrap.min.cs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">buton</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">buton</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/Bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="第二章-Bootstrap栅格布局"><a href="#第二章-Bootstrap栅格布局" class="headerlink" title="第二章 Bootstrap栅格布局"></a>第二章 Bootstrap栅格布局</h1><h2 id="1-栅格布局简介"><a href="#1-栅格布局简介" class="headerlink" title="1. 栅格布局简介"></a>1. 栅格布局简介</h2><p>Bootstrap内置了一套响应式、移动设备优先的流式栅格系统，随着屏幕设备或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义classe，还有强大的mixin用于生成更具语义的布局。</p>
<p>容器：“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</p>
<p>rem：实际上是设置列的高度的属性，rem的值是整数，代表的高度是rem值*字体像素大小。</p>
<p>工作原理如下：</p>
<ol>
<li>“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100%宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li>
<li>通过“行（row）”在水平方向创建一组“列（column）”。</li>
<li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li>
<li>类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li>
<li>通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列column）”抵消掉了 padding。</li>
<li>负值的 margin 就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li>
<li>栅格系统中的列是通过指定 1 到 12 的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。</li>
<li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li>
<li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-md-* 栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ，并且针对小屏幕设备覆盖栅格类。因此，在元素上应用任何 .col-lg-*不存在， 也影响大屏幕设备。</li>
</ol>
<h2 id="2-Bootstrap相应设备类型"><a href="#2-Bootstrap相应设备类型" class="headerlink" title="2.  Bootstrap相应设备类型"></a>2.  Bootstrap相应设备类型</h2><p>栅格系统最外层区分了四种宽度的浏览器：超小屏(&lt;768px)、小屏(&gt;=768px)、中屏(&gt;=992px)和大屏&gt;=1200px)。而内层.container 容器的自适应宽度为：自动、750px、970px 和 1170px。自动的意思为，如果你是手机屏幕，则全面独占一行显示。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>为了显示明显的 CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有时我们可以设置列偏移，让中间保持空隙</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-8 a"</span>&gt;<span class="number">8</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-3 col-md-offset-1 a"</span>&gt;<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>也可以嵌套，嵌满也是 12 列</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-9 a"</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-8 a"</span>&gt;<span class="number">1</span><span class="number">-8</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-4 a"</span>&gt;<span class="number">9</span><span class="number">-12</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-3 a"</span>&gt;</span><br><span class="line">        	<span class="number">11</span><span class="number">-12</span></span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以把两个列交换位置，push 向左移动，pull 向右移动</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-9 col-md-push-3 a"</span>&gt;<span class="number">9</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"col-md-3 col-md-pull-9 a"</span>&gt;<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>移动设备优先</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;meta <span class="attr">name="viewport"</span> <span class="attr">content="width=device-width,</span> <span class="attr">initial-scale=1,</span></span><br><span class="line"><span class="attr">maximum-scale=1,</span> <span class="attr">user-scalable=no"&gt;</span></span><br></pre></td></tr></table></figure>

<p>布局容器</p>
<p>Bootstrap 需要为页面内容和栅格系统包裹一个.container 容器。由于 padding 等属性的原因，这两种容器类不能相互嵌套。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//固定宽度</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">//100%宽度</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-栅格基本布局"><a href="#3-栅格基本布局" class="headerlink" title="3.  栅格基本布局"></a>3.  栅格基本布局</h2><p>Bootstrap中的基本网格布局的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">                background: pink;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(86, 61, 124, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: red;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>栅格最基本布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基本的方格布局--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>col-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>col-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>col-2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>栅栏布局中有一个特殊的类col-auto，这个类会根据内容的大小自动的扩充列数，而普通的如果内容的长度超过列数就会加行。</p>
<p>##4.  栅格水平和垂直布局</p>
<p>水平布局是通过在行的div标签中利用justify-content-类型来实现的，如下所示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">                background: pink;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(86, 61, 124, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">                font-size: 30px;</span><br><span class="line">                color: red;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>水平布局<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--水平的排列方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-start"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>start<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-end"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>end<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>end<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>end<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-around"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>around<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>around<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>around<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-between"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>between<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>between<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>between<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>垂直布局和水平布局类似，利用align-items-类型来实现的垂直布局，但是垂直布局中只有start、center、end三种。</p>
<h2 id="5-栅格排序和偏移"><a href="#5-栅格排序和偏移" class="headerlink" title="5.  栅格排序和偏移"></a>5.  栅格排序和偏移</h2><p>通过order-数值这个类进行网格的位置排列，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">                background: pink;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(86, 61, 124, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 order-0"</span>&gt;</span>我是老大<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 order-2"</span>&gt;</span>我是老二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 order-1"</span>&gt;</span>我是老三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>列偏移可以通过offset-数字这个类进行网格位置的偏移。</p>
<p>Bootstrap还支持列嵌套，有了列嵌套，栅格布局显得非常的灵活，示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.row</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">                background: pink;</span><br><span class="line"><span class="css">                <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(86, 61, 124, 0<span class="selector-class">.2</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-11"</span>&gt;</span>外层</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>内层1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>内层2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>最内1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-4"</span>&gt;</span>最内2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="第三章-排版样式"><a href="#第三章-排版样式" class="headerlink" title="第三章 排版样式"></a>第三章 排版样式</h1><h2 id="1-页面主体"><a href="#1-页面主体" class="headerlink" title="1. 页面主体"></a>1. 页面主体</h2><p>Bootstrap 将全局 font-size 设置为 14px，line-height 行高设置为 1.428(即20px)；&lt;p&gt;段落元素被设置等于 1/2 行高(即 10px)；颜色被设置为#333。<br>创建包含段落突出的文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.  标题"></a>2.  标题</h2><p>从 h1 到 h6</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> /36px</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> /30px</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> /24px</span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> /18px</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> /14px</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">h6</span>&gt;</span> /12px</span><br></pre></td></tr></table></figure>

<p>Bootstrap 分别对 h1 ~ h6 进行了 CSS样式的重构，并且还支持普通内联元素定义 class=(.h1 ~ h6)来实现相同的功能。<br>内联元素使用标题字体：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>="<span class="symbol">h1</span>"&gt;<span class="symbol">Bootstrap</span>&lt;/<span class="symbol">span</span>&gt;</span><br></pre></td></tr></table></figure>

<p>在 h1 ~ h6 元素之间，还可以嵌入一个 smal 元素作为副标题，在标题元素内插入 small元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap 框架 <span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>h1 ~ h3 下的 smal 为 23.4px、19.5px、15.6px；h4 ~ h6 下 smal 元素的大小只占父元素的 75% ,分别为：13.5px、10.5px、9px。在 h1 ~ h6 下的 smal 样式也进行了改变，颜色变成淡灰色：#7，行高为 1，粗度<br>为 40。</p>
<h2 id="3-内联文本元素"><a href="#3-内联文本元素" class="headerlink" title="3. 内联文本元素"></a>3. 内联文本元素</h2><p>添加标记，&lt;mark&gt;元素或.mark 类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap<span class="tag">&lt;<span class="name">mark</span>&gt;</span>框架<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>各种加线条的文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">del</span>&gt;</span> /删除的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">s</span>&gt;</span> /无用的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">ins</span>&gt;</span> /插入的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">u</span>&gt;</span> /效果同上，下划线文本</span><br></pre></td></tr></table></figure>

<p>各种强调的文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">small</span>&gt;</span> /标准字号的 85%</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> /加粗 70</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">em</span>&gt;</span> /倾斜</span><br></pre></td></tr></table></figure>

<h2 id="4-对齐"><a href="#4-对齐" class="headerlink" title="4.  对齐"></a>4.  对齐</h2><p>设置文本对齐</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /居左</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /居中</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /居右</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-justify"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /两端对齐，支持度不佳</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-nowrap"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /不换行</span><br></pre></td></tr></table></figure>

<h2 id="5-大小写"><a href="#5-大小写" class="headerlink" title="5.  大小写"></a>5.  大小写</h2><p>设置英文本大小写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-lowercase"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /小写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-upercase"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /大写</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-capitalize"</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span> /首字母大写</span><br></pre></td></tr></table></figure>

<h2 id="6-缩略语"><a href="#6-缩略语" class="headerlink" title="6. 缩略语"></a>6. 缩略语</h2><p>缩略语</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Bootstrap<span class="tag">&lt;<span class="name">abr</span> <span class="attr">tile</span>=<span class="string">"Bootstrap"</span> <span class="attr">class</span>=<span class="string">"intialism"</span>&gt;</span>框架<span class="tag">&lt;/<span class="name">abr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-地址文本"><a href="#7-地址文本" class="headerlink" title="7. 地址文本"></a>7. 地址文本</h2><p>设置地址，去掉了倾斜，设置了行高，底部 20px</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;adres&gt;</span><br><span class="line">	&lt;strong&gt;Twiter, Inc.&lt;/strong&gt;&lt;br&gt;</span><br><span class="line">	795 Folsom Ave, Suite 60&lt;br&gt;</span><br><span class="line">	San Francisco, CA 94107&lt;br&gt;</span><br><span class="line">	&lt;abr tile=&quot;Phone&quot;&gt;P:&lt;/abr&gt; </span><br><span class="line">	(123) 456-7890</span><br><span class="line">&lt;/adres&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-引用文本"><a href="#8-引用文本" class="headerlink" title="8. 引用文本"></a>8. 引用文本</h2><p>默认样式引用，增加了做边线，设定了字体大小和内外边距</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">Bootstrap 框架</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>反向</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-revrse "</span>&gt;</span></span><br><span class="line">Bootstrap 框架</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-列表排版"><a href="#9-列表排版" class="headerlink" title="9. 列表排版"></a>9. 列表排版</h2><p>移出默认样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置成内联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bootstrap 框架<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>水平排列描述列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dl-horizontal"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">d</span>&gt;</span>Bootstrap 提供了一些常规设计好的页面排版的样式供开发者使用。<span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-代码"><a href="#10-代码" class="headerlink" title="10. 代码"></a>10. 代码</h2><p>内联代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;section&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用户输入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">pres <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl + ,<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&amp;lt;p&amp;gt;Please input.&amp;lt;/p&amp;gt;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Bootstrap 还列举了<var>表示标记变量，<samp>表示程序输出，只不过没有重新复写 CSS。</samp></var></p>
<h1 id="第三章-表格-按钮-表单-图片"><a href="#第三章-表格-按钮-表单-图片" class="headerlink" title="第三章 表格 按钮 表单 图片"></a>第三章 表格 按钮 表单 图片</h1><h2 id="1-表格"><a href="#1-表格" class="headerlink" title="1. 表格"></a>1. 表格</h2><p>Bootstrap 提供了一些丰富的表格样式供开发者使用。</p>
<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="条纹状表格"><a href="#条纹状表格" class="headerlink" title="条纹状表格"></a>条纹状表格</h3><p>让&lt;tbody&gt;里的行产生一行隔一行加单色背景效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="带边框的表格"><a href="#带边框的表格" class="headerlink" title="带边框的表格"></a>带边框的表格</h3><p>给表格增加边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-borderd"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="悬停鼠标"><a href="#悬停鼠标" class="headerlink" title="悬停鼠标"></a>悬停鼠标</h3><p>让&lt;tbody&gt;下的表格悬停鼠标实现背景效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="状态类"><a href="#状态类" class="headerlink" title="状态类"></a>状态类</h3><p>可以单独设置每一行的背景样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"success"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一共五种不同的样式可供选择。</p>
<table>
<thead>
<tr>
<th>样式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>active</td>
<td>鼠标悬停在行或单元格上</td>
</tr>
<tr>
<td>success</td>
<td>标识成功或积极的动作</td>
</tr>
<tr>
<td>info</td>
<td>标识普通的提示信息或动作</td>
</tr>
<tr>
<td>warning</td>
<td>标识警告或需要用户注意</td>
</tr>
<tr>
<td>danger</td>
<td>表示危险或潜在的带来负面影响的动作</td>
</tr>
</tbody></table>
<h3 id="隐藏某一行"><a href="#隐藏某一行" class="headerlink" title="隐藏某一行"></a>隐藏某一行</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="响应式表格"><a href="#响应式表格" class="headerlink" title="响应式表格"></a>响应式表格</h3><p>表格父元素设置响应式，小于 768px 出现边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-按钮"><a href="#2-按钮" class="headerlink" title="2. 按钮"></a>2. 按钮</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>Bootstrap 提供了很多丰富按钮供开发者使用。<br>1.可作为按钮使用的标签或元素<br>转化成普通按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"###"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">value</span>=<span class="string">"input"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="预定义样式"><a href="#预定义样式" class="headerlink" title="预定义样式"></a>预定义样式</h3><table>
<thead>
<tr>
<th>样式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>btn-default</td>
<td>默认样式</td>
</tr>
<tr>
<td>btn-success</td>
<td>成功样式</td>
</tr>
<tr>
<td>btn-info</td>
<td>一般信息样式</td>
</tr>
<tr>
<td>btn-warning</td>
<td>警告样式</td>
</tr>
<tr>
<td>btn-danger</td>
<td>危险样式</td>
</tr>
<tr>
<td>btn-primary</td>
<td>首选项样式</td>
</tr>
<tr>
<td>btn-link</td>
<td>链接样式</td>
</tr>
</tbody></table>
<h3 id="尺寸大小"><a href="#尺寸大小" class="headerlink" title="尺寸大小"></a>尺寸大小</h3><p>从大到小的尺寸</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-xs"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="块级按钮"><a href="#块级按钮" class="headerlink" title="块级按钮"></a>块级按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-block"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="激活状态"><a href="#激活状态" class="headerlink" title="激活状态"></a>激活状态</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn active"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="禁用状态"><a href="#禁用状态" class="headerlink" title="禁用状态"></a>禁用状态</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn active disabled"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-表单"><a href="#3-表单" class="headerlink" title="3. 表单"></a>3. 表单</h2><h3 id="基本格式-1"><a href="#基本格式-1" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>电子邮件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"请输入您的电子邮件"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"请输入您的密码"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内联表单"><a href="#内联表单" class="headerlink" title="内联表单"></a>内联表单</h3><p>让表单左对齐浮动，并表现为 inline-block 内联块结构</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="keyword">class</span>=<span class="string">"form-inline"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>注：当小于 768px，会恢复独占样式</p>
<h3 id="表单合组"><a href="#表单合组" class="headerlink" title="表单合组"></a>表单合组</h3><p>前后增加片段</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"input-group"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"input-group-addon"</span>&gt;￥&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> <span class="built_in">class</span>=<span class="string">"form-control"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"input-group-addon"</span>&gt;<span class="number">.00</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="水平排列"><a href="#水平排列" class="headerlink" title="水平排列"></a>水平排列</h3><p>让表单内的元素保持水平排列</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-horizontal"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">&lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-2 control-label"</span>&gt;电子邮件&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="col-sm-10"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="email" class="form-control" placeholder="请输</span></span><br><span class="line"><span class="regexp">入您的电子邮件"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br></pre></td></tr></table></figure>

<p>注：这里用到了 col-sm 栅格系统，后面章节会重点讲解，而 control-label 表示和<br>父元素样式同步。</p>
<h3 id="复选框和单选框"><a href="#复选框和单选框" class="headerlink" title="复选框和单选框"></a>复选框和单选框</h3><p>设置复选框，在一行</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span>&gt;体育</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span>&gt;音乐</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">//设置禁用的复选框</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"checkbox disabled"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> disabled&gt;音乐</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">//设置内联一行显示的复选框</span></span><br><span class="line">&lt;<span class="keyword">label</span> <span class="keyword">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span>&gt;体育</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span> <span class="keyword">class</span>=<span class="string">"checkbox-inline disabled"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> disabled&gt;音乐</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line"><span class="comment">//设置单选框</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"radio disabled"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"radio"</span> name=<span class="string">"sex"</span> disabled&gt;男</span><br><span class="line">&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><p>设置下拉列表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span>&gt;</span><br><span class="line">&lt;option&gt;<span class="number">1</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option&gt;2&lt;/</span>option&gt;</span><br><span class="line">&lt;option&gt;<span class="number">3</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option&gt;4&lt;/</span>option&gt;</span><br><span class="line">&lt;option&gt;<span class="number">5</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br></pre></td></tr></table></figure>

<h3 id="校验状态"><a href="#校验状态" class="headerlink" title="校验状态"></a>校验状态</h3><p>设置为错误状态</p>
<p>注：还有其他状态如下</p>
<table>
<thead>
<tr>
<th>样式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>has-error</td>
<td>错误状态</td>
</tr>
<tr>
<td>has-success</td>
<td>成功状态</td>
</tr>
<tr>
<td>has-warning</td>
<td>警告状态</td>
</tr>
</tbody></table>
<p> label 标签同步相应状态</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">label</span> <span class="keyword">class</span>=<span class="string">"control-label"</span>&gt;<span class="keyword">Input</span> with success&lt;/<span class="keyword">label</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="添加额外的图标"><a href="#添加额外的图标" class="headerlink" title="添加额外的图标"></a>添加额外的图标</h3><p>文本框右侧内置文本图标</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group has-feedback"</span>&gt;</span><br><span class="line">&lt;label&gt;电子邮件&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="email" class="form-control"&gt;</span></span><br><span class="line"><span class="regexp">&lt;span class="glyphicon glyphicon-ok form-control-feedback"&gt;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>样式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>glyphicon-ok</td>
<td>成功状态</td>
</tr>
<tr>
<td>glyphicon-warning-sign</td>
<td>警告状态</td>
</tr>
<tr>
<td>glyphicon-remove</td>
<td>错误状态</td>
</tr>
</tbody></table>
<h3 id="控制尺寸"><a href="#控制尺寸" class="headerlink" title="控制尺寸"></a>控制尺寸</h3><p>从大到小</p>
 <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"password"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control input-lg"</span>&gt;</span><br><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"password"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span>&gt;</span><br><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"password"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control input-sm"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>注：也可以设置父元素 form-group-lg、form-group-sm，来调整。</p>
<h2 id="4-图片"><a href="#4-图片" class="headerlink" title="4. 图片"></a>4. 图片</h2><h3 id="三种形状"><a href="#三种形状" class="headerlink" title="三种形状"></a>三种形状</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/pic.png"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> <span class="attribute">class</span>=<span class="string">"img-rounded"</span>&gt;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/pic.png"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> <span class="attribute">class</span>=<span class="string">"img-circle"</span>&gt;</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/pic.png"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> <span class="attribute">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"img/pic.png"</span> <span class="attribute">alt</span>=<span class="string">"图片"</span> <span class="attribute">class</span>=<span class="string">"img-responsive"</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="第五章-辅助类和响应式工具"><a href="#第五章-辅助类和响应式工具" class="headerlink" title="第五章 辅助类和响应式工具"></a>第五章 辅助类和响应式工具</h1><h2 id="1-辅助类"><a href="#1-辅助类" class="headerlink" title="1. 辅助类"></a>1. 辅助类</h2><p>Bootstrap 在布局方面提供了一些细小的辅组样式，用于文字颜色以及背景色的设置、显示关闭图标等等。</p>
<p>情景文本颜色</p>
<table>
<thead>
<tr>
<th>样式名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text-muted</td>
<td>柔和灰</td>
</tr>
<tr>
<td>text-primary</td>
<td>主要蓝</td>
</tr>
<tr>
<td>text-success</td>
<td>成功绿</td>
</tr>
<tr>
<td>text-info</td>
<td>信息蓝</td>
</tr>
<tr>
<td>text-warning</td>
<td>警告黄</td>
</tr>
<tr>
<td>text-danger</td>
<td>危险红</td>
</tr>
</tbody></table>
<p> 情景背景色</p>
<table>
<thead>
<tr>
<th>样式名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bg-primary</td>
<td>主要蓝</td>
</tr>
<tr>
<td>bg-success</td>
<td>成功绿</td>
</tr>
<tr>
<td>bg-info</td>
<td>信息蓝</td>
</tr>
<tr>
<td>bg-warning</td>
<td>警告黄</td>
</tr>
<tr>
<td>bg-danger</td>
<td>危险红</td>
</tr>
</tbody></table>
<p> 关闭按钮</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">type</span></span>=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span>&gt;&amp;times;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>三角符号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"caret"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>快速浮动</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pull-left"</span>&gt;左边&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"pull-right"</span>&gt;右边&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">注：这个浮动其实就是 float，只不过使用了!important 加强了优先级。</span><br></pre></td></tr></table></figure>

<p>块级居中</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> class=<span class="string">"center-block"</span>&gt;居中&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">注：就是 margin:x <span class="built_in">auto</span>；并且设置了 display:<span class="keyword">block</span>;。</span><br></pre></td></tr></table></figure>

<p>清理浮动</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"clearfix"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">注：这个 <span class="keyword">div</span> 可以放在需要清理浮动区块的前面即可。</span><br></pre></td></tr></table></figure>

<p>显示和隐藏</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>="<span class="symbol">show</span>"&gt;<span class="symbol">show</span>&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">&lt;<span class="symbol">div</span> <span class="symbol">class</span>="<span class="symbol">hidden</span>"&gt;<span class="symbol">hidden</span>&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-响应式工具"><a href="#2-响应式工具" class="headerlink" title="2. 响应式工具"></a>2. 响应式工具</h2><table>
<thead>
<tr>
<th>类</th>
<th>超小屏幕 手机(&lt;768px)</th>
<th>小屏幕pad (&gt;=768px)</th>
<th>中等屏幕 桌面（&gt;=992px）</th>
<th>大屏幕 桌面（&gt;=1200px）</th>
</tr>
</thead>
<tbody><tr>
<td>.visible-xs-*</td>
<td>可见</td>
<td>隐藏</td>
<td>隐藏</td>
<td>隐藏</td>
</tr>
<tr>
<td>.visible-sm-*</td>
<td>隐藏</td>
<td>可见</td>
<td>隐藏</td>
<td>隐藏</td>
</tr>
<tr>
<td>.visible-md-*</td>
<td>隐藏</td>
<td>隐藏</td>
<td>可见</td>
<td>隐藏</td>
</tr>
<tr>
<td>.visible-lg-*</td>
<td>隐藏</td>
<td>隐藏</td>
<td></td>
<td>可见</td>
</tr>
<tr>
<td>.hiddden=xs</td>
<td>隐藏</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td>.hidden-sm</td>
<td>可见</td>
<td></td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td>.hidden-md</td>
<td>可见</td>
<td>可见</td>
<td>隐藏</td>
<td>可见</td>
</tr>
<tr>
<td>.hidden-lg</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
<td>隐藏</td>
</tr>
</tbody></table>
<p>超小屏幕激活显示 </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"visible-xs-block a"</span>&gt;Bootstrap&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>超小屏幕激活隐藏</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"hidden-xs a"</span>&gt;Bootstrap&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p> 注：对于显示的内容，有三种变体，分别为：block、inline-block、inline。</p>
<h1 id="第六章-组件"><a href="#第六章-组件" class="headerlink" title="第六章 组件"></a>第六章 组件</h1><h2 id="1-图标菜单和按钮组件"><a href="#1-图标菜单和按钮组件" class="headerlink" title="1. 图标菜单和按钮组件"></a>1. 图标菜单和按钮组件</h2><h3 id="小图标组件"><a href="#小图标组件" class="headerlink" title="小图标组件"></a>小图标组件</h3><p>Bootstrap 提供了免费的 263 个小图标（数了两次），具体可以参考中文官网的组件<br>链接：<a href="http://v3.bootcss.com/components/#glyphicons。可以使用\" target="_blank" rel="noopener">http://v3.bootcss.com/components/#glyphicons。可以使用\</a><i>或&lt;span&gt;标签来配合使用，具体如下：</i></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//也可以结合按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-xs"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-star"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉菜单组件"><a href="#下拉菜单组件" class="headerlink" title="下拉菜单组件"></a>下拉菜单组件</h3><p>下拉菜单，就是点击一个元素或按钮，触发隐藏的列表显示出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    	下拉菜单</span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按钮和菜单需要包裹在.dropdown 的容器里，而作为被点击的元素按钮需要设置data-toggle=”dropdown”才能有效。对于菜单部分，设置 class=”dropdown-menu”才能自动隐藏并添加固定样式。设置 class=”caret”表示箭头，可上可下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/设置向上触发</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropup"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//菜单项居右对齐，默认值是 dropdown-menu-left</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu dropdown-menu-right"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//设置菜单的标题，不要加超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>网站导航<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//设置菜单的分割线</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//设置菜单的禁用项</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//让菜单默认显示</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown open"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按钮组组件"><a href="#按钮组组件" class="headerlink" title="按钮组组件"></a>按钮组组件</h3><p>按钮组就是多个按钮集成在一个容器里形成独有的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//将多个按钮组整合起来便于管理</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-toolbar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//设置按钮组大小</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-lg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;div class="</span><span class="attr">btn-group</span> <span class="attr">btn-group-sm</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-xs"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//嵌套一个分组，比如下拉菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">            下拉菜单<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：这里&lt;div&gt;中并没有实现 class=”dropdown”，通过源码分析知道嵌套本身已经 有定位就不需要再设置。而右边的圆角只要多加一个 class=”dropdown-toggle”即可。  </p>
<p>设置按钮组垂直排列</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"btn-group-vertical"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>设置两端对齐按钮组，使用标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group-justified"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>中<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>右<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-输入框和导航组件"><a href="#2-输入框和导航组件" class="headerlink" title="2. 输入框和导航组件"></a>2. 输入框和导航组件</h2><h3 id="输入框组件"><a href="#输入框组件" class="headerlink" title="输入框组件"></a>输入框组件</h3><p>文本输入框就是可以在元素前后加上文字或按钮，可以实现对表单控件的扩展。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//在左侧添加文字</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//在右侧添加文字</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@163.com<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//在两侧添加文字</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//设置尺寸，另外三种分别是默认、xs、sm</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group input-group-lg"</span>&gt;</span></span><br><span class="line">//左侧使用复选框和单选框</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//左侧使用按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//左侧使用下拉菜单或分列式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">下拉菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>网站导航<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h3><p>Bootstrap 提供了一组导航组件，用于实现 Web 页面的栏目操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本导航标签页</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//胶囊式导航</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line">//垂直胶囊式导航</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span>&gt;</span></span><br><span class="line">//导航两端对齐</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs nav-justified"</span>&gt;</span></span><br><span class="line">//禁用导航中的项目</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//带下拉菜单的导航</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">下拉菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="导航条组件"><a href="#导航条组件" class="headerlink" title="导航条组件"></a>导航条组件</h3><p>导航条是网站中作为导航页头的响应式基础组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本格式</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">//反色调导航</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">//基本导航条，包含标题和列表</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">//导航条中使用表单</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">//导航中使用按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">//导航中使用对齐方式，left 和 right</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn navbar-right"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">//导航中使用一段文本</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navbar-text"</span>&gt;</span>我是一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//非导航链接，一般需要置入文本区域内</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-link"</span>&gt;</span>非导航链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//将导航固定在顶部，下面的内容会自动上移</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-fixed-top"</span>&gt;</span></span><br><span class="line">//将导航补丁在底部</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-fixed-bottom"</span>&gt;</span></span><br><span class="line">//静态导航，和页面等宽的导航条，去掉了圆角</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-static-top"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-路径分页标签和徽章组件"><a href="#3-路径分页标签和徽章组件" class="headerlink" title="3. 路径分页标签和徽章组件"></a>3. 路径分页标签和徽章组件</h2><h3 id="路径组件"><a href="#路径组件" class="headerlink" title="路径组件"></a>路径组件</h3><p>路径组件也叫做面包屑导航。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//面包屑导航</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>韩版 2015 年羊绒毛衣<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">分页组件可以提供带有展示页面的功能。</span><br><span class="line">//默认分页</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//首选项和禁用</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//设置尺寸，四种 lg、默认、sm 和 xs</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination pagination-lg"</span>&gt;</span></span><br><span class="line">//翻页效果</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//对齐翻页链接</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//翻页项禁用</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//在文本后面带上标签</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">//不同色调的标签</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-primary"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-success"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-warning"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标签 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//未读信息数量徽章</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>信息 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//按钮中使用徽章</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span></span><br><span class="line">提交 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">//激活状态自动适配色调</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-巨幕页头缩略图和警告框组件"><a href="#4-巨幕页头缩略图和警告框组件" class="headerlink" title="4. 巨幕页头缩略图和警告框组件"></a>4. 巨幕页头缩略图和警告框组件</h2><h3 id="巨幕组件"><a href="#巨幕组件" class="headerlink" title="巨幕组件"></a>巨幕组件</h3><p>巨幕组件主要是展示网站的关键性区域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//在固定的范围内，有圆角</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>网站标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个学习性的网站！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>更多内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>网站标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个学习性的网站！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>更多内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="页头组件"><a href="#页头组件" class="headerlink" title="页头组件"></a>页头组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增加一些空间</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">&lt;h1&gt;大标题 &lt;small&gt;小标题&lt;<span class="regexp">/small&gt;&lt;/</span>h1&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="缩略图组件"><a href="#缩略图组件" class="headerlink" title="缩略图组件"></a>缩略图组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//缩略图配合响应式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//自定义内容</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>图文并茂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个图片结合文字的缩略图<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>图文并茂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个图片结合文字的缩略图<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>图文并茂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个图片结合文字的缩略图<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3 col-sm-4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/pic.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>图文并茂<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个图片结合文字的缩略图<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="警告框组件"><a href="#警告框组件" class="headerlink" title="警告框组件"></a>警告框组件</h3><p>警告框组件是一组预定义消息。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本警告框</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//带关闭的警告框</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line">Bootstrap</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//自动适配的超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line">Bootstrap，请到官网 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-进度条组件"><a href="#5-进度条组件" class="headerlink" title="5. 进度条组件"></a>5. 进度条组件</h2><p>进度条组件为当前工作流程或动作提供时时反馈。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本进度条</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width: 60%;"</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//最低值进度条</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"min-width:20px"</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//结合情景的进度条</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"min-width:20px;width:60%"</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//条纹状，IE10+支持</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success</span></span></span><br><span class="line"><span class="tag"><span class="string">progress-bar-striped"</span> <span class="attr">style</span>=<span class="string">"min-width:20px;width:60%"</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//动画效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success progress-bar-striped</span></span></span><br><span class="line"><span class="tag"><span class="string">active"</span> <span class="attr">style</span>=<span class="string">"min-width:20px;width:60%"</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//堆叠效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"min-width:20px;width:35%"</span>&gt;</span>35%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-warning"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"min-width:20px;width:20%"</span>&gt;</span>20%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-danger"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"min-width:20px;width:10%"</span>&gt;</span>10%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-列表组面板和嵌入组件"><a href="#6-列表组面板和嵌入组件" class="headerlink" title="6. 列表组面板和嵌入组件"></a>6. 列表组面板和嵌入组件</h2><h3 id="列表组组件"><a href="#列表组组件" class="headerlink" title="列表组组件"></a>列表组组件</h3><p>列表组组件用于显示一组列表的组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>1.这是起始<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>2.这是第二条数据<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>3.这是第三排信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>4.这是末尾<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">//列表项带勋章</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>1.这是起始</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//链接和首选</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item active"</span>&gt;</span>1.这是起始</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>2.这是第二条数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>3.这是第三排信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>4.这是末尾<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//按钮式列表</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"list-group-item active"</span>&gt;</span>1.这是起始 <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>2.这是第二条数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>3.这是第三排信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>4.这是末尾<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//设置项目被禁用</span><br><span class="line">class="list-group-item disabled"</span><br><span class="line">//情景类</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-success"</span>&gt;</span></span><br><span class="line">3.这是第三排信息<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">//定制内容</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item active"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>内容标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>这里是相关内容详情！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>内容标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>这里是相关内容详情！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>内容标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"list-group-item-text"</span>&gt;</span>这里是相关内容详情！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="面板组件"><a href="#面板组件" class="headerlink" title="面板组件"></a>面板组件</h3><p>面板组件就是一个存放内容的容器组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>这里是详细内容区！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//带标题容器的面板</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>面板标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//也可以设置标题元素</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>面板标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//带注脚的面板</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//情景效果：default、success、info、warning、danger、primary</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-success"</span>&gt;</span></span><br><span class="line">	//表格类面板</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是表格标题的详细内容！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">     <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">//列表类面板</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是表格标题的详细内容！<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>1.这里是首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>2.这里是第二个项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>3.这里是第三个项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>4.这里是第四个项目<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="7-模态框插件"><a href="#7-模态框插件" class="headerlink" title="7. 模态框插件"></a>7. 模态框插件</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>使用模态框的弹窗组件需要三层 div 容器元素，分别为 modal(模态声明层)、dialog(窗口声明层)、content(内容层)。在内容层里面，还有三层，分别为 header(头部)、body(主体)、footer(注脚)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="comment">&lt;!-- 模态声明，show 表示显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal show"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 窗口声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容声明 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>会员登录<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 主体 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>暂时无法登录会员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 注脚 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--如果想让模态框自动隐藏，然后通过点击按钮弹窗，那么需要做如下操作。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--模态框去掉 show，增加一个 id--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span> <span class="attr">id</span>=<span class="string">"myModal"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--点击触发模态框显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal"</span>&gt;</span>点击弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小)</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog modal-lg"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog sm-lg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        可设置淡入淡出效果</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        //在主体部分使用栅格系统中的流体</span><br><span class="line">        <span class="comment">&lt;!-- 主体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="8-下拉菜单和滚动监听插件"><a href="#8-下拉菜单和滚动监听插件" class="headerlink" title="8. 下拉菜单和滚动监听插件"></a>8. 下拉菜单和滚动监听插件</h2><h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>常规使用中，和组件方法一样，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>下拉菜单<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>声明式用法的关键核心：<br>1.外围容器使用 class=”dropdown”包裹；<br>2.内部点击按钮事件绑定 data-toggle=”dropdown”；<br>3.菜单元素使用 class=”dropdown-menu”。<br>//如果按钮在容器外部，可以通过 data-target 进行绑定。</p>
<p>在 JavaScript 调用中，没有属性，方法并不好用，下面介绍四个基本事件。<br>//下拉菜单方法，但仍然需要 data-*</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).dropdown();</span><br><span class="line">$(<span class="string">'#btn'</span>).dropdown(<span class="string">'toggle'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="滚动监听"><a href="#滚动监听" class="headerlink" title="滚动监听"></a>滚动监听</h3><p>滚动监听插件是用来根据滚动条所处在的位置自动更新导航项目，显示导航项目高亮显示。</p>
<h2 id="9-标签页和工具提示插件"><a href="#9-标签页和工具提示插件" class="headerlink" title="9. 标签页和工具提示插件"></a>9. 标签页和工具提示插件</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p>标签页也就是通常所说的选项卡功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本用法</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#html5"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bootstrap"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#jquery"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#extjs"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>ExtJS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span> <span class="attr">style</span>=<span class="string">"padding: 10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"html5"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"bootstrap"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"jquery"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"extjs"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 JavaScript，直接使用 tab 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#nav a'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    $(<span class="keyword">this</span>).tab(<span class="string">'show'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="工具提示"><a href="#工具提示" class="headerlink" title="工具提示"></a>工具提示</h3><p>工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"#"</span> <span class="attribute">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attribute">title</span>=<span class="string">"超文本标识符"</span>&gt;HTML5&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>JS 部分需要声明</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#section'</span>).tooltip();</span><br></pre></td></tr></table></figure>



<h2 id="10-弹出框和警告框插件"><a href="#10-弹出框和警告框插件" class="headerlink" title="10. 弹出框和警告框插件"></a>10. 弹出框和警告框插件</h2><h3 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h3><p>弹出框即点击一个元素弹出一个包含标题和内容的容器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-danger"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">title</span>=<span class="string">"弹出框"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-content</span>=<span class="string">"这是一个弹出框插件"</span>&gt;</span>点击弹出/隐藏弹出框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript 初始化</span></span><br><span class="line">$(<span class="string">'button'</span>).popover();</span><br></pre></td></tr></table></figure>

<h3 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h3><p>警告框即为点击小时的信息框。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>警告：您的浏览器不支持！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//添加淡入淡出效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning fade in"</span>&gt;</span></span><br><span class="line">如果用 JavaScript，可以代替 data-dismiss="alert"</span><br></pre></td></tr></table></figure>

<p>JavaScript 方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.close'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'#alert'</span>).alert(<span class="string">'close'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="11-按钮和折叠插件"><a href="#11-按钮和折叠插件" class="headerlink" title="11. 按钮和折叠插件"></a>11. 按钮和折叠插件</h2><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>可以通过按钮插件创建不同状态的按钮。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//单个切换。</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"button"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span>单个切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//单选按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">checked</span>&gt;</span> 男</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 女</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//复选按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">checked</span>&gt;</span>音乐</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 体育</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">   	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 美术</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 电脑</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//加载状态</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myButton"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-loading-text</span>=<span class="string">"Loading..."</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span>加载状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myButton'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = $(<span class="keyword">this</span>).button(<span class="string">'loading'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        btn.button(<span class="string">'reset'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Button 插件中的 button 方法中有三个参数：toggle、reset、string(比如 loading、complete)。</span></span><br><span class="line"><span class="comment">//可代替 data-toggle="button"</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="keyword">this</span>).button(<span class="string">'toggle'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><p>通过点击可以折叠内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line">&lt;button class="btn btn-primary" data-toggle="collapse" data-target="#content" Bootstrap&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">        Bootstrap 是 Twitter 推出的一个用于前端开发的开源工具包。它由</span><br><span class="line">        Twitter 的设计师 Mark Otto 和 Jacob Thornton 合作开发,是一个 CSS/HTML 框架。目</span><br><span class="line">        前,Bootstrap 最新版本为 3.0 。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="12-轮播插件"><a href="#12-轮播插件" class="headerlink" title="12. 轮播插件"></a>12. 轮播插件</h2><p>轮播插件就是将几张同等大小的大图，按照顺序依次播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCarousel"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span><span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/slide1.png"</span> <span class="attr">alt</span>=<span class="string">"第一张"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/slide2.png"</span> <span class="attr">alt</span>=<span class="string">"第二张"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/slide3.png"</span> <span class="attr">alt</span>=<span class="string">"第三张"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span> <span class="attr">class</span>=<span class="string">"carousel-controlleft"</span>&gt;</span>&amp;lsaquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#myCarousel"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span> <span class="attr">class</span>=<span class="string">"carousel-controlright"</span>&gt;</span>&amp;rsaquo;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>data 属性解释：</p>
<ol>
<li>data-slide 接受关键字 prev 或 next，用来改变幻灯片相对于当前位置的位置；</li>
<li>data-slide-to 来向轮播底部创建一个原始滑动索引，data-slide-to=”2”将把滑动块移动到一个特定的索引，索引从 0 开始计数。</li>
<li>data-ride=”carousel”属性用户标记轮播在页面加载时开始动画播放。</li>
</ol>
<p>轮播插件有三个自定义属性：</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>data-interval</td>
<td>默认值 5000，幻灯片的等待时间(毫秒)。如果为false，轮播将不会自动开始循环。</td>
</tr>
<tr>
<td>data-pause</td>
<td>默认鼠标停留在幻灯片区域(hover)即暂停轮播，鼠标离开即启动轮播。</td>
</tr>
<tr>
<td>data-wrap</td>
<td>默认值 true，轮播是否持续循环。</td>
</tr>
<tr>
<td>如果在 JavaScript 调用就直接使用键值对方法，并去掉 data-；</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置自定义属性</span></span><br><span class="line">$(<span class="string">'#myCarousel'</span>).carousel(&#123;</span><br><span class="line"><span class="comment">//设置自动播放/2 秒</span></span><br><span class="line">interval : <span class="number">2000</span>,</span><br><span class="line"><span class="comment">//设置暂停按钮的事件</span></span><br><span class="line">pause : <span class="string">'hover'</span>,</span><br><span class="line"><span class="comment">//只播一次</span></span><br><span class="line">wrap : <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>轮播插件还提供了一些方法，如下：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>cycle</td>
<td>循环各帧(默认从左到右)</td>
</tr>
<tr>
<td>pause</td>
<td>停止轮播</td>
</tr>
<tr>
<td>number</td>
<td>轮播到指定的图片上(小标从 0 开始，类似数组)</td>
</tr>
<tr>
<td>prev</td>
<td>循环轮播到上一个项目</td>
</tr>
<tr>
<td>next</td>
<td>循环轮播到下一个项目</td>
</tr>
</tbody></table>
<p>点击按钮执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//点击后，自动播放</span></span><br><span class="line">$(<span class="string">'#myCarousel'</span>).carousel(<span class="string">'cycle'</span>);</span><br><span class="line"><span class="comment">//其他雷同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="13-附加导航插件"><a href="#13-附加导航插件" class="headerlink" title="13. 附加导航插件"></a>13. 附加导航插件</h2><p>附加导航即粘贴在屏幕某处实现锚点功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例。</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data-spy</span>=<span class="string">"scroll"</span> <span class="attr">data-target</span>=<span class="string">"#myScrollspy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span> <span class="attr">style</span>=<span class="string">"height:150px"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap Affix<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-3"</span> <span class="attr">id</span>=<span class="string">"myScrollspy"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span> <span class="attr">data-spy</span>=<span class="string">"affix"</span> <span class="attr">data-offset-top</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section-1"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section-2"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section-3"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section-4"</span>&gt;</span>第四部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section-4"</span>&gt;</span>第五部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-9"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"section-1"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"section-2"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"section-3"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"section-4"</span>&gt;</span>第四部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"section-5"</span>&gt;</span>第四部分<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导航的 CSS 部分</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav-pills</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.nav-pills</span><span class="selector-class">.affix</span>&#123;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JavaScript 代替 data-spy=”affix” data-offset-top=”125”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myAffix'</span>).affix(&#123;</span><br><span class="line">    offset: &#123;</span><br><span class="line">    	top: <span class="number">150</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<table class="table table-hover">







</table>]]></content>
  </entry>
  <entry>
    <title>PHP技术与应用-Laravel 高级框架</title>
    <url>/2019/12/04/PHP%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-Laravel%20%E9%AB%98%E7%BA%A7%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="第一章-简介"><a href="#第一章-简介" class="headerlink" title="第一章 简介"></a>第一章 简介</h1><blockquote>
<p>Laravel是一款简洁、优雅的PHP Web开发框架，它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。</p>
<a id="more"></a>
</blockquote>
<h2 id="第一节-安装"><a href="#第一节-安装" class="headerlink" title="第一节 安装"></a>第一节 安装</h2><blockquote>
<p>官方手册推荐我们使用Laravel Homstead虚拟机，我们可以着手去配置该虚拟机，若是初学者的话，建议先使用本地环境wamp即可。</p>
</blockquote>
<h3 id="1-检查环境"><a href="#1-检查环境" class="headerlink" title="1. 检查环境"></a>1. 检查环境</h3><blockquote>
<p>新建phpinfo.php，输入phpinfo()函数，并进行访问查看。</p>
</blockquote>
<ul>
<li>PHP &gt;= 7.0.0</li>
<li>PHP OpenSSL 扩展</li>
<li>PHP PDO 扩展</li>
<li>PHP Mbstring 扩展</li>
<li>PHP Tokenizer 扩展</li>
<li>PHP XML 扩展</li>
</ul>
<h3 id="2-安装-Composer"><a href="#2-安装-Composer" class="headerlink" title="2. 安装 Composer"></a>2. 安装 Composer</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下载地址(点击 Composer-Setup.exe 按钮)</span></span><br><span class="line">https:<span class="comment">//getcomposer.org/download/</span></span><br></pre></td></tr></table></figure>

<h3 id="3-下载-Laravel"><a href="#3-下载-Laravel" class="headerlink" title="3.下载 Laravel"></a>3.下载 Laravel</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">composer</span> <span class="meta">global</span> <span class="meta">require</span> <span class="string">"laravel/installer"</span></span><br></pre></td></tr></table></figure>

<h2 id="第二节-配置"><a href="#第二节-配置" class="headerlink" title="第二节 配置"></a>第二节 配置</h2><blockquote>
<p>在使用前，要确保以下几个内容的配置是正确的，配置有问题会影响我们的项目开发。</p>
</blockquote>
<h3 id="1-虚拟域名"><a href="#1-虚拟域名" class="headerlink" title="1. 虚拟域名"></a>1. 虚拟域名</h3><blockquote>
<p>框架安装完毕后要给项目定义一个虚拟域名，具体步骤如下：</p>
</blockquote>
<h4 id="httpd-conf"><a href="#httpd-conf" class="headerlink" title="httpd.conf"></a>httpd.conf</h4><p>打开<code>wamp/bin/apache/apache2.4.23/conf/httpd.conf</code> 文件，查找 <code>Include conf/extra/httpd-vhosts.conf</code>，将其前方的#号去掉。</p>
<h4 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h4><p>编辑 <code>C:\Windows\System32\drivers\etc\hosts</code>文件，添加：<code>127.0.0.1  www.test.com</code></p>
<h4 id="httpd-vhost"><a href="#httpd-vhost" class="headerlink" title="httpd.vhost"></a>httpd.vhost</h4><p>编辑 <code>wamp/bin/apache/ apache2.4.23/conf/extra/httpd-vhosts.conf</code>文件，参考如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制已存在的 VirtualHost 标签包含的所有内容，并修改如下三步(含)</span></span><br><span class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</span><br><span class="line">	ServerName www.test.com	<span class="comment">//1. 修改这里与hosts文件中的域名一样</span></span><br><span class="line">	ServerAlias localhost</span><br><span class="line">	DocumentRoot c:/wamp/www/test/<span class="keyword">public</span>	<span class="comment">//2.修改这里为你的Laravel框架入口文件所在路径</span></span><br><span class="line">	&lt;Directory  <span class="string">"c:/wamp/www/test/public"</span>&gt;	<span class="comment">//3.这里的修改同上</span></span><br><span class="line">		Options +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class="line">		AllowOverride All</span><br><span class="line">		<span class="keyword">Require</span> local</span><br><span class="line">	&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h3><blockquote>
<p>Laravel 的所有配置文件都存储在 config 目录下</p>
</blockquote>
<h3 id="3-目录权限"><a href="#3-目录权限" class="headerlink" title="3. 目录权限"></a>3. 目录权限</h3><blockquote>
<p>确保<code>storage</code> 目录和 <code>bootstrap/cache</code> 目录应该允许 Web 服务器写入，否则 Laravel 将无法运行。</p>
</blockquote>
<h3 id="4-应用秘钥"><a href="#4-应用秘钥" class="headerlink" title="4. 应用秘钥"></a>4. 应用秘钥</h3><blockquote>
<p><strong>如果应用程序密钥没有被设置，就不能确保你的用户会话和其他加密数据的安全！</strong></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在git命令行输入如下命令即可</span></span><br><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure>

<h3 id="5-env配置"><a href="#5-env配置" class="headerlink" title="5. .env配置"></a>5. .env配置</h3><blockquote>
<p>确保.env配置文件中的数据库配置是正确的(如下)</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_DATABASE=myshop</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=<span class="number">1234</span></span><br></pre></td></tr></table></figure>

<h3 id="6-维护模式"><a href="#6-维护模式" class="headerlink" title="6. 维护模式"></a>6. 维护模式</h3><blockquote>
<p>若你的项目进入了维护状态，你需要执行以下命令来关闭你的应用；维护完毕记得开启！</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护</span></span><br><span class="line">php artisan down</span><br><span class="line">  </span><br><span class="line"><span class="comment">//启动</span></span><br><span class="line">php artisan up</span><br></pre></td></tr></table></figure>

<h2 id="第三节-目录结构"><a href="#第三节-目录结构" class="headerlink" title="第三节 目录结构"></a>第三节 目录结构</h2><blockquote>
<p>认识目录结构，有助于我们在后续的开发更迅速与便捷</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">test</span><br><span class="line">  |----app/ *			<span class="comment">//包含应用程序的核心代码(Controller、Middleware、Model)</span></span><br><span class="line">  |----bootstrap/		 <span class="comment">//包含引导框架并配置自动加载的文件</span></span><br><span class="line">  |----config/ *		 <span class="comment">//包含应用程序所有的配置文件(app.php、database.php)</span></span><br><span class="line">  |----database/ *		 <span class="comment">//包含数据填充和迁移文件</span></span><br><span class="line">  |----<span class="keyword">public</span>/ *		 <span class="comment">//包含了入口文件index.php、资源文件(Js/Css/Img)</span></span><br><span class="line">  |----resoure/ *		 <span class="comment">//包含了视图和未编译的资源文件(LESS/SASS)</span></span><br><span class="line">  |----routes/ *		 <span class="comment">//包含了应用的所有路由定义(web.php/api.php)</span></span><br><span class="line">  |----storage/			 <span class="comment">//包含编译的 Blade 模板</span></span><br><span class="line">  |----tests/			 <span class="comment">//包含自动化测试文件</span></span><br><span class="line">  |----vendor/			 <span class="comment">//包含了你的 Composer 依赖包</span></span><br><span class="line">  |----.env*			 <span class="comment">//环境配置文件</span></span><br><span class="line">  |----artisan*			 <span class="comment">//Artisan 是 Laravel 中自带的命令行工具的名称</span></span><br><span class="line">  |----composer.json	  <span class="comment">//Composer用于安装依赖包的配置文件</span></span><br><span class="line">  |----composer.lock	  <span class="comment">//优先读取的依赖版本文件，可确保使用者使用相同版本依赖包</span></span><br><span class="line">  |----package.json		  <span class="comment">//依赖包详细描述文件</span></span><br><span class="line">  |----phpunit.xml		  <span class="comment">//一个面向程序员的PHP测试框架</span></span><br><span class="line">  |----readme.md		  <span class="comment">//使用说明书</span></span><br><span class="line">  |----server.php		  <span class="comment">//模拟了web server的rewrite功能，主要用于测试</span></span><br><span class="line">  |----webpack.mix.js	   <span class="comment">//资源文件打包配置文件</span></span><br></pre></td></tr></table></figure>

<h1 id="第二章-路由"><a href="#第二章-路由" class="headerlink" title="第二章 路由"></a>第二章 路由</h1><blockquote>
<p>当我们请求index.php这个加载框架的起点，它就为我们加载Composer生成定义的自动加载器，紧接着就找到<code>bootstrap/app.php</code>脚本中检索 Laravel 应用程序的实例。</p>
<p>当程序完成上述几步以后，就会通过HTTP请求去访问<code>app/Http/Kernel.php</code> 中的 HTTP 内核，从而使得内核把我们带到了<code>Routes/web.php</code> 路由文件中。</p>
<p>执行完了上述的一系列过滤、加载、启动之后，Laravel开始给我们分发路由了，路由的核心就是要让我们定位到某个闭包程序或某个控制器上去。</p>
</blockquote>
<h2 id="第一节-基本应用"><a href="#第一节-基本应用" class="headerlink" title="第一节 基本应用"></a>第一节 基本应用</h2><h4 id="简单路由"><a href="#简单路由" class="headerlink" title="简单路由"></a>简单路由</h4><blockquote>
<p>路由文件在 Routes/web.php</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个测试路由，当我们访问 www.test.com/test 时，会访问到此路由，并在页面输出 Hello World</span></span><br><span class="line">Route::get(<span class="string">'/test'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><blockquote>
<p>路由指定了请求方式，必须由该方式进行访问，否则页面会提示未找到</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get($uri, $callback);		<span class="comment">//GET方式请求(常用)</span></span><br><span class="line">Route::post($uri, $callback);		<span class="comment">//POST方式请求(常用)</span></span><br><span class="line">Route::put($uri, $callback);		<span class="comment">//伪造PUT方法请求</span></span><br><span class="line">Route::patch($uri, $callback);		<span class="comment">//伪造PATCH方法请求</span></span><br><span class="line">Route::delete($uri, $callback);		<span class="comment">//伪造DELETE方法请求</span></span><br></pre></td></tr></table></figure>

<h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><blockquote>
<p>说到请求，当然少不了参数，Laravel的路由位置也可以传递参数</p>
</blockquote>
<h5 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h5><blockquote>
<p>路由中的参数，可以在闭包程序中直接使用，也可以在控制器中直接获取</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当我们请求 www.test.com/user/10 时，会将10的参数传递到当前路由</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'当前用户的id是：'</span>.$id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h5><blockquote>
<p>参数与参数之间的符号分割没有明确的限定，通常为/或-</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当我们请求 www.test.com/user/5-info-1 时，可以访问到如下路由的内容</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;-&#123;service&#125;-&#123;page&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id, $service, $page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出参数信息</span></span><br><span class="line">  	<span class="keyword">return</span> <span class="string">'您正在查看用户id为：'</span>.$id.<span class="string">'的'</span>.$service.<span class="string">'服务的第'</span>.$page.<span class="string">'页的内容！'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><blockquote>
<p>某些情况下，有的参数是可有可无的，我们可以使用?问好来标注改参数是可有可无的。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当我们请求 www.test.com/user/zhangsan 或 www.test.com/user时</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;name?&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($name = null)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>($name != <span class="keyword">null</span>)&#123;</span><br><span class="line">  		<span class="keyword">return</span> <span class="string">"这是zhangsan的信息"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  		<span class="keyword">return</span> <span class="string">"这里是用户的列表信息"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="正则约束"><a href="#正则约束" class="headerlink" title="正则约束"></a>正则约束</h4><h5 id="约束一个"><a href="#约束一个" class="headerlink" title="约束一个"></a>约束一个</h5><blockquote>
<p>若不给用户所传递的参数限定格式，将导致一些不必要的麻烦，因此，我们可以使用正则对其进行约束。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在路由后方追加where方法，第一个参数是要进行约束的参数名称，第二个参数则是正则模式的规则</span></span><br><span class="line">Route::get(<span class="string">'user/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'当前用户的id是：'</span>.$id;</span><br><span class="line">&#125;)-&gt;where(<span class="string">'id'</span>,<span class="string">'\d+'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="约束多个"><a href="#约束多个" class="headerlink" title="约束多个"></a>约束多个</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'user/&#123;id&#125;-&#123;service&#125;-&#123;page&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id, $service, $page)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出参数信息</span></span><br><span class="line">  	<span class="keyword">return</span> <span class="string">'您正在查看用户id为：'</span>.$id.<span class="string">'的'</span>.$service.<span class="string">'服务的第'</span>.$page.<span class="string">'页的内容！'</span>;</span><br><span class="line">&#125;)-&gt;where([<span class="string">'id'</span>=&gt;<span class="string">'\d+'</span>, <span class="string">'service'</span>=&gt;<span class="string">'\w+'</span>, <span class="string">'page'</span>=&gt;<span class="string">'\d+'</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><blockquote>
<p>某些路由的可能会非常非常长，例如users/list/info/{id}-{service}-{page}…，若想要在跳转到或获取该路由时，可能不太方便，因此，Laravel给我们准备了命名路由。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接在路由后方追加name方法，并定义当前路由的别名</span></span><br><span class="line">Route::get(<span class="string">'user/info'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;name(<span class="string">'uinfo'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="生成链接"><a href="#生成链接" class="headerlink" title="生成链接"></a>生成链接</h5><blockquote>
<p>这样一来，若我们想要进行跳转，我们可以这样写</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成 URL...</span></span><br><span class="line">$url = route(<span class="string">'uinfo'</span>);	<span class="comment">//www.test.com/user/info</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成重定向...</span></span><br><span class="line"><span class="keyword">return</span> redirect()-&gt;route(<span class="string">'uinfo'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="第二节-路由组"><a href="#第二节-路由组" class="headerlink" title="第二节 路由组"></a>第二节 路由组</h2><blockquote>
<p>我们的项目程序都是分为前台后台模块的，有些项目甚至分了其他诸多模块，因此，若一直按之前的路由书写方式写下去，将导致路由文件中的路由毫无章法，因此，Laravel为我们准备了路由组</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前台路由组（没有任何条件限定）</span></span><br><span class="line">Route::group([这里存放中间件、路由前缀等信息，默认为空(老版本)],<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//加载首页的路由</span></span><br><span class="line">  Route::get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="string">"这里是前台首页！"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><blockquote>
<p>如果你想要让用户在进入当前路由组之前，给其添加一些要求，我们可以使用路由组中间件进行限定</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加了一个login的中间件限定，用户必须登录后才能访问前台首页（知乎）</span></span><br><span class="line">Route::middleware(<span class="string">'login'</span>)-&gt;group(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//加载首页的路由</span></span><br><span class="line">  Route::get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="string">"这里是前台首页！"</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果有多个中间件限定，我们也可以以数组方式进行使用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::middleware([<span class="string">'login'</span>,<span class="string">'auth'</span>,<span class="string">'status'</span>])-&gt;group(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;...&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote>
<p>这里的命名空间主要是针对控制器的，因为项目划分前后台的原因，我们需要将前台的控制器放置到前台目录，后台控制器放置到后台目录，因此，这个时候就涉及到了前后台命名空间的问题。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若你的控制器来自于后台，则可以直接使用如下方式指定</span></span><br><span class="line">Route::namespace(<span class="string">'Admin'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在 "App\Http\Controllers\Admin" 命名空间下的控制器</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="路由前缀"><a href="#路由前缀" class="headerlink" title="路由前缀"></a>路由前缀</h5><blockquote>
<p>当我们通过路由访问某个应用时，因为前后台的原因，路由肯定也应当有一些响应的区别，因此，我们可以使用路由前缀来规定访问前台和访问后台的路由。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当我们请求 www.test.com/admin/users 时会访问到如下的方法</span></span><br><span class="line">Route::prefix(<span class="string">'admin'</span>)-&gt;group(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 匹配包含 "/admin/users" 的 URL</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="同时使用"><a href="#同时使用" class="headerlink" title="同时使用"></a>同时使用</h3><blockquote>
<p>若你想要再同一个路由组中同时使用中间件、路由前缀、命名空间等信息，你可以这样写</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::middleware(<span class="string">'login'</span>)-&gt;prefix(<span class="string">'home'</span>)-&gt;namespace(<span class="string">'home'</span>)-&gt;group(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//加载首页的控制器</span></span><br><span class="line">  Route::get(<span class="string">'/'</span>,<span class="string">'IndexController@index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="第三章-中间件"><a href="#第三章-中间件" class="headerlink" title="第三章 中间件"></a>第三章 中间件</h1><blockquote>
<p>上一章，我们讲到了中间件，但是只是说了它怎么使用，还不知道怎么创建，因此，本节来带大家详细操作一下。</p>
</blockquote>
<h2 id="第一节-基本应用-1"><a href="#第一节-基本应用-1" class="headerlink" title="第一节 基本应用"></a>第一节 基本应用</h2><blockquote>
<p>中间件可以过滤用户进入应用的HTTP请求，它是在用户发送HTTP请求之后，执行路由内容操作之前来进行执行的一段内容【参考Laravel运行过程图示】</p>
</blockquote>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><blockquote>
<p>生成的文件会被自动存储到<code>app/Http/Middleware</code> 目录内，并同时生成了<code>Login.php</code> 文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在git中执行下面指令</span></span><br><span class="line">php artisan make:middleware Login</span><br></pre></td></tr></table></figure>

<h3 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h3><blockquote>
<p>这里我们写一个测试的登录验证，判断用户在进入后台框架时是否进行了登录</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是中间件类中的handle方法，用于处理传入的请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//判断用户是否登录</span></span><br><span class="line">  <span class="keyword">if</span>(!$request-&gt;session()-&gt;has(<span class="string">'uid'</span>))&#123;</span><br><span class="line">    <span class="comment">//若没有登录，跳转到登录页</span></span><br><span class="line">    <span class="keyword">return</span> rediract(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//若登录了，则执行下一步操作</span></span><br><span class="line">  <span class="keyword">return</span> $next($request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加中间件"><a href="#添加中间件" class="headerlink" title="添加中间件"></a>添加中间件</h3><blockquote>
<p>给指定的路由添加中间件，在浏览器访问 <a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a></p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::middleware(<span class="string">'login'</span>)-&gt;prefix(<span class="string">'home'</span>)-&gt;namespace(<span class="string">'home'</span>)-&gt;group(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//加载首页的控制器</span></span><br><span class="line">  Route::get(<span class="string">'/'</span>,<span class="string">'IndexController@index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h3><blockquote>
<p>第四部中的访问是失败的，系统告诉我们没有当前中间件类，原因是我们还没有对其进行注册，在<code>app/Http/Kernel.php</code> 中前去注册吧</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里是路由注册</span></span><br><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">  <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line">  <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">  <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">  <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">  <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">  <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">  <span class="string">'login'</span> =&gt; \App\Http\Middleware\Login::class,	<span class="comment">//指定命名空间与类名</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上五个步骤都完成了，我们的中间件即可生效！</p>
</blockquote>
<h2 id="第二节-CSRF跨域请求伪造"><a href="#第二节-CSRF跨域请求伪造" class="headerlink" title="第二节 CSRF跨域请求伪造"></a>第二节 CSRF跨域请求伪造</h2><blockquote>
<p>跨站请求伪造是一种恶意的攻击，它凭借已通过身份验证的用户身份来运行未经过授权的命令。我们要做的就是防止有人恶意攻击我们的网站。因此需要借助Laravel帮我们生成的这张CSRF「令牌」</p>
</blockquote>
<h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过表单发送post请求时，需要添加令牌验证</span></span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">"/profile"</span>&gt;</span><br><span class="line">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">    ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-JS的ajax请求"><a href="#2-JS的ajax请求" class="headerlink" title="2. JS的ajax请求"></a>2. JS的ajax请求</h3><blockquote>
<p>需要添加的内容有两块，一个在head头不，一个在post请求内部</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//head头添加token请求</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"csrf-token"</span> <span class="attr">content</span>=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//定义发送post请求的按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>单击发送ajax的post请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//定义发送post请求的js代码(使用JQuery)</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//单击事件中添加如下代码</span></span></span><br><span class="line"><span class="javascript">    $.ajaxSetup(&#123;</span></span><br><span class="line">      headers: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">'X-CSRF-TOKEN'</span>: $(<span class="string">'meta[name="csrf-token"]'</span>).attr(<span class="string">'content'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//发送post请求给指定路由</span></span></span><br><span class="line"><span class="javascript">  	$.post(<span class="string">'/testAjax'</span>,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">  	  alert(data);</span><br><span class="line">	&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="第四章-控制器"><a href="#第四章-控制器" class="headerlink" title="第四章 控制器"></a>第四章 控制器</h1><blockquote>
<p>第四节所讲的路由，大多是直接在闭包函数中来执行操作的。这固然可以，但是，我们不推荐你在闭包函数中书写程序逻辑代码，因此，Laravel还给我们提供了另一种处理逻辑程序的介质-控制器</p>
</blockquote>
<h2 id="第一节-基础控制器"><a href="#第一节-基础控制器" class="headerlink" title="第一节 基础控制器"></a>第一节 基础控制器</h2><h3 id="生成控制器"><a href="#生成控制器" class="headerlink" title="生成控制器"></a>生成控制器</h3><blockquote>
<p>下面命令可以直接在<code>app/Http/Controllers</code> 当中直接直接生成控制器文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//和ThinkPHP当中的控制器定义方式一致，类名也采用大写字母开头的驼峰命名法</span></span><br><span class="line">php artisan make:controller UsersController</span><br></pre></td></tr></table></figure>

<blockquote>
<p>除了上面的直接生成，你还可以将控制器生成在一个目录中</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样做的好处是，可以将前后台或其他模块的控制器划分开【注意命名空间】</span></span><br><span class="line">php artisan make:controller Admin/UsersController</span><br></pre></td></tr></table></figure>

<h3 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h3><blockquote>
<p>这些路由，是指向控制指定方法的路由</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'UsersController@show'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若是带命名空间的控制器，我们需要按照如下方式书写【代表要找<code>Admin/UsersController</code> 】</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'Admin\UsersController'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="控制器结构"><a href="#控制器结构" class="headerlink" title="控制器结构"></a>控制器结构</h3><blockquote>
<p>如下是一个控制器内部的结构</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;	<span class="comment">//当前控制器所在的空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;	<span class="comment">//控制器基类的导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示给定用户的信息。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  int  $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span>	//这里可以接受用户跳转时传递的<span class="title">id</span>信息</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//响应 `resource/view/users/show.blade.php` 页面，并传递参数</span></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'users/show'</span>, [<span class="string">'user'</span> =&gt; User::findOrFail($id)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二节-控制器中间件"><a href="#第二节-控制器中间件" class="headerlink" title="第二节 控制器中间件"></a>第二节 控制器中间件</h2><blockquote>
<p>之前，我们只给路由组添加过中间件，除了可以给路由组来添加中间件，我们还可以给任何一个指定的路由指定中间件，包括控制器路由。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们可以这样写</span></span><br><span class="line">Route::get(<span class="string">'users/&#123;id&#125;'</span>, <span class="string">'Admin\UsersController'</span>)-&gt;middleware(<span class="string">'login'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者，你也可以给控制器当中的指定方法添加中间件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化一个新的控制器实例。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);	<span class="comment">//给当前控制器添加auth中间件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'log'</span>)-&gt;only(<span class="string">'index'</span>);  <span class="comment">//只给当前控制器的index方法添加log中间件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware(<span class="string">'subscribed'</span>)-&gt;except(<span class="string">'store'</span>);	<span class="comment">//除了store方法都添加中间件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三节-资源控制器"><a href="#第三节-资源控制器" class="headerlink" title="第三节 资源控制器"></a>第三节 资源控制器</h2><blockquote>
<p>资源路由可以将典型的「CRUD」路由指定到一个控制器上，仅需一行代码即可实现。</p>
</blockquote>
<h4 id="生成资源控制器"><a href="#生成资源控制器" class="headerlink" title="生成资源控制器"></a>生成资源控制器</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接在Controllers目录生成</span></span><br><span class="line">php artisan make:controller GoodsController --resource</span><br><span class="line">  </span><br><span class="line"><span class="comment">//生成到指定空间下</span></span><br><span class="line">php artisan make:controller Admin/GoodsController --resource</span><br></pre></td></tr></table></figure>

<h4 id="定义路由-1"><a href="#定义路由-1" class="headerlink" title="定义路由"></a>定义路由</h4><blockquote>
<p>因为资源控制器的特性是，只要我们按照其要求请求指定的路由，我们就可以访问到资源控制的指定方法，因此我们在定义路由的时候不需要再去指定方法，这将极大地节省路由文件的空间。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::resource(<span class="string">'goods'</span>, <span class="string">'GoodsController'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="资源控制器操作处理"><a href="#资源控制器操作处理" class="headerlink" title="资源控制器操作处理"></a>资源控制器操作处理</h4><blockquote>
<p>这里罗列了我们请求资源控制器指定方法的动作、路由及能够请求到的方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th>动作</th>
<th>URI</th>
<th>操作</th>
<th>路由名称</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td><code>/photos</code></td>
<td>index</td>
<td>photos.index</td>
</tr>
<tr>
<td>GET</td>
<td><code>/photos/create</code></td>
<td>create</td>
<td>photos.create</td>
</tr>
<tr>
<td>POST</td>
<td><code>/photos</code></td>
<td>store</td>
<td>photos.store</td>
</tr>
<tr>
<td>GET</td>
<td><code>/photos/{photo}</code></td>
<td>show</td>
<td>photos.show</td>
</tr>
<tr>
<td>GET</td>
<td><code>/photos/{photo}/edit</code></td>
<td>edit</td>
<td>photos.edit</td>
</tr>
<tr>
<td>PUT/PATCH</td>
<td><code>/photos/{photo}</code></td>
<td>update</td>
<td>photos.update</td>
</tr>
<tr>
<td>DELETE</td>
<td><code>/photos/{photo}</code></td>
<td>destroy</td>
<td>photos.destroy</td>
</tr>
</tbody></table>
<h4 id="请求方法伪造"><a href="#请求方法伪造" class="headerlink" title="请求方法伪造"></a>请求方法伪造</h4><blockquote>
<p>通过观察上面表格，我们发现，有两个动作比较特殊，一个是PUT/PATFCH，另一个就是DELETE，HTTP请求没有给我们准备这两个请求方式，因此，我们需要伪造两种请求方式</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪造PUT/PATCH请求</span></span><br><span class="line">&#123;&#123;method_field(<span class="string">'PUT'</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//伪造DELETE请求</span></span><br><span class="line">&#123;&#123;method_field(<span class="string">'DELETE'</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Ajax删除实例"><a href="#Ajax删除实例" class="headerlink" title="Ajax删除实例"></a>Ajax删除实例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除按钮的单击事件</span></span><br><span class="line">    $(<span class="string">'.del'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自己的节点</span></span><br><span class="line">        <span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取id</span></span><br><span class="line">        <span class="keyword">var</span> id = $(<span class="keyword">this</span>).attr(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加confirm弹框</span></span><br><span class="line">        <span class="keyword">if</span>(confirm(<span class="string">"确定要删除当前数据吗？"</span>))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送ajax请求</span></span><br><span class="line">            $.post(<span class="string">'/admin/users/'</span>+id,&#123;<span class="string">"_method"</span>:<span class="string">"DELETE"</span>,<span class="string">"_token"</span>:<span class="string">"&#123;&#123;csrf_token()&#125;&#125;"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否成功</span></span><br><span class="line">                <span class="keyword">if</span>(data==<span class="number">1</span>)&#123;</span><br><span class="line">                    alert(<span class="string">'恭喜，删除成功！'</span>);</span><br><span class="line">                    _this.parent().parent().parent().remove();</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    alert(<span class="string">'抱歉，删除失败！'</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="部分资源路由"><a href="#部分资源路由" class="headerlink" title="部分资源路由"></a>部分资源路由</h4><blockquote>
<p>当声明一个资源路由时，你可以指定控制器处理部分操作，而不必使用全部默认操作：</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UsersController中只有index和show方法可以被访问</span></span><br><span class="line">Route::resource(<span class="string">'/users'</span>, <span class="string">'UsersController'</span>, [<span class="string">'only'</span> =&gt; [</span><br><span class="line">    <span class="string">'index'</span>, <span class="string">'show'</span></span><br><span class="line">]]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//UsersController中除了列表中的方法，均可被访问</span></span><br><span class="line">Route::resource(<span class="string">'/users'</span>, <span class="string">'UsersController'</span>, [<span class="string">'except'</span> =&gt; [</span><br><span class="line">    <span class="string">'create'</span>, <span class="string">'store'</span>, <span class="string">'update'</span>, <span class="string">'destroy'</span></span><br><span class="line">]]);</span><br></pre></td></tr></table></figure>

<h4 id="附加资源控制器"><a href="#附加资源控制器" class="headerlink" title="附加资源控制器"></a>附加资源控制器</h4><blockquote>
<p>在某些情况下，资源控制器的方法不足以为我们提供足够的服务，此时，我们就需要为其追加一些方法了。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是追加的路由</span></span><br><span class="line">Route::get(<span class="string">'/users/test'</span>, <span class="string">'UsersController@test'</span>);</span><br><span class="line"><span class="comment">//这里是资源控制器的路由</span></span><br><span class="line">Route::resource(<span class="string">'/users'</span>, <span class="string">'UsersController'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h4><blockquote>
<p>如果你的应用只用到了基于控制器的路由，那么你应该充分利用 Laravel 的路由缓存。使用路由缓存将极大地减少注册全部应用路由的时间。某些情况下，路由注册甚至可以快一百倍。要生成路由缓存，只需在 Artisan 命令行中执行</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan route:cache</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行这个命令之后，每一次请求的时候都将会加载缓存的路由文件。记住，如果添加了新的路由，你需要刷新路由缓存。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan route:clear</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：基于闭包的路由并不能被缓存。如果要使用路由缓存，你必须将所有的闭包路由转换成控制器类路由。</p>
</blockquote>
<h1 id="第五章-获取请求"><a href="#第五章-获取请求" class="headerlink" title="第五章 获取请求"></a>第五章 获取请求</h1><blockquote>
<p>路由和控制器我们均已经经过了系统的学习，本节的课程主要练习HTTP的请求，以及在控制器当中如何进行获取，很重要的一个操作对象是 $request 请求对象。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//当前控制器的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"><span class="comment">//用于获取HTTP请求的处理类导入</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;	</span><br><span class="line">  	<span class="comment">//在指定的方法形参列表中，使用类型约束的方法，传入请求对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      	<span class="comment">//使用request请求对象进行数据的获取，而非$_POST的原生写法</span></span><br><span class="line">        $name = $request-&gt;input(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你还可以使用另外一种方式获取</span></span><br><span class="line">      	$name = $request-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第一节-基本应用-2"><a href="#第一节-基本应用-2" class="headerlink" title="第一节 基本应用"></a>第一节 基本应用</h2><h3 id="请求路径"><a href="#请求路径" class="headerlink" title="请求路径"></a>请求路径</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若请求的目标地址是：http://test.com/users/show，则path会获取 users/show</span></span><br><span class="line">$uri = $request-&gt;path();</span><br></pre></td></tr></table></figure>

<h3 id="检测请求路径"><a href="#检测请求路径" class="headerlink" title="检测请求路径"></a>检测请求路径</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若请求的路径是：http://test.com/admin/users，则下面实例为真</span></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;is(<span class="string">'admin/*'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取完整URL"><a href="#获取完整URL" class="headerlink" title="获取完整URL"></a>获取完整URL</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有请求参数...</span></span><br><span class="line">$url = $request-&gt;url();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有请求参数...</span></span><br><span class="line">$url = $request-&gt;fullUrl();</span><br></pre></td></tr></table></figure>

<h3 id="获取请求方法"><a href="#获取请求方法" class="headerlink" title="获取请求方法"></a>获取请求方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若此时请求到该方法的方式为 GET，则输出GET</span></span><br><span class="line">$method = $request-&gt;method();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前方法是通过哪种请求方式请求的</span></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;isMethod(<span class="string">'post'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二节-获取请求数据"><a href="#第二节-获取请求数据" class="headerlink" title="第二节 获取请求数据"></a>第二节 获取请求数据</h2><blockquote>
<p>本节内容是一个重点，所有操作均为数据获取服务</p>
</blockquote>
<h3 id="获取所有数据"><a href="#获取所有数据" class="headerlink" title="获取所有数据"></a>获取所有数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以数组形式存储</span></span><br><span class="line">$res = $request-&gt;all();</span><br></pre></td></tr></table></figure>

<h3 id="获取指定数据"><a href="#获取指定数据" class="headerlink" title="获取指定数据"></a>获取指定数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//会获取到form表单中表单项name的值</span></span><br><span class="line">$name = $request-&gt;input(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定默认值(若表单提交信息中没有name相对应的值，则采用默认值)</span></span><br><span class="line">$name = $request-&gt;input(<span class="string">'name'</span>, <span class="string">'Sally'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取数组的值"><a href="#获取数组的值" class="headerlink" title="获取数组的值"></a>获取数组的值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们可以采用点的形式获取数组的相对应的值</span></span><br><span class="line">$name = $request-&gt;input(<span class="string">'products.0.name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有二维数组中的name值</span></span><br><span class="line">$names = $request-&gt;input(<span class="string">'products.*.name'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="只获取查询字符串"><a href="#只获取查询字符串" class="headerlink" title="只获取查询字符串"></a>只获取查询字符串</h3><blockquote>
<p>这里查询字符串所指的是，通过get传递到当前方法的参数信息。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取get请求中name指向的值</span></span><br><span class="line">$name = $request-&gt;query(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询字符串也可以定义默认值</span></span><br><span class="line">$name = $request-&gt;query(<span class="string">'name'</span>, <span class="string">'Helen'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="获取部分输入数据"><a href="#获取部分输入数据" class="headerlink" title="获取部分输入数据"></a>获取部分输入数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只从请求数组中获取下标为username和password的信息</span></span><br><span class="line">$input = $request-&gt;only([<span class="string">'username'</span>, <span class="string">'password'</span>]);</span><br><span class="line"><span class="comment">//这种写法也支持</span></span><br><span class="line">$input = $request-&gt;only(<span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line"><span class="comment">//获取除了credit_card的信息</span></span><br><span class="line">$input = $request-&gt;except([<span class="string">'credit_card'</span>]);</span><br><span class="line"><span class="comment">//同上</span></span><br><span class="line">$input = $request-&gt;except(<span class="string">'credit_card'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="判断请求信息是否包含某值"><a href="#判断请求信息是否包含某值" class="headerlink" title="判断请求信息是否包含某值"></a>判断请求信息是否包含某值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断请求信息中是否包含下标为name的值</span></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;has(<span class="string">'name'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断请求信息是否包含name和email的值</span></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;has([<span class="string">'name'</span>, <span class="string">'email'</span>])) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三节-获取旧输入数据"><a href="#第三节-获取旧输入数据" class="headerlink" title="第三节 获取旧输入数据"></a>第三节 获取旧输入数据</h2><blockquote>
<p>表单提交时，通常会对输入数据做信息验证，若信息内容不通过，则会跳回到表单也，此时我们刚刚输入的信息会丢失，这不便于用户执行后续的操作，因此，Laravel为我们准备了<code>闪存</code>这一概念</p>
</blockquote>
<h3 id="将数据闪存至Session"><a href="#将数据闪存至Session" class="headerlink" title="将数据闪存至Session"></a>将数据闪存至Session</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//闪存所有信息</span></span><br><span class="line">$request-&gt;flash();</span><br><span class="line"></span><br><span class="line"><span class="comment">//闪存指定信息</span></span><br><span class="line">$request-&gt;flashOnly([<span class="string">'username'</span>, <span class="string">'email'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除法闪存信息</span></span><br><span class="line">$request-&gt;flashExcept(<span class="string">'password'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="闪存后重定向"><a href="#闪存后重定向" class="headerlink" title="闪存后重定向"></a>闪存后重定向</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//闪存所有信息，并跳转至form路由</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'form'</span>)-&gt;withInput();</span><br><span class="line"></span><br><span class="line"><span class="comment">//闪存除了password之外的信息，并跳转至form路由</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">'form'</span>)-&gt;withInput(</span><br><span class="line">    $request-&gt;except(<span class="string">'password'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="视图页面的输出"><a href="#视图页面的输出" class="headerlink" title="视图页面的输出"></a>视图页面的输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; old('username') &#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第四节-Cookies-SESSION"><a href="#第四节-Cookies-SESSION" class="headerlink" title="第四节 Cookies SESSION"></a>第四节 Cookies SESSION</h2><blockquote>
<p>Laravel给我们准备的Cookies操作，会自动加密，因此更加安全，虽然我们也可以使用PHP的原生Cookie进行设置，但是推荐大家使用以下方法设置Cookies</p>
</blockquote>
<h3 id="获取Cookie值"><a href="#获取Cookie值" class="headerlink" title="获取Cookie值"></a>获取Cookie值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$value = $request-&gt;cookie(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应信息到页面，并将cookie写入用户浏览器</span></span><br><span class="line"><span class="keyword">return</span> response(<span class="string">'Hello World'</span>)-&gt;cookie(<span class="string">'name'</span>, <span class="string">'value'</span>, $minutes);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下方法同上（response信息可以省略）</span></span><br><span class="line">$cookie = cookie(<span class="string">'name'</span>, <span class="string">'value'</span>, $minutes);</span><br><span class="line"><span class="keyword">return</span> response(<span class="string">'Hello World'</span>)-&gt;cookie($cookie);</span><br></pre></td></tr></table></figure>

<h3 id="获取SESSION值"><a href="#获取SESSION值" class="headerlink" title="获取SESSION值"></a>获取SESSION值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取指定的session信息</span></span><br><span class="line">$value = $request-&gt;session()-&gt;get(<span class="string">'key'</span>);</span><br><span class="line">$value = $request-&gt;session()-&gt;get(<span class="string">'key'</span>, <span class="string">'default'</span>);	<span class="comment">//默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有的session信息</span></span><br><span class="line">$data = $request-&gt;session()-&gt;all();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断某个session信息是否存在</span></span><br><span class="line"><span class="keyword">if</span> ($request-&gt;session()-&gt;has(<span class="string">'users'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置SESSION值"><a href="#设置SESSION值" class="headerlink" title="设置SESSION值"></a>设置SESSION值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 HTTP 请求实例...</span></span><br><span class="line">$request-&gt;session()-&gt;put(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过全局辅助函数</span></span><br><span class="line">session([<span class="string">'key'</span> =&gt; <span class="string">'value'</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="删除-SESSION信息"><a href="#删除-SESSION信息" class="headerlink" title="删除 SESSION信息"></a>删除 SESSION信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除指定值</span></span><br><span class="line">$request-&gt;session()-&gt;forget(<span class="string">'key'</span>);</span><br><span class="line"><span class="comment">//删除所有信息</span></span><br><span class="line">$request-&gt;session()-&gt;flush();</span><br></pre></td></tr></table></figure>

<h3 id="全局辅助函数"><a href="#全局辅助函数" class="headerlink" title="全局辅助函数"></a>全局辅助函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 Session 中的一条数据...</span></span><br><span class="line">$value = session(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定一个默认值...</span></span><br><span class="line">$value = session(<span class="string">'key'</span>, <span class="string">'default'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储一条数据至 Session 中...</span></span><br><span class="line">session([<span class="string">'key'</span> =&gt; <span class="string">'value'</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="获取上传文件信息"><a href="#获取上传文件信息" class="headerlink" title="获取上传文件信息"></a>获取上传文件信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//放入文件表单项信息</span></span><br><span class="line">$file = $request-&gt;file(<span class="string">'photo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者直接将表单项名称写成这样也行</span></span><br><span class="line">$file = $request-&gt;photo;</span><br></pre></td></tr></table></figure>

<h3 id="判断上传文件是否存在"><a href="#判断上传文件是否存在" class="headerlink" title="判断上传文件是否存在"></a>判断上传文件是否存在</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request-&gt;hasFile(<span class="string">'photo'</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断上传文件是否有效"><a href="#判断上传文件是否有效" class="headerlink" title="判断上传文件是否有效"></a>判断上传文件是否有效</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($request-&gt;file(<span class="string">'photo'</span>)-&gt;isValid()) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取文件路径-amp-拓展名"><a href="#获取文件路径-amp-拓展名" class="headerlink" title="获取文件路径 &amp; 拓展名"></a>获取文件路径 &amp; 拓展名</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取上传文件完整路径</span></span><br><span class="line">$path = $request-&gt;photo-&gt;path();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取拓展名信息</span></span><br><span class="line">$extension = $request-&gt;photo-&gt;extension();</span><br></pre></td></tr></table></figure>

<h3 id="获取上传文件的其他信息"><a href="#获取上传文件的其他信息" class="headerlink" title="获取上传文件的其他信息"></a>获取上传文件的其他信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过该网址查看</span></span><br><span class="line">http:<span class="comment">//api.symfony.com/3.0/Symfony/Component/HttpFoundation/File/UploadedFile.html</span></span><br></pre></td></tr></table></figure>

<h3 id="存储上传文件"><a href="#存储上传文件" class="headerlink" title="存储上传文件"></a>存储上传文件</h3><blockquote>
<p>这里是移动文件到本地目录的重点内容，默认情况下，文件会上传到Storage目录，若想要修改，需要进行如下设置</p>
</blockquote>
<h4 id="设置上传文件存储目录"><a href="#设置上传文件存储目录" class="headerlink" title="设置上传文件存储目录"></a>设置上传文件存储目录</h4><blockquote>
<p>在 <code>config/filesystems.php</code> 中进行设置即可。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">'local'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'local'</span>,</span><br><span class="line">            <span class="string">'root'</span> =&gt; storage_path(<span class="string">'uploads'</span>),</span><br><span class="line">        	],</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line"><span class="string">'local'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'local'</span>,</span><br><span class="line">            <span class="string">'root'</span> =&gt; public_path(<span class="string">'uploads'</span>),</span><br><span class="line">        	],</span><br></pre></td></tr></table></figure>

<h4 id="执行上传"><a href="#执行上传" class="headerlink" title="执行上传"></a>执行上传</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件会上传到配置文件设置的目录当中</span></span><br><span class="line">$path = $request-&gt;photo-&gt;store();</span><br><span class="line"></span><br><span class="line"><span class="comment">//若要生成子目录，可以在store方法中指定，例如</span></span><br><span class="line">$path = $request-&gt;photo-&gt;store(<span class="string">'images'</span>);</span><br></pre></td></tr></table></figure>

<h1 id="第六章-响应信息"><a href="#第六章-响应信息" class="headerlink" title="第六章 响应信息"></a>第六章 响应信息</h1><blockquote>
<p>响应信息，其实就是返回一些内容给客户端浏览器，例如：返回字符串、返回数组、返回对象、返回模板等都属于是响应信息。关键字：return</p>
</blockquote>
<h3 id="1-响应模板"><a href="#1-响应模板" class="headerlink" title="1. 响应模板"></a>1. 响应模板</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> view(<span class="string">'home/Index/index'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-响应模板，并追加信息"><a href="#2-响应模板，并追加信息" class="headerlink" title="2. 响应模板，并追加信息"></a>2. 响应模板，并追加信息</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应单个参数</span></span><br><span class="line"><span class="keyword">return</span> view(<span class="string">'home/Index/index'</span>,[<span class="string">'res'</span>=&gt;$res]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应多个参数</span></span><br><span class="line"><span class="keyword">return</span> view(<span class="string">'home/Index/index'</span>,[<span class="string">'res'</span>=&gt;$res,<span class="string">'id'</span>=&gt;$id]);</span><br></pre></td></tr></table></figure>

<h3 id="3-响应JSON数据"><a href="#3-响应JSON数据" class="headerlink" title="3. 响应JSON数据"></a>3. 响应JSON数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应JSON数据</span></span><br><span class="line"> <span class="keyword">return</span> response()-&gt;json([<span class="string">'name'</span> =&gt; <span class="string">'Abigail'</span>,<span class="string">'state'</span> =&gt; <span class="string">'CA'</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="4-重定向"><a href="#4-重定向" class="headerlink" title="4. 重定向"></a>4. 重定向</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::get(<span class="string">'dashboard'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//重定向至 home/dashboard 路由</span></span><br><span class="line">  <span class="keyword">return</span> redirect(<span class="string">'home/dashboard'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重定向至上一页面并闪存表单信息</span></span><br><span class="line">  <span class="keyword">return</span> back()-&gt;withInput();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重定向至指定路由，同时往session中存储指定信息</span></span><br><span class="line">  <span class="keyword">return</span> redirect(<span class="string">'/users/create'</span>)-&gt;with(<span class="string">'error'</span>,<span class="string">'添加时遇到了错误！'</span>);</span><br><span class="line">  <span class="comment">//模板中输出错误信息</span></span><br><span class="line">  @<span class="keyword">if</span> (session(<span class="string">'error'</span>))</span><br><span class="line">      &lt;div class="alert alert-success"&gt;</span><br><span class="line">          &#123;&#123; session(<span class="string">'status'</span>) &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  @<span class="keyword">endif</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重定向至命名路由</span></span><br><span class="line">  <span class="keyword">return</span> redirect()-&gt;route(<span class="string">'login'</span>);</span><br><span class="line">  <span class="keyword">return</span> redirect()-&gt;route(<span class="string">'profile'</span>, [<span class="string">'id'</span> =&gt; <span class="number">1</span>]);	<span class="comment">//还可以追加参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//重定向至控制器指定方法</span></span><br><span class="line">  <span class="keyword">return</span> redirect()-&gt;action(<span class="string">'HomeController@index'</span>);</span><br><span class="line">  <span class="keyword">return</span> redirect()-&gt;action(<span class="string">'UserController@profile'</span>, [<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-文件下载"><a href="#5-文件下载" class="headerlink" title="5. 文件下载"></a>5. 文件下载</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将指定目录下的指定文件信息进行下载</span></span><br><span class="line"><span class="keyword">return</span> response()-&gt;download($pathToFile, $name);</span><br></pre></td></tr></table></figure>

<h3 id="6-文件响应"><a href="#6-文件响应" class="headerlink" title="6. 文件响应"></a>6. 文件响应</h3><blockquote>
<p>若你想要将文件直接输出至网页，而不是下载【例如图像或是PDF】，你可以使用如下方法</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> response()-&gt;file($pathToFile);</span><br></pre></td></tr></table></figure>

<h1 id="第七章-Blade-模板引擎"><a href="#第七章-Blade-模板引擎" class="headerlink" title="第七章 Blade 模板引擎"></a>第七章 Blade 模板引擎</h1><blockquote>
<p>掌握了路由，学习了控制器，了解了数据的请求与相应，终于要到我们的最后一个环节了，那就是将数据在Laravel独有的Blade模板上进行显示，本节我们就是要学习Laravel的Blade模板引擎的一些相关的使用技巧。</p>
</blockquote>
<h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1. 模板引擎"></a>1. 模板引擎</h3><blockquote>
<p>和ThinkPHP及Smarty类似的模板引擎使用套路，如果ThinkPHP和Smarty你都没有问题的话，Laravel的模板引擎也一定没有问题。</p>
</blockquote>
<h4 id="1-1-区块占位"><a href="#1-1-区块占位" class="headerlink" title="1.1 区块占位"></a>1.1 区块占位</h4><blockquote>
<p>首先你需要定义一个公共模板，我们这里在layouts目录中生成了index.blade.php模板</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/layouts/index.blade.php --&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">  		&lt;!--这里是一个单行占位--&gt;</span><br><span class="line">        &lt;title&gt;应用程序名称 - @<span class="keyword">yield</span>(<span class="string">'title'</span>)&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">  		&lt;!--这里是一个区块占位--&gt;</span><br><span class="line">        @section(<span class="string">'sidebar'</span>)</span><br><span class="line">            这是 master 的侧边栏。</span><br><span class="line">        @show</span><br><span class="line"></span><br><span class="line">        &lt;div class="container"&gt;</span><br><span class="line">            @<span class="keyword">yield</span>(<span class="string">'content'</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-继承布局"><a href="#2-继承布局" class="headerlink" title="2. 继承布局"></a>2. 继承布局</h3><blockquote>
<p>公共模板定义好了，那意味着你的框架已经打好了，接下来就是让其他模块来继承公共模块了，然后将需要进行内容替换的位置进行替换即可。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 文件保存于 resources/views/child.blade.php --&gt;</span><br><span class="line"><span class="comment">//继承公共模板内容</span></span><br><span class="line">@extends(<span class="string">'layouts/index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换单行占位的内容</span></span><br><span class="line">@section(<span class="string">'title'</span>, <span class="string">'Page Title'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换区块占位的sidebar内容</span></span><br><span class="line">@section(<span class="string">'sidebar'</span>)</span><br><span class="line">    @<span class="keyword">parent</span>	<span class="comment">//这里的parent代表了，依然要延续使用公共框架的内容</span></span><br><span class="line"></span><br><span class="line">    &lt;p&gt;这将被添加到主侧边栏。&lt;/p&gt;</span><br><span class="line">@endsection</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换单行占位的content内容</span></span><br><span class="line">@section(<span class="string">'content'</span>)</span><br><span class="line">    &lt;p&gt;This is my body content.&lt;/p&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<h3 id="3-控制结构"><a href="#3-控制结构" class="headerlink" title="3. 控制结构"></a>3. 控制结构</h3><h4 id="3-1-IF语句"><a href="#3-1-IF语句" class="headerlink" title="3.1 IF语句"></a>3.1 IF语句</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> (count($records) === <span class="number">1</span>)</span><br><span class="line">    我有一条记录！</span><br><span class="line">@<span class="keyword">elseif</span> (count($records) &gt; <span class="number">1</span>)</span><br><span class="line">    我有多条记录！</span><br><span class="line">@<span class="keyword">else</span></span><br><span class="line">    我没有任何记录！</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-Switch语句"><a href="#3-2-Switch语句" class="headerlink" title="3.2 Switch语句"></a>3.2 Switch语句</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">switch</span>($i)</span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">1</span>)</span><br><span class="line">        First <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">case</span>(<span class="number">2</span>)</span><br><span class="line">        Second <span class="keyword">case</span>...</span><br><span class="line">        @<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    @<span class="keyword">default</span></span><br><span class="line">        <span class="keyword">Default</span> <span class="keyword">case</span>...</span><br><span class="line">@<span class="keyword">endswitch</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-循环结构"><a href="#3-3-循环结构" class="headerlink" title="3.3 循环结构"></a>3.3 循环结构</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++)</span><br><span class="line">    目前的值为 &#123;&#123; $i &#125;&#125;</span><br><span class="line">@<span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    &lt;p&gt;此用户为 &#123;&#123; $user-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endforeach</span></span><br><span class="line">  </span><br><span class="line">@<span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">    &lt;p&gt;死循环了。&lt;/p&gt;</span><br><span class="line">@<span class="keyword">endwhile</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-特殊的流程控制语句"><a href="#3-4-特殊的流程控制语句" class="headerlink" title="3.4 特殊的流程控制语句"></a>3.4 特殊的流程控制语句</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">if</span> ($user-&gt;type == <span class="number">1</span>)</span><br><span class="line">        @<span class="keyword">continue</span>	<span class="comment">//跳过当前层遍历</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> ($user-&gt;number == <span class="number">5</span>)</span><br><span class="line">        @<span class="keyword">break</span>	<span class="comment">//终止遍历</span></span><br><span class="line">    @<span class="keyword">endif</span></span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者，你可以使用另外一种语法结构</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user)</span><br><span class="line">    @<span class="keyword">continue</span>($user-&gt;type == <span class="number">1</span>)	<span class="comment">//直接将条件放到括号</span></span><br><span class="line"></span><br><span class="line">    &lt;li&gt;&#123;&#123; $user-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">break</span>($user-&gt;number == <span class="number">5</span>)	<span class="comment">//同上</span></span><br><span class="line">@<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure>

<h1 id="第八章-数据库"><a href="#第八章-数据库" class="headerlink" title="第八章 数据库"></a>第八章 数据库</h1><blockquote>
<p>本节内容主要为Laravel操作数据库的方法</p>
</blockquote>
<h3 id="1-数据库配置"><a href="#1-数据库配置" class="headerlink" title="1. 数据库配置"></a>1. 数据库配置</h3><blockquote>
<p>在一开始的配置阶段，我们就已经配置过一次了，为了让我们有更加深刻的印象，这里再给大家普及一次。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/database.php 配置文件，我们会发现里面有env函数，代表若env已经配置好了数据库相关设置就不用再这里进行设置了。</span></span><br><span class="line"><span class="string">'mysql'</span> =&gt; [</span><br><span class="line">  <span class="string">'driver'</span> =&gt; <span class="string">'mysql'</span>,</span><br><span class="line">  <span class="string">'host'</span> =&gt; env(<span class="string">'DB_HOST'</span>, <span class="string">'127.0.0.1'</span>),</span><br><span class="line">  <span class="string">'port'</span> =&gt; env(<span class="string">'DB_PORT'</span>, <span class="string">'3306'</span>),</span><br><span class="line">  <span class="string">'database'</span> =&gt; env(<span class="string">'DB_DATABASE'</span>, <span class="string">'forge'</span>),</span><br><span class="line">  <span class="string">'username'</span> =&gt; env(<span class="string">'DB_USERNAME'</span>, <span class="string">'forge'</span>),</span><br><span class="line">  <span class="string">'password'</span> =&gt; env(<span class="string">'DB_PASSWORD'</span>, <span class="string">''</span>),</span><br><span class="line">  <span class="string">'unix_socket'</span> =&gt; env(<span class="string">'DB_SOCKET'</span>, <span class="string">''</span>),</span><br><span class="line">  <span class="string">'charset'</span> =&gt; <span class="string">'utf8mb4'</span>,</span><br><span class="line">  <span class="string">'collation'</span> =&gt; <span class="string">'utf8mb4_unicode_ci'</span>,</span><br><span class="line">  <span class="string">'prefix'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">  <span class="string">'strict'</span> =&gt; <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">'engine'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们推荐大家在<code>.env</code> 环境配置中配置数据库设置。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_PORT=<span class="number">3306</span></span><br><span class="line">DB_DATABASE=myshop</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="2-原生SQL"><a href="#2-原生SQL" class="headerlink" title="2. 原生SQL"></a>2. 原生SQL</h3><blockquote>
<p>Laravel为我们准备了一套操作数据库的原生方法，类似于ThinkPHP中的增删改查操作。</p>
<p>运行SQL语句前，先检查 <code>use Illuminate\Support\Facades\DB</code> 是不是已经进行了导入</p>
</blockquote>
<h4 id="2-1-Select-查询"><a href="#2-1-Select-查询" class="headerlink" title="2.1 Select 查询"></a>2.1 Select 查询</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生语句支持PDO预处理，采用如下方式即可</span></span><br><span class="line">$users = DB::select(<span class="string">'select * from users where active = ?'</span>, [<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Insert-添加"><a href="#2-2-Insert-添加" class="headerlink" title="2.2 Insert 添加"></a>2.2 Insert 添加</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//仍然支持PDO预处理，采用如下方式即可</span></span><br><span class="line">DB::insert(<span class="string">'insert into users (id, name) values (?, ?)'</span>, [<span class="number">1</span>, <span class="string">'Dayle'</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Update-修改"><a href="#2-3-Update-修改" class="headerlink" title="2.3 Update 修改"></a>2.3 Update 修改</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$affected = DB::update(<span class="string">'update users set votes = 100 where name = ?'</span>, [<span class="string">'John'</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Delete-删除"><a href="#2-4-Delete-删除" class="headerlink" title="2.4 Delete 删除"></a>2.4 Delete 删除</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$deleted = DB::delete(<span class="string">'delete from users'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-5-其他语句"><a href="#2-5-其他语句" class="headerlink" title="2.5 其他语句"></a>2.5 其他语句</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于表的相关操作，都可以使用statement来执行</span></span><br><span class="line">DB::statement(<span class="string">'drop table users'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-SQL监听"><a href="#3-SQL监听" class="headerlink" title="3. SQL监听"></a>3. SQL监听</h3><blockquote>
<p>Laravel框架操作数据库不太方便的一个地方就是查看执行之后的SQL语句结构，某些情况下我们书写的SQL结构可能是错误的，此时，我们需要通过Laravel为我们准备的SQL监听方法监听每一条SQL</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在 app/Providers/AppServiceProvider.php 文件的 boot 方法下添加如下内容即可</span></span><br><span class="line">file_put_contents(<span class="string">'.sqls'</span>,<span class="string">"["</span>.date(<span class="string">'Y-m-d H:i:s'</span>).<span class="string">"]"</span>.$query-&gt;sql.<span class="string">"\r\n"</span>,FILE_APPEND);</span><br></pre></td></tr></table></figure>

<h3 id="4-查询构造器"><a href="#4-查询构造器" class="headerlink" title="4. 查询构造器"></a>4. 查询构造器</h3><blockquote>
<p>用原生的SQL语句感觉很麻烦？别担心，Laravel给我们准备了另一种更加简便，流畅的数据库操作方式，那就是查询构造器。</p>
</blockquote>
<h4 id="4-1-查询"><a href="#4-1-查询" class="headerlink" title="4.1 查询"></a>4.1 查询</h4><blockquote>
<p>记得，查询构造器的使用仍然需要导入 <code>use Illuminate\Support\Facades\DB</code> 类。</p>
</blockquote>
<h5 id="4-1-1-查询所有"><a href="#4-1-1-查询所有" class="headerlink" title="4.1.1 查询所有"></a>4.1.1 查询所有</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定要操作的数据表，并调用get方法获取所有users表中的信息</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-2-获取单条"><a href="#4-1-2-获取单条" class="headerlink" title="4.1.2 获取单条"></a>4.1.2 获取单条</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取单行信息的时候一定要有一个唯一条件</span></span><br><span class="line">$user = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'name'</span>, <span class="string">'John'</span>)-&gt;first();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-3-获取单个值"><a href="#4-1-3-获取单个值" class="headerlink" title="4.1.3 获取单个值"></a>4.1.3 获取单个值</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只获取name值为John这一条信息中的email信息</span></span><br><span class="line">$email = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'name'</span>, <span class="string">'John'</span>)-&gt;value(<span class="string">'email'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="4-1-4-分块查询"><a href="#4-1-4-分块查询" class="headerlink" title="4.1.4 分块查询"></a>4.1.4 分块查询</h5><blockquote>
<p>这种查询方式适用于查询结果较多的情况，由于批量数据耗费资源过多，因此我们可以将数千条数据分批显示，例如每10条分一批，1000条数据可以分100批。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若使用分块查询，则必须给定orderBy排序条件</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;orderBy(<span class="string">'id'</span>)-&gt;chunk(<span class="number">100</span>, <span class="function"><span class="keyword">function</span> <span class="params">($users)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="4-1-5-聚合函数"><a href="#4-1-5-聚合函数" class="headerlink" title="4.1.5 聚合函数"></a>4.1.5 聚合函数</h5><blockquote>
<p>Larave实现了与很多MySQL的原生函数的兼容，因此我们可以直接对其进行使用；例如：<code>count</code>、 <code>max</code>、 <code>min</code>、 <code>avg</code> 和 <code>sum</code> 等……</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计users表共有多少条信息</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;count();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询orders表的最大price信息</span></span><br><span class="line">$price = DB::table(<span class="string">'orders'</span>)-&gt;max(<span class="string">'price'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若你想要在使用聚合函数的同时对其加入某些条件，你可以利用如下的方式。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对id在100以内的数据进行price平均值的运算</span></span><br><span class="line">$price = DB::table(<span class="string">'orders'</span>)</span><br><span class="line">                -&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="number">100</span>)</span><br><span class="line">                -&gt;avg(<span class="string">'price'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="4-1-6-指定字段查询"><a href="#4-1-6-指定字段查询" class="headerlink" title="4.1.6 指定字段查询"></a>4.1.6 指定字段查询</h5><blockquote>
<p>以往我们的查询，通常是 <code>select * from ...</code> 这种语法，这是查询所有字段的语法，若我们不想要所有的字段，指向查询几个指定字段的信息，我们可以采用如下的方法</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询 users 表中所有信息的 name、email 字段的信息，并对 email 字段定义了别名</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;select(<span class="string">'name'</span>, <span class="string">'email as user_email'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若你想要对查询结果去重【去除重复】，你可以采用如下方式</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// distinct() 方法可以去除 users 表查询结果中重复的信息</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;distinct()-&gt;get();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>某些特殊情况下，直接使用<code>select</code> 有可能导致报错，例如若想使用一些MySQL的函数，我们使用select就不能满足左右的需求，因此，Laravel为我们准备了另一种方法，让我们能够像原生SQL的使用方法一样进行指定字段信息的查询。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们可以看到 select() 方法中，使用了 DB::raw() 方法，这样就可以按照原生SQL写法使用了</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)</span><br><span class="line">                     -&gt;select(DB::raw(<span class="string">'count(*) as user_count, status'</span>))</span><br><span class="line">                     -&gt;where(<span class="string">'status'</span>, <span class="string">'&lt;&gt;'</span>, <span class="number">1</span>)</span><br><span class="line">                     -&gt;groupBy(<span class="string">'status'</span>)</span><br><span class="line">                     -&gt;get();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-7-多表联查-Join"><a href="#4-1-7-多表联查-Join" class="headerlink" title="4.1.7 多表联查 Join"></a>4.1.7 多表联查 Join</h5><blockquote>
<p>若要进行多表联查， 你仅需要确定每个表之间有关联的字段即可使用Join方法进行联查</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下语句进行了三表联查，分别为users表，contacts表、orders表，使用join方法时，指定表名，并将关联条件书写在第二个参数的位置即可实现多表联查，是不是很简单！</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)</span><br><span class="line">            -&gt;join(<span class="string">'contacts'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'contacts.user_id'</span>)</span><br><span class="line">            -&gt;join(<span class="string">'orders'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'orders.user_id'</span>)</span><br><span class="line">            -&gt;select(<span class="string">'users.*'</span>, <span class="string">'contacts.phone'</span>, <span class="string">'orders.price'</span>)</span><br><span class="line">            -&gt;get();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-8-Where格式"><a href="#4-1-8-Where格式" class="headerlink" title="4.1.8 Where格式"></a>4.1.8 Where格式</h5><blockquote>
<p>其实前面的例子，我们已经看过不少where的使用方法了，这里我们要再系统的看一下where如何用</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否相等</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="string">'='</span>, <span class="number">100</span>)-&gt;get();	<span class="comment">//等价于</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="number">100</span>)-&gt;get();	<span class="comment">//等号可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//算数运算符</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="string">'&gt;='</span>, <span class="number">100</span>)-&gt;get();	<span class="comment">//大于等于</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="string">'&lt;&gt;'</span>, <span class="number">100</span>)-&gt;get();	<span class="comment">//不等于</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模糊查询</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'name'</span>, <span class="string">'like'</span>, <span class="string">'%T%'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件查询（结构太长，我们可以换行操作）</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where([</span><br><span class="line">    [<span class="string">'status'</span>, <span class="string">'='</span>, <span class="string">'1'</span>],</span><br><span class="line">    [<span class="string">'subscribed'</span>, <span class="string">'&lt;&gt;'</span>, <span class="string">'1'</span>],</span><br><span class="line">])-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者使用如下方法（或者的关系）</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="string">'&gt;'</span>, <span class="number">100</span>)-&gt;orWhere(<span class="string">'name'</span>, <span class="string">'John'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询创建时间是2016年12月31日的所有信息【前提 created_at 字段为 datetime 类型】</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;whereDate(<span class="string">'created_at'</span>, <span class="string">'2016-12-31'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询12月新注册users的信息【前提 created_at 字段为 datetime 类型】</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;whereMonth(<span class="string">'created_at'</span>, <span class="string">'12'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询31号这天新注册的users信息【前提 created_at 字段为 datetime 类型】</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;whereDay(<span class="string">'created_at'</span>, <span class="string">'31'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询2016一整年的用户注册信息【前提 created_at 字段为 datetime 类型】</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;whereYear(<span class="string">'created_at'</span>, <span class="string">'2016'</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-9-排序-orderBy"><a href="#4-1-9-排序-orderBy" class="headerlink" title="4.1.9 排序 orderBy"></a>4.1.9 排序 orderBy</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数为要进行排序的字段，第二个参数为排序方式</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;orderBy(<span class="string">'name'</span>, <span class="string">'desc'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机排序</span></span><br><span class="line">$randomUser = DB::table(<span class="string">'users'</span>)-&gt;inRandomOrder()-&gt;first();</span><br></pre></td></tr></table></figure>

<h5 id="4-1-10-分页-Limit"><a href="#4-1-10-分页-Limit" class="headerlink" title="4.1.10 分页 Limit"></a>4.1.10 分页 Limit</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//skip的含义是跳过多少条，而take的含义是取走多少条，因此和 limit 10,5 的含义一致</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;skip(<span class="number">10</span>)-&gt;take(<span class="number">5</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">//你也可以采用下面的这种方式，结果同上</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;offset(<span class="number">10</span>)-&gt;limit(<span class="number">5</span>)-&gt;get();</span><br></pre></td></tr></table></figure>

<h4 id="4-2-添加"><a href="#4-2-添加" class="headerlink" title="4.2 添加"></a>4.2 添加</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于ThinkPHP的insert方法，将要添加的信息以一维数组的形式放入insert方法即可。</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;insert([<span class="string">'email'</span> =&gt; <span class="string">'john@example.com'</span>, <span class="string">'votes'</span> =&gt; <span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若你想要获取刚才添加成功的信息的id，你可以直接用变量获取添加成功之后的结果</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接变量获取</span></span><br><span class="line">$id = DB::table(<span class="string">'users'</span>)-&gt;insert([<span class="string">'email'</span> =&gt; <span class="string">'john@example.com'</span>, <span class="string">'votes'</span> =&gt; <span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="4-3-修改"><a href="#4-3-修改" class="headerlink" title="4.3 修改"></a>4.3 修改</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同理，和ThinkPHP的Update方法类似，将要修改的数组直接放到update方法即可，记得指定id条件</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'id'</span>, <span class="number">1</span>)-&gt;update([<span class="string">'votes'</span> =&gt; <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="4-4-删除"><a href="#4-4-删除" class="headerlink" title="4.4 删除"></a>4.4 删除</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除所有信息【不推荐】</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;delete();</span><br><span class="line"></span><br><span class="line"><span class="comment">//附加条件的删除</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;where(<span class="string">'votes'</span>, <span class="string">'&gt;'</span>, <span class="number">100</span>)-&gt;delete();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置id的删除</span></span><br><span class="line">DB::table(<span class="string">'users'</span>)-&gt;truncate();</span><br></pre></td></tr></table></figure>

<h3 id="5-数据库迁移"><a href="#5-数据库迁移" class="headerlink" title="5. 数据库迁移"></a>5. 数据库迁移</h3><blockquote>
<p>数据库迁移，是Laravel的一个非常重要的特性，它能够让我们通过编写php代码而实现对数据库内数据表的创建、修改、重构等功能！</p>
</blockquote>
<h4 id="5-1-创建迁移文件"><a href="#5-1-创建迁移文件" class="headerlink" title="5.1 创建迁移文件"></a>5.1 创建迁移文件</h4><blockquote>
<p>需要选择系统默认的结构 <code>create_tableName_table</code> ，中间tableName替换成你的数据表名称即可，迁移文件会在 <code>database/migrations</code> 目录生成。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan make:migration create_users_table</span><br></pre></td></tr></table></figure>

<h4 id="5-2-书写迁移结构"><a href="#5-2-书写迁移结构" class="headerlink" title="5.2 书写迁移结构"></a>5.2 书写迁移结构</h4><blockquote>
<p>这里书写的迁移结构，其实就是创建数据表的SQL语句，我们需要按照Laravel给我们准备的语法进行数据表的创建！</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迁移文件有两个方法，一个是up，一个是down；up用于创建数据表结构，down用于回滚数据库迁移</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateFlightsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行数据库迁移</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      	<span class="comment">//这里是创建数据表的结构</span></span><br><span class="line">        Schema::create(<span class="string">'flights'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">            $table-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'airline'</span>);</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚数据库迁移</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::drop(<span class="string">'flights'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>书写创建结构时，请参考<code>字段</code> 部分的表格</p>
</blockquote>
<h4 id="5-3-运行迁移"><a href="#5-3-运行迁移" class="headerlink" title="5.3 运行迁移"></a>5.3 运行迁移</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接执行迁移</span></span><br><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>

<h3 id="6-数据填充"><a href="#6-数据填充" class="headerlink" title="6. 数据填充"></a>6. 数据填充</h3><blockquote>
<p>主要为你刚刚通过数据库迁移生成的空表进行测试数据的添加</p>
</blockquote>
<h4 id="6-1-创建填充文件"><a href="#6-1-创建填充文件" class="headerlink" title="6.1 创建填充文件"></a>6.1 创建填充文件</h4><blockquote>
<p>文件会在<code>database/seeds</code> 目录中生成。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要采用Laravel要求的 TableNameTableSeeder 的命名格式</span></span><br><span class="line">php artisan make:seeder UsersTableSeeder</span><br></pre></td></tr></table></figure>

<h4 id="6-2-书写填充内容"><a href="#6-2-书写填充内容" class="headerlink" title="6.2 书写填充内容"></a>6.2 书写填充内容</h4><blockquote>
<p>在生成的填充文件的run方法中，根据数据表的每一个字段，进行响应类型的随机数据创建即可</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DB::table(<span class="string">'users'</span>)-&gt;insert([</span><br><span class="line">            <span class="string">'name'</span> =&gt; str_random(<span class="number">10</span>),</span><br><span class="line">            <span class="string">'email'</span> =&gt; str_random(<span class="number">10</span>).<span class="string">'@gmail.com'</span>,</span><br><span class="line">            <span class="string">'password'</span> =&gt; bcrypt(<span class="string">'secret'</span>),</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-调用填充文件"><a href="#6-3-调用填充文件" class="headerlink" title="6.3 调用填充文件"></a>6.3 调用填充文件</h4><blockquote>
<p>这一步如果不执行，你的迁移文件是不会生效的，因此，你需要在 <code>database/seeds/DatabaseTableSeeder.php</code> 文件对我们刚才书写完毕的填充文件进行调用。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//调用一下users表的填充类【将来若有其他填充文件，也在这里进行一一调用】</span></span><br><span class="line">  <span class="keyword">$this</span>-&gt;call(UsersTableSeeder::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-4-运行填充"><a href="#6-4-运行填充" class="headerlink" title="6.4 运行填充"></a>6.4 运行填充</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行该句会对所有填充文件进行执行</span></span><br><span class="line">php artisan db:seed</span><br><span class="line">  </span><br><span class="line"><span class="comment">//若你不想使用 6.3 步骤去对填充文件进行调用，你也可以使用这种指定填充文件的方式进行数据填充</span></span><br><span class="line">php artisan db:seed --<span class="class"><span class="keyword">class</span>=<span class="title">UsersTableSeeder</span></span></span><br></pre></td></tr></table></figure>

<h4 id="6-5-迁移-amp-填充"><a href="#6-5-迁移-amp-填充" class="headerlink" title="6.5 迁移&amp;填充"></a>6.5 迁移&amp;填充</h4><blockquote>
<p>如果你对数据表迁移文件进行了调整，修改，再运行迁移的时候，数据表的内容会被清空，此时，你可以采用如下方式在迁移的同时进行数据填充</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php artisan migrate:refresh --seed</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>PHP技术与应用</title>
    <url>/2019/12/04/PHP%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="第一章-网站介绍"><a href="#第一章-网站介绍" class="headerlink" title="第一章 网站介绍"></a>第一章 网站介绍</h1><h2 id="1-动态网站"><a href="#1-动态网站" class="headerlink" title="1. 动态网站"></a>1. 动态网站</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>误区：不是指网站当中包含动态图片、滚动图等动态效果</li>
<li>正解：采用数据库技术开发的网站，网页上的内容都是通过数据库提取出来动态更新的</li>
</ul>
<h3 id="B-S软件"><a href="#B-S软件" class="headerlink" title="B/S软件"></a>B/S软件</h3><ul>
<li>通过浏览器和服务器(Browser / Server)进行通信的软件，客户端给服务器发请求，服务器处理客户请求返回结果</li>
<li>优势：不用下载，不用更新，打开网页，直接使用</li>
<li>劣势：功能受限（受浏览器环境限制）</li>
</ul>
<h3 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h3><ul>
<li><p>前端：html+css+javascript</p>
</li>
<li><p>后端：php、asp、java</p>
</li>
<li><p>数据库：MySQL、SQLServer、ORACLE、DB2</p>
<a id="more"></a>

</li>
</ul>
<h2 id="2-动态网站开发所需构件"><a href="#2-动态网站开发所需构件" class="headerlink" title="2. 动态网站开发所需构件"></a>2. 动态网站开发所需构件</h2><h3 id="web前端开发"><a href="#web前端开发" class="headerlink" title="web前端开发"></a>web前端开发</h3><ul>
<li>HTML</li>
<li>CSS</li>
<li>javascript</li>
<li>浏览器</li>
</ul>
<h3 id="Web后端开发（服务器端）"><a href="#Web后端开发（服务器端）" class="headerlink" title="Web后端开发（服务器端）"></a>Web后端开发（服务器端）</h3><ul>
<li>web服务器：<strong>Apache</strong>、IIS、Tomcat…</li>
<li>数据库：<strong>MySQL</strong>、MariaDB、Oracle、SQL Server…</li>
<li>服务器端编程语言：<strong>PHP</strong>、ASP、JSP…</li>
</ul>
<h2 id="3-php语言简介"><a href="#3-php语言简介" class="headerlink" title="3. php语言简介"></a>3. php语言简介</h2><blockquote>
<p><a href="http://www.php.net/manual/zh/" target="_blank" rel="noopener">PHP</a>（原名Personal Home Page的缩写，已经正式更名为 “PHP: Hypertext Preprocessor”，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP 独特的语法混合了C、Java、Perl以及PHP自创的语法。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML文档中，执行效率很高。</p>
</blockquote>
<h3 id="php的诞生"><a href="#php的诞生" class="headerlink" title="php的诞生"></a>php的诞生</h3><p>1994年Rasmus Lerdorf设计了PHP的第一个版本PHP1.0，并于1995年将其通过社区发布。1996年又设计了PHP2，1998年，由于Zeev Suraski和Andi Gutmans当时正在做毕业设计，需要一个用于开发Web程序的语言，他们也考虑了asp和jsp，但由于ASP只能运行在Windows平台，而JSP又过于复杂，因此，他们最后选择了PHP，但他们发现，PHP的功能当时还十分有限，因此，他们决定为PHP重新编写底层的解析程序，这就是PHP的第一个被广泛使用的版本—-PHP3.0。</p>
<p><img src="images/master.jpg" alt="master.jpg"></p>
<h3 id="php的优点"><a href="#php的优点" class="headerlink" title="php的优点"></a>php的优点</h3><hr>
<p><strong>PHP 是最好的语言 ^_^</strong>，php和最好的语言几乎没有关系。一般用来讽刺一些没见过世面，把自己归属于某一种编程语言的语言教徒。</p>
<p>事实上每一门语言都有其设计的灵魂，有它的取舍。很难说什么是最好的。比起做个脑残粉总是鼓吹自己擅长的语言，不如多学几门语言，开阔视野。</p>
<p>PHP可能不是世界上最好的语言，但他一定是最适合新手学习编程的入门语言，也是进入Web开发领域的绝佳语言。</p>
<ul>
<li><p><strong>简单易学</strong></p>
<p>既能面向过程，又能面向对象，安装后各种扩展集一身，包括但不限于mysql、json、mbstr等，方便至极。html和PHP混写，执行效率很高，最新版本都内置了小型webserver（连apache都不用）。</p>
</li>
<li><p><strong>日臻完善</strong></p>
<p>语言创建者积极上进优化。各大php论坛非常活跃，语言bug全世界的程序员和你一起修复。</p>
</li>
<li><p><strong>框架成熟</strong></p>
<p>框架层出不穷，国外Ci、laravel、kohana、zf，国内thinkphp功能完善，敏捷开发就靠它！！</p>
</li>
<li><p><strong>使用广泛</strong></p>
<p>最重要的是大小公司都用，全球前100万的站点中，有70%左右的站点用PHP开发，找工作不愁啊！！！！</p>
</li>
</ul>
<h3 id="php的缺点"><a href="#php的缺点" class="headerlink" title="php的缺点"></a>php的缺点</h3><ul>
<li><p><strong>标准库的函数名、参数顺序实在是难以预测</strong></p>
<p>例如：字符串操作系列函数，strpos、strcspn里两个词素没有任何分隔符，到了str_replace、str_repeat却又冒出了下划线</p>
</li>
<li><p><strong>协调性和可靠性</strong></p>
<p>例如：变量名是大小写敏感的，函数名和类名却是大小写不敏感的</p>
</li>
<li><p><strong>奇异的写法</strong></p>
<p>例如：数组末尾添加一个元素, $arr[] = 1</p>
</li>
<li><p><strong>PHP的异常捕获系统非常异常</strong></p>
<p>很难说清楚到底哪些情况会抛出异常哪些并不会</p>
</li>
</ul>
<h2 id="4-环境配置"><a href="#4-环境配置" class="headerlink" title="4. 环境配置"></a>4. 环境配置</h2><h3 id="集成环境"><a href="#集成环境" class="headerlink" title="集成环境"></a>集成环境</h3><p>要想使用这门语言，需要搭配相应的开发环境，主要包括：</p>
<ul>
<li><p>Apache web服务器</p>
</li>
<li><p>MySQL 数据库</p>
</li>
<li><p>PHP 语言引擎</p>
<p>以上三个模块可以分别安装，再进行相关的配置（手动安装配置相对复杂）。通常使用以上三者的<strong>集成环境</strong>进行快速部署：</p>
<p><a href="_http://www.wampserver.com/"><strong>WAMP</strong></a>：Window操作系统<br><a href="https://lamp.sh/download.html" target="_blank" rel="noopener"><strong>LAMP</strong></a>：Linux操作系统<br><a href="https://www.mamp.info/en/" target="_blank" rel="noopener"><strong>MAMP</strong></a>：苹果MAC操作系统</p>
</li>
</ul>
<p>以上三个集成环境针对不同操作系统，下载安装后，开发环境就已经自动搭建好了。</p>
<p>以WAMP为例，首先，需要在网站上下载相应的软件到本地电脑。<br>安装成功，右下角 <code>W</code> 的图标为绿色</p>
<h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><ul>
<li><p>get请求 ：从服务器上获取数据</p>
</li>
<li><p>post请求：向服务器提交数据</p>
<p><img src="D:/hxsd_work/php/note/images/php.jpg" alt="php.jpg"></p>
</li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>配置文件是每一项服务的核心，配置文件缺失或修改错误，将导致服务无法正常运行</p>
</blockquote>
<ul>
<li>Apache服务配置文件：<strong>D:\wamp64\bin\apache\apache2.4.23\conf\httpd.conf</strong></li>
<li>MySQL服务配置文件：<strong>D:\wamp64\bin\mysql\mysql5.7.14\my.ini</strong></li>
<li>PHP模块配置文件：<strong>D:\wamp64\bin\apache\apache2.4.23\bin\php.ini</strong></li>
</ul>
<p><strong>注意：配置文件修改后，必须重启服务</strong></p>
<h3 id="www目录"><a href="#www目录" class="headerlink" title="www目录"></a>www目录</h3><p>www目录在wamp目录下，是网站的根目录，开发的所有文件，都要放在www目录中，通过浏览器输入localhost访问本地服务器</p>
<h3 id="localhost"><a href="#localhost" class="headerlink" title="localhost"></a>localhost</h3><p>本地服务器，安装了wamp软件的你的电脑，既是客户机，又是服务器，通过浏览器访问的是你本地的服务器，故名称为 localhost</p>
<h1 id="第二章-PHP语言基础"><a href="#第二章-PHP语言基础" class="headerlink" title="第二章 PHP语言基础"></a>第二章 PHP语言基础</h1><h2 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1. hello world"></a>1. hello world</h2><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><ul>
<li>文件后缀名为 php</li>
<li>文件名中不可包含中文、空格、特殊符号</li>
<li>建议使用有意义的英文单词命名</li>
</ul>
<h3 id="语言标记"><a href="#语言标记" class="headerlink" title="语言标记"></a>语言标记</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标准风格</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	.......</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：纯php脚本文件要求：，1. 开始标签要在第一行顶头写，2. 删除结束标签。</strong></p>
<p>php标签之外是html语言环境，在纯php代码环境下，这些html字符（包括看不见的空格或者回车，制表符号）也会一同输出，引发意外错误。因此，在编码规范中规定：库文件、class类文件等只要是纯php代码的文件，要删除结尾的 <code>?&gt;</code> 结束标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span>ajax异步请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">		$.get(<span class="string">"doAction.php"</span>,<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">			alert(data? <span class="string">"ok"</span>:<span class="string">"no"</span>);</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="keyword">false</span>; <span class="comment">//输出:""</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结束标签后有空格，输出：" "</span></span><br><span class="line"><span class="comment">//所以要删除php的结束标签</span></span><br></pre></td></tr></table></figure>

<h3 id="注释符与结束符"><a href="#注释符与结束符" class="headerlink" title="注释符与结束符"></a>注释符与结束符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*多行注释*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结束符使用英文分号 “;”</span></span><br><span class="line">$hello=<span class="string">"hello world"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="常用命令和系统函数"><a href="#常用命令和系统函数" class="headerlink" title="常用命令和系统函数"></a>常用命令和系统函数</h3><ul>
<li><p>*<em>echo *</em></p>
<p>echo输出 : 只能输出字符串、数字、布尔（true:1 false:空）类型的数据</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $hello=<span class="string">"hello world"</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;h1&gt;&#123;$hello&#125;&lt;/h1&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快速输出----------------------------------------------------</span></span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?</span>= $hello <span class="meta">?&gt;</span>&lt;/h1&gt; <span class="comment">//相当于 <span class="meta">&lt;?php</span> echo $hello <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>var_dump()</strong></li>
</ul>
<p>此函数显示一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构</p>
<p><strong>注意</strong>：<br>var_dump中的变量必须是存在的，如果变量存在但值是空，则返回false<br>没有变量时，则返回NULL<br>该函数有输出的功能，因此不必加其它的输出函数</p>
<ul>
<li><p><strong>require与include</strong></p>
<ol>
<li><p>require</p>
<p>常用于引入<code>重要</code>文件，若引入失败会直接影响到当前整个脚本，引入失败报 <code>Error错误</code></p>
</li>
<li><p>include</p>
<p>常用于引入<code>普通</code>文件，若引入失败不会对当前脚本有较大的影响，引入失败报 <code>Warning错误</code></p>
</li>
<li><p>require_once</p>
<p>避免重复引入，其他规则同require</p>
</li>
<li><p>include_once</p>
<p>避免重复引入，其他规则同include</p>
</li>
</ol>
</li>
<li><p><strong>header</strong></p>
<p>用于定义 HTTP协议头信息。</p>
</li>
</ul>
<h2 id="2-变量与常量"><a href="#2-变量与常量" class="headerlink" title="2. 变量与常量"></a>2. 变量与常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>声明变量：$</li>
</ul>
<ul>
<li><p>命名规则：字母数字下划线、首字母不能为数字、严格区分大小写、且不能使用关键字！推荐驼峰命名法</p>
</li>
<li><p>变量销毁：unset(变量名)，被销毁的变量在内存中被释放</p>
</li>
<li><p>引用变量</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量引用：用不同的名字访问同一个变量内容</span></span><br><span class="line">$man=<span class="string">"zhangsan"</span>; </span><br><span class="line">$student=&amp;$man; <span class="comment">//用&amp;符号引用</span></span><br><span class="line">var_dump($man===$student);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>使用define关键字定义常量，常量命名要全部大写，常量的数据类型不能是 资源、对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义常量</span></span><br><span class="line">define(<span class="string">"SCHOOL"</span>,<span class="string">"清华大学"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断常量</span></span><br><span class="line">var_dump( defined(<span class="string">"SCHOOL"</span>) );  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="变量与常量的差异"><a href="#变量与常量的差异" class="headerlink" title="变量与常量的差异"></a>变量与常量的差异</h3><table>
<thead>
<tr>
<th>差异</th>
<th>变量</th>
<th>常量</th>
</tr>
</thead>
<tbody><tr>
<td>定义</td>
<td>$声明</td>
<td>define()函数定义</td>
</tr>
<tr>
<td>命名</td>
<td>大小写敏感</td>
<td>必须大写（行业规范）</td>
</tr>
<tr>
<td>赋值</td>
<td>可以重新赋值</td>
<td>不能再赋值</td>
</tr>
<tr>
<td>数据类型</td>
<td>8种数据类型</td>
<td>只能是标量</td>
</tr>
<tr>
<td>销毁</td>
<td>unset() 销毁</td>
<td>不能销毁</td>
</tr>
<tr>
<td>判断方法</td>
<td>isset() 判断是否定义</td>
<td>defined() 判断是否定义</td>
</tr>
<tr>
<td>作用域</td>
<td>局部作用域</td>
<td>全局作用域</td>
</tr>
</tbody></table>
<h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h2><h3 id="八种数据类型"><a href="#八种数据类型" class="headerlink" title="八种数据类型"></a>八种数据类型</h3><ul>
<li>四种标量类型<ul>
<li>布尔型（boolean）</li>
<li>整   型（Integer）范围：2^32或2^64（超出自动转换为浮点型）</li>
<li>浮点型（float）范围：双精度</li>
<li>字符串（string）</li>
</ul>
</li>
<li>两种复合类型<ul>
<li>数组型（array）</li>
<li>对象型（object）</li>
</ul>
</li>
<li>两种特殊类型<ul>
<li>资源型（resource）</li>
<li>空    型（null）</li>
</ul>
</li>
</ul>
<h3 id="不同进制"><a href="#不同进制" class="headerlink" title="不同进制"></a>不同进制</h3> <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$number1 = <span class="number">0b10</span>;	<span class="comment">//0b开头 二进制 结果:2</span></span><br><span class="line">$number2 = <span class="number">0123</span>;	<span class="comment">//0开头 八进制 结果:83</span></span><br><span class="line">$number3 = <span class="number">0x123</span>;	<span class="comment">//0X开头 十六进制 结果:291</span></span><br></pre></td></tr></table></figure>

<h3 id="对象型"><a href="#对象型" class="headerlink" title="对象型"></a>对象型</h3><p>具有一定功能和特征的单个事物，对象是属性和方法的集合</p>
<h3 id="资源型"><a href="#资源型" class="headerlink" title="资源型"></a>资源型</h3><p>变量可以是文件夹、一个文件、从数据库中得到的结果集等，操作这个变量，相当于操作这些资源。</p>
<h3 id="NULL型"><a href="#NULL型" class="headerlink" title="NULL型"></a>NULL型</h3><p>null也是数据，通常表示一种状态，变量没有任何值，就用null表示。以下情况会得到null：</p>
<ul>
<li>直接将一个变量赋值为null</li>
<li>将一个变量销毁后再次使用该变量</li>
<li>直接使用一个不存在的变量</li>
</ul>
<h2 id="4-数据类型转换"><a href="#4-数据类型转换" class="headerlink" title="4. 数据类型转换"></a>4. 数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>在特殊运算时，会有自动类型转换的情况</p>
<table>
<thead>
<tr>
<th>自动转换为： false</th>
<th>自动转换为： true</th>
<th>自动转换为： int</th>
<th>自动转换为： string</th>
</tr>
</thead>
<tbody><tr>
<td>整型： 0</td>
<td>非0整数</td>
<td>true :  1</td>
<td>true : “1”</td>
</tr>
<tr>
<td>浮点： 0.0或0.00</td>
<td>非0浮点数</td>
<td>false : 0</td>
<td>false : “ “</td>
</tr>
<tr>
<td>字符串： “ ” 或 “0”</td>
<td>非空字符串</td>
<td>null: 0</td>
<td>null: “ “</td>
</tr>
<tr>
<td>数组：空数组</td>
<td>非空数组</td>
<td></td>
<td></td>
</tr>
<tr>
<td>null</td>
<td>对象</td>
<td></td>
<td></td>
</tr>
<tr>
<td>未知变量（或被销毁变量）</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul>
<li><p>改变原变量类型</p>
<p>使用 <strong>settype()</strong> 函数可以将一个指定变量强制转换为另一种指定类型</p>
</li>
<li><p>不改变原变量类型</p>
<p>格式：新变量 = (指定变量类型) 原变量;</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制类型转换：不改变原变量类型</span></span><br><span class="line"><span class="comment">//定义一个存储变量</span></span><br><span class="line">$old = <span class="number">1</span>;</span><br><span class="line">$new;	<span class="comment">//用于接收转换之后的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始转换</span></span><br><span class="line">$new = (Boolean) $old;	<span class="comment">//true</span></span><br><span class="line">$new = (Integer) $old;	<span class="comment">//1</span></span><br><span class="line">$new = (Float) $old;	<span class="comment">//float 1</span></span><br><span class="line">$new = (String) $old;	<span class="comment">//"1"</span></span><br><span class="line">$new = (<span class="keyword">Array</span>) $old;	<span class="comment">//Array</span></span><br><span class="line">$new = (Object) $sum;	<span class="comment">//Object</span></span><br></pre></td></tr></table></figure>

<h3 id="常用变量检测函数"><a href="#常用变量检测函数" class="headerlink" title="常用变量检测函数"></a>常用变量检测函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>gettype()</td>
<td>判断变量类型：<br>返回 boolean、integer、double（ float 返回 “double”）、string、array、object、resource、null、unknown type</td>
</tr>
<tr>
<td>isset()</td>
<td>检测变量是否存在</td>
</tr>
<tr>
<td>empty()</td>
<td>判断一个变量是否为空（字符串、数组、0、null）</td>
</tr>
<tr>
<td>其他</td>
<td>判断变量类型的系列函数<br>is_array()、is_bool()、is_float()、is_integer()、is_null()、is_numeric()、is_object()、is_resource()、 is_string() 和 is_scalar()是否为标量</td>
</tr>
</tbody></table>
<h3 id="常用数学运算函数"><a href="#常用数学运算函数" class="headerlink" title="常用数学运算函数"></a>常用数学运算函数</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>rand</td>
<td>rand([int, int])</td>
<td>返回一个随机整数</td>
</tr>
<tr>
<td>mt_rand</td>
<td>mt_rand ([int, int])</td>
<td>使用Mersenne Twister算法返回随机整数</td>
</tr>
<tr>
<td>abs</td>
<td>abs (mixe)</td>
<td>返回数字的绝对值</td>
</tr>
<tr>
<td>min</td>
<td>min(array)   min(mixed, mixed [, …] )</td>
<td>返回最小值</td>
</tr>
<tr>
<td>max</td>
<td>max (array)   max(mixed, mixed [, …] )</td>
<td>返回最大值</td>
</tr>
<tr>
<td>round</td>
<td>round (float [, int [, int]])</td>
<td>四舍五入</td>
</tr>
<tr>
<td>floor</td>
<td>floor (float)</td>
<td>舍去小数部分取整</td>
</tr>
<tr>
<td>ceil</td>
<td>ceil ( float)</td>
<td>小数部分非零返回整数部分就加1</td>
</tr>
<tr>
<td>pow</td>
<td>pow(mixed, mixed)</td>
<td>返回base的exp次方的值</td>
</tr>
<tr>
<td>sqrt</td>
<td>sqrt (float)</td>
<td>返回平方根</td>
</tr>
<tr>
<td>sin</td>
<td>sin (float)</td>
<td>返回正弦值</td>
</tr>
<tr>
<td>cos</td>
<td>cos (float)</td>
<td>返回余弦值</td>
</tr>
<tr>
<td>tan</td>
<td>tan (float)</td>
<td>返回正切值</td>
</tr>
<tr>
<td>deg2rad</td>
<td>deg2rad (float)</td>
<td>将角度转换为弧度</td>
</tr>
<tr>
<td>bindec</td>
<td>bindec (string)</td>
<td>二进制转十进制</td>
</tr>
<tr>
<td>decbin</td>
<td>decbin (int)</td>
<td>十进制转二进制</td>
</tr>
<tr>
<td>octdec</td>
<td>octdec (string)</td>
<td>八进制转十进制</td>
</tr>
<tr>
<td>decoct</td>
<td>decoct (int)</td>
<td>十进制转八进制</td>
</tr>
<tr>
<td>hexdec</td>
<td>hexdec (string)</td>
<td>十六进制转十进制</td>
</tr>
<tr>
<td>dechex</td>
<td>dechex (int)</td>
<td>十进制转十六进制</td>
</tr>
<tr>
<td>exp</td>
<td>float exp(float arg)</td>
<td>返回<strong>e</strong>的arg幂次值，<strong>e</strong>为自然对数的底数，值为2.718282。</td>
</tr>
<tr>
<td>pi</td>
<td>float pi (void)</td>
<td>返回圆周率的值</td>
</tr>
</tbody></table>
<h2 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h2><h3 id="三种定义方式"><a href="#三种定义方式" class="headerlink" title="三种定义方式"></a>三种定义方式</h3><table>
<thead>
<tr>
<th>单引号</th>
<th>双引号</th>
<th>定界符</th>
</tr>
</thead>
<tbody><tr>
<td>不支持解析变量</td>
<td>支持解析变量，不支持表达式</td>
<td>同双引号</td>
</tr>
<tr>
<td>不能插入单引号</td>
<td>不能插入双引号</td>
<td>可以插入双引号和单引号</td>
</tr>
<tr>
<td>只能转义 <code>反斜杠</code> 和 <code>单引号</code></td>
<td>支持解析转义字符(\n、\t、\s 等）</td>
<td>同双引号</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$num=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单引号</span></span><br><span class="line">$title=<span class="string">'hxsd'</span>.$num.<span class="string">'beijing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双引号 支持解析变量，不能解析表达式,例如：&#123;$hxsd+1&#125;</span></span><br><span class="line">$school =<span class="string">"&lt;div id='box'&gt;</span></span><br><span class="line"><span class="string">	&lt;h1&gt;&#123;$hxsd&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;"</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//定界符（可以任意取名）</span></span><br><span class="line">$str2 = <span class="string">&lt;&lt;&lt;mark</span></span><br><span class="line"><span class="string">&lt;div id='box'&gt;</span></span><br><span class="line"><span class="string">	&lt;h1 class="main"&gt;<span class="subst">&#123;$hxsd&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">mark;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：---------------------------------------------------------</span></span><br><span class="line"><span class="comment">//定界符中可以使用单、双引号，可以解析变量</span></span><br><span class="line"><span class="comment">//定界符中的字符串，会保留所有格式，包括各种空格（尽量顶格写，避免开始的空格）</span></span><br><span class="line"><span class="comment">//结束标记一定要顶格写</span></span><br><span class="line"><span class="comment">//开始、结束标记（上面代码中的‘mark’）后不能再有空格等字符（包括注释语句也不能有）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串支持折行，注意:折行位置会多一个空格</span></span><br><span class="line">$txt=<span class="string">"abcdef</span></span><br><span class="line"><span class="string">ghijk"</span>;  <span class="comment">//显示结果：abcd efghijk</span></span><br></pre></td></tr></table></figure>

<h3 id="常用字符串操作函数"><a href="#常用字符串操作函数" class="headerlink" title="常用字符串操作函数"></a>常用字符串操作函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>trim（）</td>
<td>去除字符串首尾空白等特殊符号或指定字符序列</td>
</tr>
<tr>
<td>strtolower()</td>
<td>转换为小写</td>
</tr>
<tr>
<td>strtoupper()</td>
<td>转换为大写</td>
</tr>
<tr>
<td>htmlspecialchars()</td>
<td>格式化字串中的html标签</td>
</tr>
<tr>
<td>strip_tags()</td>
<td>函数剥去 HTML、XML 以及 PHP 的标签</td>
</tr>
<tr>
<td>md5()</td>
<td>计算字符串的 MD5 散列值</td>
</tr>
<tr>
<td>strlen()</td>
<td>字节长度      utf8编码  西文：1字节   汉字：3字节</td>
</tr>
<tr>
<td>mb_strlen()</td>
<td>字符个数</td>
</tr>
<tr>
<td>substr()</td>
<td>字符串截取函数（中文乱码）</td>
</tr>
<tr>
<td>mb_substr()</td>
<td>字符串截取函数（中文不乱码）</td>
</tr>
<tr>
<td>strstr()</td>
<td>查找字符串的首次出现，开始向后截取全部，并返回</td>
</tr>
<tr>
<td>strpos()、stripos()</td>
<td>查找字符串在另一字符串中第一次、最后一次出现的位置 （<strong>不区分大小写</strong>）</td>
</tr>
<tr>
<td>strrpos()、strripos()</td>
<td>同上 （<strong>区分大小写</strong>）</td>
</tr>
<tr>
<td></td>
<td>翻转字符串</td>
</tr>
<tr>
<td></td>
<td>按字节来比较字符串</td>
</tr>
<tr>
<td>str_replace()</td>
<td>字符串替换函数</td>
</tr>
<tr>
<td>str_repeat（）</td>
<td>重复一个字符串</td>
</tr>
<tr>
<td>ltrim() 、 trim() 、 rtrim()</td>
<td>去除左侧 、  两侧  、 右侧多余字符(默认删除空格)</td>
</tr>
<tr>
<td>explode( 符号 , 字符串 )</td>
<td>字符串 → 数组</td>
</tr>
<tr>
<td>implode( 符号 , 数组 )</td>
<td>数组 → 字符串</td>
</tr>
<tr>
<td>md5（）、sha1（）</td>
<td>字符串加密</td>
</tr>
</tbody></table>
<h2 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h2><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><ul>
<li>关联式数组：下标为有意义的字符串</li>
<li>索引式数组：下标为默认从0开始的数值</li>
</ul>
<h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><ul>
<li>直接赋值方式定义</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a[] = <span class="number">10</span>;		</span><br><span class="line">$a[] = <span class="number">20</span>;		</span><br><span class="line">$a[<span class="string">'name'</span>] = <span class="string">'张三'</span>;</span><br><span class="line">$a[<span class="string">'sex'</span>] = <span class="string">'男'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 0 =&gt; int 10</span></span><br><span class="line"><span class="comment"> * 1 =&gt; int 20</span></span><br><span class="line"><span class="comment"> * 'name' =&gt; string '张三' (length=9)</span></span><br><span class="line"><span class="comment"> * 'sex' =&gt; string '男' (length=3)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用array()函数</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b = <span class="keyword">array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">$b = <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'张三'</span>,<span class="string">'sex'</span>=&gt;<span class="string">'男'</span>,<span class="string">'age'</span>=&gt;<span class="number">28</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>快捷赋值</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line">$c = [<span class="string">'name'</span>=&gt;<span class="string">'张三'</span>，<span class="string">'sex'</span>=&gt;<span class="string">'男'</span>,<span class="string">'age'</span>=&gt;<span class="number">28</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>二维数组与多维数组</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维数组</span></span><br><span class="line">$group = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">'one'</span>=&gt;<span class="keyword">array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>),</span><br><span class="line">  	<span class="string">'two'</span>=&gt;<span class="keyword">array</span>(<span class="string">'赵六'</span>,<span class="string">'孙七'</span>),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个三维数组</span></span><br><span class="line">$class = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">'class01'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">		<span class="string">'one'</span>=&gt;<span class="keyword">array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>),</span><br><span class="line">  		<span class="string">'two'</span>=&gt;<span class="keyword">array</span>(<span class="string">'赵六'</span>,<span class="string">'孙七'</span>),</span><br><span class="line">    ),</span><br><span class="line"> 	<span class="string">'class02'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">		<span class="string">'one'</span>=&gt;<span class="keyword">array</span>(<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'王五'</span>),</span><br><span class="line">  		<span class="string">'two'</span>=&gt;<span class="keyword">array</span>(<span class="string">'赵六'</span>,<span class="string">'孙七'</span>),</span><br><span class="line">    );</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取李四</span></span><br><span class="line"><span class="keyword">echo</span> $class[<span class="string">'class02'</span>][<span class="string">'one'</span>][<span class="number">1</span>];	<span class="comment">//李四</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for遍历索引数组------------------------------------------------------</span></span><br><span class="line">$arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>，<span class="number">55</span>];</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($arr); $i++)&#123;</span><br><span class="line">    var_dump($arr[$i]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//foreach------------------------------------------------------------</span></span><br><span class="line">$f_arr=[<span class="string">"name"</span>=&gt;<span class="string">"zhangsan"</span>,<span class="string">"age"</span>=&gt;<span class="number">18</span>,<span class="string">"sex"</span>=&gt;<span class="string">"m"</span>];</span><br><span class="line"><span class="keyword">foreach</span> ($f_arr <span class="keyword">as</span> $key=&gt;$value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $key.<span class="string">":"</span>.$value.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//list（只用于索引数组）------------------------------------------------</span></span><br><span class="line"><span class="keyword">list</span>($a,$b,$c,$d,$e) = [<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>,<span class="string">"小明"</span>,<span class="string">"小红"</span>];</span><br><span class="line"><span class="keyword">echo</span> $a,$b,$c,$d,$e;</span><br></pre></td></tr></table></figure>

<h3 id="数组的输出"><a href="#数组的输出" class="headerlink" title="数组的输出"></a>数组的输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 输出： array(3) &#123; [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; array(3) &#123; [0]=&gt; string(1) &quot;a&quot; [1]=&gt; string(1) &quot;b&quot; [2]=&gt; string(1) &quot;c&quot; &#125; &#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$b = 3.1; $c = TRUE; var_dump($b,$c);</span><br><span class="line"></span><br><span class="line">/* 输出： float(3.1) bool(true)</span><br><span class="line"></span><br><span class="line">*/ ?&gt;</span><br></pre></td></tr></table></figure>



<h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复制数组</span></span><br><span class="line">$arr1=[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>];</span><br><span class="line">$arr2=$arr1; <span class="comment">//$arr2是个新数组</span></span><br><span class="line">var_dump($arr2===$arr1);<span class="comment">//false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用&amp;引用数组</span></span><br><span class="line">$arr3=&amp;$arr1;</span><br><span class="line">var_dump($arr3===$arr1);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="数组常用函数"><a href="#数组常用函数" class="headerlink" title="数组常用函数"></a>数组常用函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>array_values()</td>
<td>数组中所有的值放入一个新的索引数组，并返回</td>
</tr>
<tr>
<td>array_keys()</td>
<td>数组中所有的键放入一个新的索引数组，并返回</td>
</tr>
<tr>
<td>array_reverse()</td>
<td>颠倒数组顺序</td>
</tr>
<tr>
<td>in_array(元素，数组)</td>
<td>检查数组中是否存在某个值</td>
</tr>
<tr>
<td>count()</td>
<td>计算数组中的单元数目 或 对象中的属性个数</td>
</tr>
<tr>
<td>array_unshift()</td>
<td>在数组开头插入一个或多个元素</td>
</tr>
<tr>
<td>array_push()</td>
<td>在数组结尾插入一个或多个元素</td>
</tr>
<tr>
<td>array_unique()</td>
<td>移除数组中重复的值</td>
</tr>
<tr>
<td>array_pop()</td>
<td>删除数组最后一个元素</td>
</tr>
<tr>
<td>array_shift()</td>
<td>删除数组开头的元素</td>
</tr>
<tr>
<td>array_splice(数组，索引，数量)</td>
<td>删除指定元素（<br>删除元素后，会重排数组索引，用unset删除不会重排数组索引）</td>
</tr>
<tr>
<td>sort()</td>
<td>排序 ( 升序 )</td>
</tr>
<tr>
<td>rsort()</td>
<td>排序（降序）</td>
</tr>
<tr>
<td>array_merge()</td>
<td>合并一个或多个数组</td>
</tr>
</tbody></table>
<h3 id="数组转JSON"><a href="#数组转JSON" class="headerlink" title="数组转JSON"></a>数组转JSON</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>json_encode( 数组 )</td>
<td>JSON 格式编码 （参数必须是utf-8编码，否则会得到空字符或者null）</td>
</tr>
<tr>
<td>json_decode( 字符串，参数 )</td>
<td>对 JSON 格式的字符串进行解码，参数：<br>true : 返回 数组<br>false : 返回 对象</td>
</tr>
</tbody></table>
<h1 id="第四章-运算符"><a href="#第四章-运算符" class="headerlink" title="第四章 运算符"></a>第四章 运算符</h1><table>
<thead>
<tr>
<th>类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></td>
</tr>
<tr>
<td>赋值运算符</td>
<td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>.=</code></td>
</tr>
<tr>
<td>比较运算符</td>
<td><code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code> <code>!=</code> <code>!==</code> <code>==</code> <code>===</code></td>
</tr>
<tr>
<td>逻辑运算符</td>
<td><code>&amp;&amp;</code> `</td>
</tr>
<tr>
<td>字符串运算符</td>
<td><code>.</code></td>
</tr>
<tr>
<td>其他运算符</td>
<td>三元运算符   <code>==？ ：</code></td>
</tr>
<tr>
<td>错误抑制符</td>
<td><code>@</code></td>
</tr>
<tr>
<td>提升优先级符号</td>
<td><code>( )</code></td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a=<span class="number">10</span>;</span><br><span class="line">$b=<span class="number">20</span>;</span><br><span class="line">$c=<span class="string">"hxsd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字与数字相加：数学运算	</span></span><br><span class="line"><span class="keyword">echo</span> $a+$b; <span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字与字符串相加</span></span><br><span class="line"><span class="keyword">echo</span> $a+<span class="string">'2018你好'</span>;<span class="comment">//2028  数字开头为2018</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"2018你好"</span>+$a;<span class="comment">//2028  同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a+<span class="string">'你好2018'</span>;<span class="comment">//10  以字母开头字符串，转换成0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"你好2018"</span>+$a;<span class="comment">//10  同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字与bool值</span></span><br><span class="line"><span class="keyword">echo</span> $a+<span class="keyword">true</span>;<span class="comment">//11  true:1   false：0</span></span><br></pre></td></tr></table></figure>

<h1 id="第五章-流程控制"><a href="#第五章-流程控制" class="headerlink" title="第五章 流程控制"></a>第五章 流程控制</h1><h2 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1. 分支结构"></a>1. 分支结构</h2><h3 id="单一分支结构"><a href="#单一分支结构" class="headerlink" title="单一分支结构"></a>单一分支结构</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断你是否长得帅</span></span><br><span class="line">$face = <span class="string">'帅'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始判断</span></span><br><span class="line"><span class="keyword">if</span>($face==<span class="string">'帅'</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'你真是帅呆了，酷毙了~~'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双向分支结构"><a href="#双向分支结构" class="headerlink" title="双向分支结构"></a>双向分支结构</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"no"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多向分支结构一"><a href="#多向分支结构一" class="headerlink" title="多向分支结构一"></a>多向分支结构一</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生成绩管理系统</span></span><br><span class="line">$score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断学生成绩在那个分数段</span></span><br><span class="line"><span class="keyword">if</span>($score&gt;=<span class="number">90</span> &amp;&amp; $score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"优+"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($score&gt;=<span class="number">80</span> &amp;&amp; $score&lt;=<span class="number">89</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"优"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($score&gt;=<span class="number">70</span> &amp;&amp; $score&lt;=<span class="number">79</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"良"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>($score&gt;=<span class="number">60</span> &amp;&amp; $score&lt;=<span class="number">69</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"中"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>($score&gt;=<span class="number">0</span> &amp;&amp; $score&lt;=<span class="number">59</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"差"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多向分支结构二"><a href="#多向分支结构二" class="headerlink" title="多向分支结构二"></a>多向分支结构二</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$action = <span class="string">'save'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分支</span></span><br><span class="line"><span class="keyword">switch</span>($action)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'save'</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"输入数据！"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'del'</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"删除数据！"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"请输入正确数据"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2. 循环结构"></a>2. 循环结构</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">While</span>(条件表达式)&#123;</span><br><span class="line">	<span class="comment">//若条件成立，则执行这里的循环体</span></span><br><span class="line">	<span class="comment">//改变初值的条件;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do……while循环"><a href="#do……while循环" class="headerlink" title="do……while循环"></a>do……while循环</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">	<span class="comment">//改变初值的条件;</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法格式</span></span><br><span class="line"><span class="keyword">for</span>(初值;范围;递增)&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-特殊的流程控制语句"><a href="#4-特殊的流程控制语句" class="headerlink" title="4. 特殊的流程控制语句"></a>4. 特殊的流程控制语句</h3><table>
<thead>
<tr>
<th>语句</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>在switch分支当中和循环当中使用，代表结束当前分支或循环</td>
</tr>
<tr>
<td>continue</td>
<td>在循环当中使用，代表跳过当前层循环，若指定数字，则跳过指定层循环</td>
</tr>
</tbody></table>
<h1 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h1><h2 id="1-函数的分类"><a href="#1-函数的分类" class="headerlink" title="1. 函数的分类"></a>1. 函数的分类</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><p>php提供了丰富的系统函数，可直接使用。这些函数涵盖了软件开发的大部分功能，具体的使用方法，请查看php开发手册。除了各种功能分类清晰的函数，还有一些常用的杂项函数：</p>
<table>
<thead>
<tr>
<th>杂项函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>define()</td>
<td>定义一个常量</td>
</tr>
<tr>
<td>defined()</td>
<td>判断常量是否存在</td>
</tr>
<tr>
<td>die()</td>
<td>输出一条消息，并退出当前脚本</td>
</tr>
<tr>
<td>eval()</td>
<td>把字符串按照 PHP 代码来运行</td>
</tr>
<tr>
<td>sleep()</td>
<td>延迟代码执行若干秒</td>
</tr>
</tbody></table>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>自定义函数命名口诀：字母数字下划线，首字母不能为数字，<code>不会区分大小写</code>，且不能使用关键字，<code>不能重复来定义</code></p>
<h2 id="2-函数的参数"><a href="#2-函数的参数" class="headerlink" title="2. 函数的参数"></a>2. 函数的参数</h2><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><ul>
<li>形式上的参数</li>
<li>在函数定义时声明</li>
</ul>
<h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><ul>
<li>实际上的参数，在函数使用时声明</li>
<li>实参和形参类型需一致</li>
<li>实参和形参数量要一一对应（定义的参数必须传值，除非有默认值）</li>
</ul>
<h3 id="形参的默认值"><a href="#形参的默认值" class="headerlink" title="形参的默认值"></a>形参的默认值</h3><ul>
<li>若某个形参的值总是固定的某一个值，可以使用默认值指定</li>
<li>具有默认值的形参，放到参数列表后面</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span><span class="params">($a,$b=<span class="number">20</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $a+$b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有默认值的参数可以省略</span></span><br><span class="line">fun3(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="查看实参函数"><a href="#查看实参函数" class="headerlink" title="查看实参函数"></a>查看实参函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>func_get_args()</td>
<td>返回一个包含函数参数列表的数组</td>
</tr>
<tr>
<td>func_get_arg(索引)</td>
<td>返回参数数组的某一个</td>
</tr>
<tr>
<td>func_num_args()</td>
<td>返回实参的个数</td>
</tr>
</tbody></table>
<h2 id="3-函数的返回值"><a href="#3-函数的返回值" class="headerlink" title="3. 函数的返回值"></a>3. 函数的返回值</h2><ul>
<li>函数当中若遇到return，则会将return后方的内容返回到函数调用处进行保存</li>
<li>return后面的语句将不再执行</li>
<li>若函数没有任何返回，则默认返回null类型</li>
</ul>
<h2 id="4-变量的作用域"><a href="#4-变量的作用域" class="headerlink" title="4. 变量的作用域"></a>4. 变量的作用域</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在函数内部定义，只作用于函数内部</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认情况下，函数参数通过值传递（因而即使在函数内部改变参数的值，它并不会改变函数外部的值）</span></span><br><span class="line">$a=<span class="number">1</span>;<span class="comment">//外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($arg)</span></span>&#123;</span><br><span class="line">	$arg+=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">test($a);<span class="comment">//只将外部变量的值传进去</span></span><br><span class="line">var_dump($a) ;<span class="comment">// 1  外部变量$a的值并没有改变</span></span><br></pre></td></tr></table></figure>

<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在函数外部定义，作用于当前整个脚本，在函数内部使用需要使用global关键字声明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a=<span class="number">10</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">global</span> $a; <span class="comment">//用global引入全局变量，在函数内部使用，子函数引入父函数变量，不能使用global</span></span><br><span class="line">	$a++;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">var_dump($a); <span class="comment">//结果：11</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：global只能用于引入全局变量，子函数引入父函数变量，不能使用global。</strong></p>
<h3 id="引用变量传参"><a href="#引用变量传参" class="headerlink" title="引用变量传参"></a>引用变量传参</h3><p>使用global命令，将全局变量引入到函数内部，但这种方式不够灵活，可以使用<strong>引用变量</strong>的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量时，用&amp;修饰参数</span></span><br><span class="line">$a=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">(&amp;$arg)</span></span>&#123;</span><br><span class="line">   $arg++;</span><br><span class="line">&#125;</span><br><span class="line">run($a); </span><br><span class="line">var_dump($a) <span class="comment">//结果：11</span></span><br></pre></td></tr></table></figure>

<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>在函数内部定义，<code>作用于函数内部</code>，使用static关键字声明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> $a=<span class="number">1</span>; <span class="comment">//静态变量</span></span><br><span class="line">	$a++;</span><br><span class="line">	<span class="keyword">echo</span> $a;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">//2</span></span><br><span class="line">test(); <span class="comment">//3</span></span><br><span class="line">test(); <span class="comment">//4</span></span><br><span class="line"><span class="comment">//echo $a; //报错  静态变量只作用于函数内部，外部无法读取</span></span><br></pre></td></tr></table></figure>

<h2 id="6-超全局变量"><a href="#6-超全局变量" class="headerlink" title="6. 超全局变量"></a>6. 超全局变量</h2><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><p>在全部作用域中始终可用的内置变量</p>
<table>
<thead>
<tr>
<th>超全局变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$_GET</td>
<td>通过 URL 参数传递 ( get请求 ) 给当前脚本的变量的数组</td>
</tr>
<tr>
<td>$_POST</td>
<td>通过 ‘post’ 方式给当前脚本的变量的数组</td>
</tr>
<tr>
<td>$_COOKIE</td>
<td>保存 Cookies信息的数组</td>
</tr>
<tr>
<td>$_SESSION</td>
<td>保存SESSION信息的数组</td>
</tr>
<tr>
<td>$_FILES</td>
<td>通过 HTTP POST 方式上传到当前脚本的项目的数组</td>
</tr>
<tr>
<td>$_ENV</td>
<td>包含服务器端环境变量（版本，目录，用户名等等）的数组</td>
</tr>
<tr>
<td>$_SERVER</td>
<td>服务器和执行环境信息</td>
</tr>
<tr>
<td>$_REQUEST</td>
<td>默认包含了 $_GET，$_POST 和 $_COOKIE 的数组</td>
</tr>
<tr>
<td>$GLOBALS</td>
<td>以上变量的集合</td>
</tr>
</tbody></table>
<h3 id="获取-application-json的post数据"><a href="#获取-application-json的post数据" class="headerlink" title="获取 application/json的post数据"></a>获取 application/json的post数据</h3><p><code>php://input</code> 是一个流，可以读取没有处理过的POST数据（即原始数据）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$p</span>ostjson = file_get_contents(<span class="string">"php://input"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="7-其他应用"><a href="#7-其他应用" class="headerlink" title="7. 其他应用"></a>7. 其他应用</h2><h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'web前端'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将函数的名称以字符串形式存储到指定变量</span></span><br><span class="line">$ceshi = <span class="string">'test'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时该变量可以作为函数来使用，使用规则和函数一致</span></span><br><span class="line">$ceshi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用于 回调函数--------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"play"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">($fn)</span></span>&#123;</span><br><span class="line">    $fn();</span><br><span class="line">&#125;;</span><br><span class="line">run(<span class="string">"play"</span>);<span class="comment">//将回调函数名作为字符串传入</span></span><br></pre></td></tr></table></figure>

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回文数递归(recursion)函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span><span class="params">($num)</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> $num;</span><br><span class="line">  <span class="comment">//判断</span></span><br><span class="line">  <span class="keyword">if</span>($num&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    recursion($num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> $num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">recursion(<span class="number">3</span>);  <span class="comment">//结果:3 2 1 1 2 3</span></span><br></pre></td></tr></table></figure>





<h1 id="第八章-正则表达式"><a href="#第八章-正则表达式" class="headerlink" title="第八章 正则表达式"></a>第八章 正则表达式</h1><blockquote>
<p>正则表达式（regular expression）描述了一种字符串匹配的模式，正则表达式的主要作用：</p>
<p>可以用来<code>检查</code>一个串是否含有某种子串</p>
<p>将匹配的子串做替换或者从某个串中<code>提取</code>符合某个条件的子串等</p>
</blockquote>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><ul>
<li>他是一个特殊的公式，由原子、元字符、模式修正符组成；它也是一个字符串！只不过是一个<strong>特殊的字符串</strong></li>
<li>主要实现对字符串的<strong>匹配、分割、查找、替换</strong>等操作</li>
</ul>
<h2 id="2-正则函数"><a href="#2-正则函数" class="headerlink" title="2. 正则函数"></a>2. 正则函数</h2><h3 id="用单引号定义正则"><a href="#用单引号定义正则" class="headerlink" title="用单引号定义正则"></a>用单引号定义正则</h3><p>php的正则是以文本方式声明，文本当中用”/ /“包裹正则内容，如果使用双引号，正则中的“$”会被解析为变量（要加\转义符），因此，用单引号定义正则更安全。</p>
<h3 id="PCRE规则与函数"><a href="#PCRE规则与函数" class="headerlink" title="PCRE规则与函数"></a>PCRE规则与函数</h3><p>PCRE（Perl Compatible Regular Expressions ）是一个Perl（一种功能丰富的计算机程序语言）兼容的正则表达式库，是以preg开头的一套函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>preg_match(正则 , 字符串 , 结果数组)</td>
<td>单一匹配  <br>结果数组: 第一个匹配到的结果<br>返回：匹配数量 （错误:false）</td>
</tr>
<tr>
<td>preg_match_all(正则 , 字符串 , 结果数组)</td>
<td>匹配所有 <br>结果数组: 全部匹配到的结果<br>返回：匹配数量（错误:false）</td>
</tr>
<tr>
<td>preg_replace(正则 , 替换 , 被替换字符串)</td>
<td>替换<br>返回：替换后字符串</td>
</tr>
<tr>
<td>preg_split( 正则 , 字符串)</td>
<td>用正则分割字符串<br>返回：数组</td>
</tr>
</tbody></table>
<h2 id="3-元字符"><a href="#3-元字符" class="headerlink" title="3. 元字符"></a>3. 元字符</h2><p>正则模式当中的元字符，通常都具有特殊的含义</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>a-z</td>
<td>英文小写字母</td>
</tr>
<tr>
<td>A-Z</td>
<td>英文大写字母</td>
</tr>
<tr>
<td>0-9</td>
<td>数字</td>
</tr>
<tr>
<td>\r    \n    \t</td>
<td>非打印字符</td>
</tr>
<tr>
<td>\d</td>
<td>数字，相当于0-9</td>
</tr>
<tr>
<td>\D</td>
<td>\d 取反</td>
</tr>
<tr>
<td>\w</td>
<td>字母 数字  下划线</td>
</tr>
<tr>
<td>\W</td>
<td>\w 取反</td>
</tr>
<tr>
<td>\s</td>
<td>空白字符</td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符</td>
</tr>
<tr>
<td>[ ]</td>
<td>任意匹配[ ]中单个字符</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意字符（换行符除外）</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>匹配至少n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>至少n次，最多m次</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个，相当于{0,}</td>
</tr>
<tr>
<td>+</td>
<td>匹配1个或多个，相当于{1,}</td>
</tr>
<tr>
<td>?</td>
<td>匹配0个或1个，相当于{0,1}</td>
</tr>
<tr>
<td>^</td>
<td>1、匹配正则开头      2、放在[^ ]，内容取反</td>
</tr>
<tr>
<td>$</td>
<td>匹配正则结尾</td>
</tr>
<tr>
<td>|</td>
<td>匹配 | 两侧任选其一</td>
</tr>
<tr>
<td>( )</td>
<td>1. 分组    2.子存储</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<p>正则需要转义字符： <code>(</code>  <code>)</code>  <code>{</code>  <code>}</code>  <code>?</code>  <code>*</code> <code>+</code>  <code>.</code>  <code>[</code>  <code>]</code>  <code>\</code>  <code>/</code>  <code>^</code>  <code>$</code>  <code>|</code></p>
<h2 id="4-模式修正符"><a href="#4-模式修正符" class="headerlink" title="4. 模式修正符"></a>4. 模式修正符</h2><p>对一套正则模式进行调整的符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>s</td>
<td>忽略换行符</td>
</tr>
<tr>
<td>U</td>
<td>反转匹配模式（贪婪/非贪婪）</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$reg=<span class="string">'/a(bc)&#123;1,3&#125;?/U'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="5-子模式与后向引用"><a href="#5-子模式与后向引用" class="headerlink" title="5. 子模式与后向引用"></a>5. 子模式与后向引用</h2><h3 id="子模式"><a href="#子模式" class="headerlink" title="子模式"></a>子模式</h3><p>子模式（子表达式 或 子匹配），在正则表达式中，可以使用 <code>(</code> 和 <code>)</code> 将模式中的子字符串括起来，以形成一个子模式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义正则模式</span></span><br><span class="line">$str = <span class="string">"110105198012186123"</span>; <span class="comment">//身份证号码</span></span><br><span class="line">$reg = <span class="string">'/\d&#123;6&#125;(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)/'</span>;</span><br><span class="line">$n=preg_match_all($reg,$str,$res);</span><br><span class="line">var_dump($n,$res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小括号()内的值，单独作为数组保存起来</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array (size=4)</span></span><br><span class="line"><span class="comment">  0 =&gt; </span></span><br><span class="line"><span class="comment">    array (size=1)</span></span><br><span class="line"><span class="comment">      0 =&gt; string '11010519800618' (length=14)</span></span><br><span class="line"><span class="comment">  1 =&gt; </span></span><br><span class="line"><span class="comment">    array (size=1)</span></span><br><span class="line"><span class="comment">      0 =&gt; string '1980' (length=4)</span></span><br><span class="line"><span class="comment">  2 =&gt; </span></span><br><span class="line"><span class="comment">    array (size=1)</span></span><br><span class="line"><span class="comment">      0 =&gt; string '12' (length=2)</span></span><br><span class="line"><span class="comment">  3 =&gt; </span></span><br><span class="line"><span class="comment">    array (size=1)</span></span><br><span class="line"><span class="comment">      0 =&gt; string '18' (length=2)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><p>正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。</p>
<ul>
<li>对一个正则表达式模式或部分模式两边添加圆括号()可以把这部分表达式存储到一个临时缓冲区中。</li>
<li>所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容按顺序存储。</li>
<li>存储子匹配的缓冲区编号从1开始，连续编号至最大99个子表达式。</li>
<li>每个缓冲区都可以使用’\n’(或用’$n’)访问，其中n为1至99的阿拉伯数字，用来按顺序标识特定缓冲区(子表达式)。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$str=<span class="string">"&lt;script&gt;alert('web前端')&lt;/script&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//$ 字符具有特定的含义。代表第 1 到第 99 个子表达式</span></span><br><span class="line">$str=preg_replace(<span class="string">'/&lt;script&gt;(.*?)&lt;\/script&gt;/'</span>, <span class="string">"$1"</span>, $str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：$str=alert('web前端')</span></span><br></pre></td></tr></table></figure>

<h1 id><a href="#" class="headerlink" title></a></h1><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="第九章-日期时间操作函数"><a href="#第九章-日期时间操作函数" class="headerlink" title="第九章 日期时间操作函数"></a>第九章 日期时间操作函数</h1><h2 id="1-时间戳（timestamp）"><a href="#1-时间戳（timestamp）" class="headerlink" title="1. 时间戳（timestamp）"></a>1. 时间戳（timestamp）</h2><p>在著名的unix系统中，使用了一种简洁高效的时间表示方法，即：<br>将1970年1月1日0时0分0秒作为“unix纪元”的原点，从1970年1月1日开始经过的秒数存储为一个32位整数，这个整数随着时间的变化不断增加，又被称为时间戳（timestamp）。</p>
<h2 id="2-常用函数"><a href="#2-常用函数" class="headerlink" title="2. 常用函数"></a>2. 常用函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>time()</td>
<td>返回时间戳（timestamp）</td>
</tr>
<tr>
<td>mktime(时 , 分 , 秒 , 月 , 日 , 年)</td>
<td>创建一个指定时间戳</td>
</tr>
<tr>
<td>date( 格式 , [时间戳] )</td>
<td>格式化时间戳函数( 无时间戳参数,返回当前时间 )</td>
</tr>
<tr>
<td>date_default_timezone_get()</td>
<td>获取默认时区</td>
</tr>
<tr>
<td>date_default_timezone_set()</td>
<td>设置时区  中国时区：“PRC”           英国（格林尼治）：“UTC”</td>
</tr>
<tr>
<td>strtotime(‘yesterday’)</td>
<td>将任何英文文本的日期时间描述解析为 Unix 时间戳</td>
</tr>
<tr>
<td>checkdate(月 , 日 , 年)</td>
<td>验证日期是否合法,  例:  checkdate(2,31,2018)        结果:  false</td>
</tr>
</tbody></table>
<h2 id="3-date-主要参数"><a href="#3-date-主要参数" class="headerlink" title="3. date()主要参数"></a>3. date()主要参数</h2><ul>
<li>年</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>Y</td>
<td>年 4位数字</td>
<td>1999 或 2003</td>
</tr>
<tr>
<td>y</td>
<td>年 2位数字</td>
<td>99 或 03</td>
</tr>
<tr>
<td>L</td>
<td>是否为闰年</td>
<td>闰年: 1，否则: 0</td>
</tr>
</tbody></table>
<ul>
<li>月</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>n</td>
<td>月  数字表示（无前导零）</td>
<td>1 到 12</td>
</tr>
<tr>
<td>m</td>
<td>月  数字表示（有前导零）</td>
<td>01 到 12</td>
</tr>
<tr>
<td>M</td>
<td>月  三个字母缩写</td>
<td>Jan 到 Dec</td>
</tr>
<tr>
<td>F</td>
<td>月  完整的文本格式</td>
<td>January 到 December</td>
</tr>
<tr>
<td>t</td>
<td>月总天数</td>
<td>28 到 31</td>
</tr>
</tbody></table>
<ul>
<li>日</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>日 （有前导零）</td>
<td>01 到 31</td>
</tr>
<tr>
<td>j</td>
<td>日 （无前导零）</td>
<td>1 到 31</td>
</tr>
<tr>
<td>z</td>
<td>一年中的第几天</td>
<td>0 到 365</td>
</tr>
</tbody></table>
<ul>
<li>星期</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>l (小写L)</td>
<td>星期  完整文本格式</td>
<td>Sunday 到 Saturday</td>
</tr>
<tr>
<td>D</td>
<td>星期  3 个字母文本</td>
<td>Mon 到 Sun</td>
</tr>
<tr>
<td>w</td>
<td>星期  数字表示</td>
<td>0（星期天）到 6（星期六）</td>
</tr>
<tr>
<td>W</td>
<td>一年中的第几周</td>
<td>42（当年的第 42 周）</td>
</tr>
</tbody></table>
<ul>
<li>时间</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>小写的上午和下午值</td>
<td>am 或 pm</td>
</tr>
<tr>
<td>A</td>
<td>大写的上午和下午值</td>
<td>AM 或 PM</td>
</tr>
<tr>
<td>g</td>
<td>小时，12小时格式，无前导零</td>
<td>1 到 12</td>
</tr>
<tr>
<td>h</td>
<td>小时，12小时格式，有前导零</td>
<td>01 到 12</td>
</tr>
<tr>
<td>G</td>
<td>小时，24小时格式，无前导零</td>
<td>0 到 23</td>
</tr>
<tr>
<td>H</td>
<td>小时，24小时格式，有前导零</td>
<td>00 到 23</td>
</tr>
<tr>
<td>i</td>
<td>分（有前导零）</td>
<td>00 到 59</td>
</tr>
<tr>
<td>s</td>
<td>秒（有前导零）</td>
<td>00 到 59</td>
</tr>
</tbody></table>
<ul>
<li>完整的日期时间</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>返回值例子</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>ISO 8601格式的日期</td>
<td>2004-02-12T15:19:21+00:00</td>
</tr>
<tr>
<td>r</td>
<td>RFC 822  格式的日期</td>
<td>Thu, 21 Dec 2000 16:01:07 +0200</td>
</tr>
</tbody></table>
<h1 id="第七章-错误日志处理"><a href="#第七章-错误日志处理" class="headerlink" title="第七章 错误日志处理"></a>第七章 错误日志处理</h1><h2 id="1-3种错误类型"><a href="#1-3种错误类型" class="headerlink" title="1. 3种错误类型"></a>1. 3种错误类型</h2><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>语法错误最常见，并且最容易修复。这类错误会阻止脚本执行。通常发生在程序开发时，可以通过错误报告进行修复，再重新运行。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$name=<span class="string">"hxsd"</span>  <span class="comment">//NOTICE错误,结尾没有分号";"</span></span><br><span class="line">$age=<span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<h3 id="运行时错误"><a href="#运行时错误" class="headerlink" title="运行时错误"></a>运行时错误</h3><p>只有程序运行到某行，或在某些特定的情形下运行才会发生错误。这种错误一般不会阻止PHP脚本的运行，但是会阻止脚本做希望它所做的任何事情。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">"abc.php"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑错误"><a href="#逻辑错误" class="headerlink" title="逻辑错误"></a>逻辑错误</h3><p>这种错误实际上是最麻烦的，不但不会阻止PHP脚本的执行，也不会显示出错误消息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在if语句中判断两个变量的值是否相等</span></span><br><span class="line">$a=<span class="number">10</span>;</span><br><span class="line">$b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>($a=$b)&#123;  <span class="comment">//如果错把比较运行符号“＝＝”写成赋值运行符号“＝”就是一种逻辑错误，很难会被发现</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-3种错误级别"><a href="#2-3种错误级别" class="headerlink" title="2. 3种错误级别"></a>2. 3种错误级别</h2><table>
<thead>
<tr>
<th>错误类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>E_NOTICE</td>
<td>注意： 这些都是比较小而且不严重的错误，比如去访问一个未被定义的变量。通常，这类的错误是不提示给用户的，但有时这些错误会影响到运行的结果。</td>
</tr>
<tr>
<td>E_WARNING</td>
<td>警告： 这就是稍微严重一些的错误了，比如想要包含include一个不存在的文件。这样的错误信息会提示给用户，但不会导致程序终止运行。</td>
</tr>
<tr>
<td>Fatal error</td>
<td>致命错误： 这些就是严重的错误，比如你想要初始化一个根本不存在的类的对象，或调用一个不存在的函数，这些错误会导致程序停止运行，PHP也会把这些错误展现给用户。</td>
</tr>
</tbody></table>
<h2 id="3-屏蔽PHP错误提示"><a href="#3-屏蔽PHP错误提示" class="headerlink" title="3. 屏蔽PHP错误提示"></a>3. 屏蔽PHP错误提示</h2><h3 id="在配置文件"><a href="#在配置文件" class="headerlink" title="在配置文件"></a>在配置文件</h3><p>修改php.ini配置文件</p>
<table>
<thead>
<tr>
<th>设置项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>error_reporting = E_ALL  &amp; ~E_NOTICE</td>
<td>显示所有的错误和提示 忽略notice错误</td>
</tr>
<tr>
<td>display_errors = Off</td>
<td>Off : 关闭错误提示    On：显示错误提示</td>
</tr>
</tbody></table>
<h3 id="在当前脚本"><a href="#在当前脚本" class="headerlink" title="在当前脚本"></a>在当前脚本</h3><h4 id="error-reporting函数"><a href="#error-reporting函数" class="headerlink" title="error_reporting函数"></a>error_reporting函数</h4><p>在php脚本顶部，error_reporting(常量)，见附录：php报错级别</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(E_NOTICE); <span class="comment">//只显示NOTICE错误</span></span><br><span class="line">error_reporting(E_WARNING); <span class="comment">//只显示WARNING错误</span></span><br></pre></td></tr></table></figure>

<h4 id="错误抑制符"><a href="#错误抑制符" class="headerlink" title="@错误抑制符"></a>@错误抑制符</h4><p>@ 可以屏蔽函数执行过程中遇到问题而产生的一些错误、警告信息（不显示出错信息）。 这样除了用户界面友好一些外，更重要的是安全性，因为屏蔽了出错文件的路径等信息。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值一个不存在的变量，会报NOTICE错误</span></span><br><span class="line">@$a=$b; </span><br><span class="line"></span><br><span class="line"><span class="comment">//在有可能出错的函数前加@, 然后or die("")</span></span><br><span class="line">@mysqli_connect(...) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接错误"</span>)；</span><br></pre></td></tr></table></figure>

<h2 id="4-错误日志"><a href="#4-错误日志" class="headerlink" title="4. 错误日志"></a>4. 错误日志</h2><p>保存位置：wamp64 /logs/php_error.log</p>
<p>php.ini配置文件</p>
<table>
<thead>
<tr>
<th>设置项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>log_errors=On</td>
<td>开启错误日志记录</td>
</tr>
<tr>
<td>error_log=’D:/wamp64/logs/php_error.log’</td>
<td>指定错误日志存储位置</td>
</tr>
</tbody></table>
<h1 id="第十章-文件处理系统"><a href="#第十章-文件处理系统" class="headerlink" title="第十章 文件处理系统"></a>第十章 文件处理系统</h1><h2 id="1-文件类型与路径"><a href="#1-文件类型与路径" class="headerlink" title="1. 文件类型与路径"></a>1. 文件类型与路径</h2><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul>
<li>定义：一般指存储在外部介质上具有名字（文件名）的一组相关数据集合</li>
<li>windows操作系统中常见文件类型：文件、目录、未知文件</li>
</ul>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table>
<thead>
<tr>
<th>路径</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>绝对路径：硬盘根目录</td>
</tr>
<tr>
<td>./</td>
<td>相对路径：当前目录</td>
</tr>
<tr>
<td>../</td>
<td>相对路径：上级目录</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件路径相关函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>basename()</td>
<td>获取路径中的文件名部分</td>
</tr>
<tr>
<td>dirname()</td>
<td>获取路径中的目录部分</td>
</tr>
<tr>
<td>pathinfo($path，参数)</td>
<td>获取路径中的大部分信息，返回数组，参数：<br>PATHINFO_DIRNAME    PATHINFO_BASENAME  <br>PATHINFO_EXTENSION   PATHINFO_FILENAME</td>
</tr>
</tbody></table>
<h2 id="2-目录操作"><a href="#2-目录操作" class="headerlink" title="2. 目录操作"></a>2. 目录操作</h2><h3 id="目录操作函数"><a href="#目录操作函数" class="headerlink" title="目录操作函数"></a>目录操作函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mkdir(完整路径目录)</td>
<td>创建一个目录</td>
</tr>
<tr>
<td>rmdir(完整路径目录)</td>
<td>删除一个目录</td>
</tr>
<tr>
<td>opendir(完整路径目录)</td>
<td>打开目录</td>
</tr>
<tr>
<td>readdir(资源)</td>
<td>读取目录</td>
</tr>
<tr>
<td>closedir(资源)</td>
<td>关闭目录,释放内存</td>
</tr>
<tr>
<td>is_dir(完整路径目录)</td>
<td>判断是否为一个有效目录</td>
</tr>
<tr>
<td>scandir(完整路径目录)</td>
<td>扫描目录，返回文件数组<br> 特例：  count（数组）==2   是空目录</td>
</tr>
</tbody></table>
<h3 id="遍历目录"><a href="#遍历目录" class="headerlink" title="遍历目录"></a>遍历目录</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义目录</span></span><br><span class="line">$path = <span class="string">"目录"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开目录</span></span><br><span class="line">$res = opendir($path);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取目录中的文件（每次调用，读取一个）</span></span><br><span class="line">$file = readdir($res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭目录</span></span><br><span class="line">closedir($res);</span><br></pre></td></tr></table></figure>

<h2 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3. 文件操作"></a>3. 文件操作</h2><h3 id="文件属性函数"><a href="#文件属性函数" class="headerlink" title="文件属性函数"></a>文件属性函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>filesize(完整路径文件名)</td>
<td>取得一个文件的大小(字节)</td>
</tr>
<tr>
<td>filectime(完整路径文件名)</td>
<td>获取文件的创建时间(create)</td>
</tr>
<tr>
<td>filemtime(完整路径文件名)</td>
<td>获取文件的修改时间(modify)</td>
</tr>
<tr>
<td>fileatime(完整路径文件名)</td>
<td>获取文件的访问时间(access)</td>
</tr>
</tbody></table>
<h3 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>fopen(完整路径文件名 , 参数)</td>
<td>打开文件(参数：r只读   w写入    x创建写入)</td>
</tr>
<tr>
<td>fread(资源 , 长度)</td>
<td>读取文件 长度：字节</td>
</tr>
<tr>
<td>fwrite(资源 , 内容)</td>
<td>写入的内容</td>
</tr>
<tr>
<td>fclose(资源)</td>
<td>关闭文件(资源)，释放内存</td>
</tr>
<tr>
<td>file_get_contents(完整路径文件名)</td>
<td>将整个文件读入一个字符串<br>相当于 fopen fread fclose组合动作</td>
</tr>
<tr>
<td>file_put_contents(完整路径文件名，要写入的数据，[FILE_APPEND])</td>
<td>将字符串写入文件<br>相当于 fopen fwrite fclose组合动作FILE_APPEND：追加写入</td>
</tr>
<tr>
<td>readfile()</td>
<td>将内容读入内存缓冲区</td>
</tr>
<tr>
<td>copy(源文件 , 目标文件)</td>
<td>拷贝文件(如果目标文件已存在，将会被覆盖)</td>
</tr>
<tr>
<td>unlink(完整路径文件名)</td>
<td>删除文件</td>
</tr>
</tbody></table>
<h3 id="中文名称"><a href="#中文名称" class="headerlink" title="中文名称"></a>中文名称</h3><p>window中文版操作系统的编码是GBK，所以，需要将文件名进行转码才能在正常显示，使用 <code>iconv()</code> 函数，进行字符串编码转换：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$path=<span class="string">"./中文目录/经典案例"</span>;</span><br><span class="line">	</span><br><span class="line">$path=rtrim($path,<span class="string">"/"</span>).<span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//utf-8 → gbk</span></span><br><span class="line">$path=iconv(<span class="string">"UTF-8"</span>,<span class="string">"GBK"</span>,$path);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开目录	</span></span><br><span class="line">$res=opendir($path);<span class="comment">//现在是GBK编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="keyword">while</span>($file=readdir($res))&#123;</span><br><span class="line">    <span class="comment">//中文windows是gbk编码,需要转为utf-8,才能显示正常</span></span><br><span class="line">    $file=iconv(<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>,$file);</span><br><span class="line">    var_dump($file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存中文名的文件</span></span><br><span class="line">file_put_contents($path.iconv(<span class="string">"utf-8"</span>, <span class="string">"GBk"</span>,<span class="string">"中文名字.txt"</span>), <span class="string">"文件内容"</span>);</span><br></pre></td></tr></table></figure>


<h3 id="文件判断用函数"><a href="#文件判断用函数" class="headerlink" title="文件判断用函数"></a>文件判断用函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>is_file(完整路径文件名)</td>
<td>判断是否为一个有效文件</td>
</tr>
<tr>
<td>is_readable(完整路径文件名)</td>
<td>判断是否可读</td>
</tr>
<tr>
<td>is_writable(完整路径文件名)</td>
<td>判断是否可写</td>
</tr>
<tr>
<td>is_executable(完整路径文件名)</td>
<td>判断是否可执行</td>
</tr>
<tr>
<td>file_exists(完整路径文件名)</td>
<td>判断一个<strong>文件</strong>或<strong>目录</strong>是否存在</td>
</tr>
</tbody></table>
<h3 id="文件-目录重命名"><a href="#文件-目录重命名" class="headerlink" title="文件/目录重命名"></a>文件/目录重命名</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>rename(源 , 目标)</td>
<td>相同文件夹为 <code>改名</code>，不同文件夹为 <code>移动</code><br>移动 <code>文件</code>，如果目标文件已存在，将会被覆盖<br>移动 <code>目录</code>，如果目标目录已存在，将会报错，返回false</td>
</tr>
</tbody></table>
<h1 id="第十一章-文件上传和下载"><a href="#第十一章-文件上传和下载" class="headerlink" title="第十一章 文件上传和下载"></a>第十一章 文件上传和下载</h1><h2 id="1-上传设置"><a href="#1-上传设置" class="headerlink" title="1. 上传设置"></a>1. 上传设置</h2><h3 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h3><p>form的method=post<br>form的enctype=”multipart/form-data”<br>input的type=file</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span> = <span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MAX_FILE_SIZE有兼容问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"MAX_FILE_SIZE"</span> <span class="attr">value</span>=<span class="string">"30000"</span> /&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h3><p>在php.ini中进行设置：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>file_uploads = On</td>
<td>是否允许上传文件</td>
</tr>
<tr>
<td>upload_tmp_dir =”G:/wamp/tmp”</td>
<td>临时存储上传文件的目录</td>
</tr>
<tr>
<td>upload_max_filesize = 2M</td>
<td>上传单个文件的大小</td>
</tr>
<tr>
<td>max_file_uploads = 20</td>
<td>单次上传文件的最大数量</td>
</tr>
<tr>
<td>post_max_size = 8M</td>
<td>表单post方式上传文件（总和）大小</td>
</tr>
<tr>
<td>max_execution_time = 120</td>
<td>表单上传的超时的时间设置(默认120秒)</td>
</tr>
</tbody></table>
<p>默认upload_max_filesize = 2M，如果你想上传超过8M的文件，比如：20M，你在设定upload_max_filesize =<br>20M的同时，还要修改post_max_size选项（默认为8M）。否则post数据超出限制，$_FILES将会为空（报错）。</p>
<h3 id="FILES数组"><a href="#FILES数组" class="headerlink" title="$_FILES数组"></a>$_FILES数组</h3><p>$_FILES超全局数组中，包含着从客户端提交文件的全部信息：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">  <span class="string">'fname'</span> =&gt;     <span class="comment">//上传文件表单项的name</span></span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">5</span>)</span><br><span class="line">      <span class="string">'name'</span> =&gt; string <span class="string">'home.html'</span> (length=<span class="number">21</span>)   <span class="comment">//上传文件的名称</span></span><br><span class="line">      <span class="string">'type'</span> =&gt; string <span class="string">'text/html'</span> (length=<span class="number">9</span>)    <span class="comment">//文件类型(常见文件都可以上传)</span></span><br><span class="line">      <span class="string">'tmp_name'</span> =&gt; string <span class="string">'C:\wamp\tmp\php57A2.tmp'</span> (length=<span class="number">23</span>)    <span class="comment">//上传文件的临时文件名</span></span><br><span class="line">      <span class="string">'error'</span> =&gt; int <span class="number">0</span>    <span class="comment">//上传文件遇到的错误号</span></span><br><span class="line">      <span class="string">'size'</span> =&gt; int <span class="number">28131</span>    <span class="comment">//上传文件的大小</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>error编号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>上传过程中没有发生任何错误</td>
</tr>
<tr>
<td>1</td>
<td>上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值</td>
</tr>
<tr>
<td>2</td>
<td>超出了HTML表单隐藏域属性的MAX＿FILE＿SIZE元素所指定的最大值（浏览器兼容）</td>
</tr>
<tr>
<td>3</td>
<td>文件只有部分上传</td>
</tr>
<tr>
<td>4</td>
<td>没有上传任何文件</td>
</tr>
<tr>
<td>5</td>
<td>上传文件大小为0(已废弃)</td>
</tr>
<tr>
<td>6</td>
<td>找不到临时文件夹</td>
</tr>
<tr>
<td>7</td>
<td>文件写入失败</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件上传函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>move_uploaded_file(临时文件名 , 新文件名)</td>
<td>将临时文件保存为正式文件</td>
</tr>
</tbody></table>
<h3 id="上传步骤"><a href="#上传步骤" class="headerlink" title="上传步骤"></a>上传步骤</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump($_FILES);</span><br><span class="line">	</span><br><span class="line">$file=$_FILES[<span class="string">"fname"</span>];</span><br><span class="line">	</span><br><span class="line"><span class="comment">//获取$_FILES文件  临时文件</span></span><br><span class="line">$tmp_file=$file[<span class="string">"tmp_name"</span>];</span><br><span class="line">	</span><br><span class="line"><span class="comment">//获取后缀名</span></span><br><span class="line">$ext=pathinfo($file[<span class="string">"name"</span>],PATHINFO_EXTENSION);<span class="comment">//后缀名</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//创建新文件名</span></span><br><span class="line">$new_file=<span class="string">"file"</span>.rand(<span class="number">1</span>,<span class="number">1000000</span>).<span class="string">"."</span>.$ext;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存路径</span></span><br><span class="line">$path=<span class="string">"./files"</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//格式化路径</span></span><br><span class="line">$path=rtrim($path,<span class="string">'/'</span>).<span class="string">"/"</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//拼接上传目录</span></span><br><span class="line">$new_file=$path.$new_file;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//临时文件转换成正式文件</span></span><br><span class="line">move_uploaded_file($tmp_file,$new_file);</span><br></pre></td></tr></table></figure>



<h2 id="2-下载设置"><a href="#2-下载设置" class="headerlink" title="2. 下载设置"></a>2. 下载设置</h2><p>浏览器对于可识别的文件格式(html、txt、png、jpg等)，默认是直接打开的，对于无法识别的文件，才作为附件来下载。为了可以让可识别的文件也直接可以下载，需要进行如下设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"点击下载"</span> <span class="attr">href</span>=<span class="string">"down.php?name=01.jpg&amp;type=image/jpeg"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"01.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 读取文件</span></span><br><span class="line">$fliename=$_GET[<span class="string">"name"</span>];</span><br><span class="line">$filetype=$_GET[<span class="string">"type"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 文件的描述信息 Content-Disposition（内容配置）指定为attachment(附件)(必须)</span></span><br><span class="line">header(<span class="string">"Content-Disposition:attachment;filename=&#123;$filename&#125;"</span>);</span><br><span class="line">	</span><br><span class="line"><span class="comment">//3. 指定被下载文件的类型(非必须)</span></span><br><span class="line">header(<span class="string">"Content-Type:&#123;$filetype&#125;"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 指定被下载文件大小（非必须）</span></span><br><span class="line">header(<span class="string">"Content-Length:"</span>.filesize($filename));  </span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 将内容读入内存缓冲区</span></span><br><span class="line">readfile($filename);</span><br></pre></td></tr></table></figure>

<p><strong>注意：在 <code>readfile($filename)</code> 之前，不能有任何输出语句（错误信息、var_dump调试语句，echo输出等）,否则下载的文件会出错。</strong></p>
<h1 id="第十二章-PHP图形图像处理—GD库"><a href="#第十二章-PHP图形图像处理—GD库" class="headerlink" title="第十二章 PHP图形图像处理—GD库"></a>第十二章 PHP图形图像处理—GD库</h1><blockquote>
<p>PHP中的绘图工具</p>
<p>作用：绘制饼图、柱形图、折线图、验证码、水印、缩放等</p>
<p>支持：GIF、JPEG、PNG、WBMP等格式</p>
</blockquote>
<h2 id="1-绘画步骤"><a href="#1-绘画步骤" class="headerlink" title="1. 绘画步骤"></a>1. 绘画步骤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="comment">//1.创建画布</span></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.准备颜料</span></span><br><span class="line">$bg = imagecolorallocate($img,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">$red = imagecolorallocate($img,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">$blue = imagecolorallocate($img,<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.绘画...</span></span><br><span class="line">imagefill($img,<span class="number">0</span>,<span class="number">0</span>,$bg);	 <span class="comment">//填充背景</span></span><br><span class="line">imageellipse($img, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>, $red); <span class="comment">//画空心圆</span></span><br><span class="line">imagesetpixel($img, <span class="number">100</span>, <span class="number">100</span>，$blue);<span class="comment">//绘制像素点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绘画其他..............</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.输出图像</span></span><br><span class="line">header(<span class="string">'Content-Type:image/jpeg'</span>);	<span class="comment">//设置http协议头信息</span></span><br><span class="line">imagejpeg($img);	<span class="comment">//输出图像流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.释放资源</span></span><br><span class="line">imagedestroy($img);</span><br></pre></td></tr></table></figure>



<h2 id="2-常用函数-1"><a href="#2-常用函数-1" class="headerlink" title="2. 常用函数"></a>2. 常用函数</h2><p>GD库图片函数的参数很多，具体使用方法<strong>参照php手册</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>imagecreate(宽,高)</td>
<td>创建一个256色画布</td>
</tr>
<tr>
<td>imagecreatetruecolor(宽,高)</td>
<td>创建一个真彩画布</td>
</tr>
<tr>
<td>imagecreatefromgif(完整路径文件名)</td>
<td>将一张gif图像放入画布</td>
</tr>
<tr>
<td>imagecreatefrompng(完整路径文件名)</td>
<td>将一张png图像放入画布</td>
</tr>
<tr>
<td>imagecreatefromjpeg(完整路径文件名)</td>
<td>将一张jpeg图像放入画布</td>
</tr>
<tr>
<td>imagecreatefromstring(字符串)</td>
<td>从字符串中的图像流新建一图像</td>
</tr>
<tr>
<td>imagecolorallocate()</td>
<td>定义颜色</td>
</tr>
<tr>
<td>imagecolorallocatealpha()</td>
<td>定义带alpha通道（透明）的颜色</td>
</tr>
<tr>
<td>imagefill()</td>
<td>填充背景</td>
</tr>
<tr>
<td>imagesetpixel()</td>
<td>绘制像素点</td>
</tr>
<tr>
<td>imageline()</td>
<td>绘制线条</td>
</tr>
<tr>
<td>imagerectangle()、imagefilledrectangle()</td>
<td>矩形线框、实心矩形框</td>
</tr>
<tr>
<td>imagepolygon()、imagefilledpolygon()</td>
<td>多边形线框、实心多边形</td>
</tr>
<tr>
<td>imageellipse()、imagefilledellipse()</td>
<td>椭圆线框、实心椭圆</td>
</tr>
<tr>
<td>imagearc()、imagefilledarc()</td>
<td>圆弧、实心圆弧（扇形）</td>
</tr>
<tr>
<td>imagettftext()</td>
<td>绘制文本需引入字库(支持中文字库，输出中文)</td>
</tr>
<tr>
<td>getimagesize(完整路径文件名)</td>
<td>获取图像的宽、高、大小、类型等相关信息<br>成功返回：数组   失败返回：false</td>
</tr>
<tr>
<td>imagesx(资源)</td>
<td>取得图像宽度</td>
</tr>
<tr>
<td>imagesy(资源)</td>
<td>取得图像高度</td>
</tr>
<tr>
<td>imagecopy()</td>
<td>用于拷贝图像或图像的一部分  <br>成功返回：true ，失败返回：false</td>
</tr>
<tr>
<td>imagecopyresampled()</td>
<td>用于拷贝部分图像并调整大小（重新采样）</td>
</tr>
<tr>
<td>imagegif()</td>
<td>输出gif格式图像</td>
</tr>
<tr>
<td>imagejpeg()</td>
<td>输出jpeg格式图像</td>
</tr>
<tr>
<td>imagepng()</td>
<td>输出png格式图像</td>
</tr>
<tr>
<td>imagedestroy()</td>
<td>释放资源</td>
</tr>
</tbody></table>
<p><strong>imagecopyresample（$dst_image , $src_image , $dx , $dy , $sx , $sy , $dw , $dh , $sw , $sh）</strong></p>
<p><img src="images/imagecopyresample.png" alt="imagecopyresample参数"></p>
<h2 id="3-绘制基本几何图形"><a href="#3-绘制基本几何图形" class="headerlink" title="3. 绘制基本几何图形"></a>3. 绘制基本几何图形</h2><p>最基本的集合图形主要有点、线、圆、多边形等，有了基本几何图形，就可以演变出更为复杂的图形。GD库也提供了三个绘制基本图形的函数，<br>imageline()函数、imagearc()函数、imagerectangle()函数分别用来绘制线段，弧形（包括圆弧），矩形。</p>
<ul>
<li><p>imageline()函数用来绘制线段</p>
<p>bool imageline(resource image, int x1, int y1, int x2, int y2, int color)</p>
<p>该函数参数表示使用color颜色在图像image上从坐标(x1,y1)到(x2,y2)画一条线段。在画布里，坐标原点为左上角，横坐标水平向右为正，纵坐标垂直向下为正。</p>
</li>
<li><p>imagearc()函数用于绘制椭圆弧（包括圆弧）</p>
<p>bool imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int color)</p>
<p>该函数参数表示用color颜色在图像image上以(cx,cy)为中心，画一个椭圆弧，w和h分别是这个椭圆的宽和高，s和e都是角度，分别表示圆弧起点角度和圆弧终点角度，0度位置在中心的三点钟位置（x轴正轴方向）。</p>
</li>
<li><p>imagerectangle()函数用来绘制一个矩形</p>
<p>bool imagerectangel(resource image, int x1, int y1, int x2, int y2, int color)</p>
<p>该函数参数表示用color颜色在图像image上画一个矩形，左上角坐标为(x1,y1)，右下角坐标(x2,y2)。</p>
</li>
</ul>
<h2 id="4-图像填充"><a href="#4-图像填充" class="headerlink" title="4. 图像填充"></a>4. 图像填充</h2><ul>
<li><p>imagefill()函数用于图像区域填充</p>
<p>bool imagefill(resource image, int x, int y, int color)</p>
<p>该函数表示用color在image图像的坐标(x,y)位置执行区域填充，与(x,y)点颜色相同且相邻的点都会被填充。</p>
</li>
<li><p>imagefilledarc()函数用于画一椭圆弧并填充</p>
<p>bool imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int color, int style)</p>
<p>它的参数说明同imagearc()函数，与之相比，多了参数style，它用来表示填充的方式，可选择有如下几种：</p>
<p>IMG_ARC_PIE：普通填充，产生圆形边界</p>
<p>IMG_ARC_CHORD：只是用直线连接了起始和结束点与IMG_ARC_PIE互斥</p>
<p> IMG_ARC_NOFILL：指明弧或弦只有轮廓，不填充</p>
<p>IMG_ARC_EDGE：指明用直线将起始和结束点与中心点相连</p>
</li>
<li><p>imagefilledellipse()函数用于画一个椭圆并填充</p>
<p>bool imagefilledellipse(resource image, int cx, int cy, int width, int height, int color)</p>
<p>该函数表示用color颜色在image图像上画一个填充的椭圆形，这个椭圆形的中心点在(cx,xy)，宽为windth，高为height。</p>
</li>
<li><p>imagefilledrectangle()函数用于画一个矩形并填充</p>
<p>bool imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color)</p>
</li>
</ul>
<p>参数意义和imagerectangle()函数一致，与之不同的是imagefilledrectangle()函数会填充颜色。</p>
<ul>
<li><p>imagefilledpolygon()函数用来画一个多边形并填充</p>
<p>bool imagefilledpolygon(resource image, array points, int num_points, int color该函数表示用color颜色在image图像上画一个填充的多边形，多边形的顶点按照顺序存储在points数组中，num_points表示多变形的边数，num_points的数值必须大于等于3，且小于等于points数组的值个数的一半。</p>
</li>
</ul>
<h2 id="5-在图像中添加文字"><a href="#5-在图像中添加文字" class="headerlink" title="5. 在图像中添加文字"></a>5. 在图像中添加文字</h2><p>前面在加载图像章节在加载失败则以图像方式输出错误信息的时候已经见过这个函数：imagestring()。imagestring()的主要功能就是在图像中添加函数，它的语法格式如下：</p>
<p>bool imagestring(resource image, int font, int x, int y, string string, int color)</p>
<p>该函数表示用color颜色在image图像上的(x,y)位置，使用font字体绘制字符串string。绘制字符串的时候，是从(x,y)右下方开始绘制。通常情况下font使用1，2，3，4，5等内置字体。</p>
<h2 id="6-拷贝图像"><a href="#6-拷贝图像" class="headerlink" title="6. 拷贝图像"></a>6. 拷贝图像</h2><ul>
<li><p>getimagesize()函数用于获取图像的尺寸：</p>
<p>array getimagesize(string filename)</p>
</li>
<li><p>imagecopy()函数用于拷贝图像或图像的一部分：</p>
<p>bool imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)</p>
</li>
<li><p>imagecopyresized()函数用于拷贝图像或图像的一部分并调整大小，它的语法结构如下：</p>
<p>bool imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)</p>
</li>
<li><p>imagecopymerge()用于拷贝并合并成图像的一部分：</p>
<p>bool imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)</p>
</li>
</ul>
<h1 id="第十三章-PHP与WEB页面交互"><a href="#第十三章-PHP与WEB页面交互" class="headerlink" title="第十三章 PHP与WEB页面交互"></a>第十三章 PHP与WEB页面交互</h1><h2 id="1-PHP与Web页面交互"><a href="#1-PHP与Web页面交互" class="headerlink" title="1. PHP与Web页面交互"></a>1. PHP与Web页面交互</h2><p>PHP与Web页面交互是实现PHP网站与用户交互的重要手段。</p>
<p>在PHP中提供了两种与Web页面交互的方法，一种是通过Web表单提交数据，另一种是直接通过URL参数传递数据。</p>
<p>Web表单提交数据有两种方式：GET方法和POST方法。</p>
<p>POST方法不依赖于URL，不会将传递的参数值显示在地址栏中，而是将参数值放置在是HTTP包的包体中，这样可以传输更多的内容，传输方法也更加安全，所以POST方法通常用于上传信息。</p>
<p>GET方法完全依赖于URL，参数值会附在URL之后，以?分割URL和传输数据，多个参数用&amp;连接，这样传输安全性很低，而且受到URL长度的限制，传输内容很小，所以GET方法通常用于获取信息。</p>
<p>Web表单用get方法提交数据，最终效果如同直接通过URL参数传递数据。</p>
<p>PHP针对这两种请求方法，提供了两个全局变量$_POST[ ]和$_GET[ ]，分别用来获取</p>
<p>POST请求和GET请求的参数值。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="$_GET[ ]"></a>$_GET[ ]</h3><p>建立一个get请求的表单页面名叫form_get.html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>GET方式的表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_get.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">            账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form>元素设置的aciton是打开同目录下的form_get.php文件，文件内容为：



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">var_dump ( $_GET );</span><br><span class="line">$username = $_GET [&quot;username&quot;];</span><br><span class="line">$password = $_GET [&quot;password&quot;];</span><br><span class="line">$email = $_GET [&quot;email&quot;];</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的账户：&quot; . $username;</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的密码：&quot; . $password;</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的邮箱：&quot; . $email;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h3 id="POST"><a href="#POST" class="headerlink" title="$_POST[ ]"></a>$_POST[ ]</h3><p>同form_get.html，我们建立一个名叫form_post.html，内容仅仅把<form>元素的action和method修改一下：</form></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST方式的表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_post.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            账户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行界面除了地址栏和标题栏，其他内容完全和form_get.html一致。这时候点击跳转到同目录下的form_post.php文件，文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">var_dump ( $_POST );</span><br><span class="line">$username = $_POST [&quot;username&quot;];</span><br><span class="line">$password = $_POST [&quot;password&quot;];</span><br><span class="line">$email = $_POST [&quot;email&quot;];</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的账户：&quot; . $username;</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的密码：&quot; . $password;</span><br><span class="line">echo &quot;&lt;br /&gt;接收到的邮箱：&quot; . $email;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-会话控制"><a href="#2-会话控制" class="headerlink" title="2. 会话控制"></a>2. 会话控制</h2><blockquote>
<p>会话控制是一种跟踪用户的通信方式</p>
<p>例如：当一个用户在请求一个页面后，再次请求这个页面，网站是无法知道这个用户刚才是否曾经来访问过。由此我们就会觉得奇怪，平时我们在电商网站购物时，只要我们在这个站点内，不论我们怎么跳转页面，网站总会记得我是谁，这是怎么做到的呢？这就是运用了HTTP会话控制。在网站中跟踪一个变量，通过对变量的跟踪，使多个请求事物之间建立联系，根据授权和用户身份显示不同的内容、不同页面。</p>
</blockquote>
<p><img src="images/cookie.png" alt="cookie.gif"></p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>cookie是在服务器端创建，并写回到客户端浏览器</p>
<p>浏览器接到指令则在本地临时文件夹中创建了一个cookie文件，其中保存了你的cookie内容</p>
<p>客户端浏览器每次访问网站时，都会检测是否有该网站的cookie信息，如果有的话，也会同时发送过去。</p>
<p>注意：</p>
<p>cookie内容的存储是<strong>键/值</strong>对的方式，<strong>键和值都只能是字符串</strong>。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>setcookie( key , value ,有效期 )</td>
<td>设置会话 cookie 参数</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义cookie</span></span><br><span class="line"><span class="comment">//setcookie(键, 值, 有效期(秒))</span></span><br><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">"zhangsan"</span>,time()+<span class="number">1000</span>); <span class="comment">//如果不设置有效期，关闭浏览器就会消失</span></span><br><span class="line">setcookie(<span class="string">"pwd"</span>,<span class="string">"123"</span>,time()+<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除cookie（设定过期时间，使失效）</span></span><br><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">""</span>,time()<span class="number">-1</span>);</span><br><span class="line">setcookie(<span class="string">'age'</span>,<span class="keyword">null</span>,time()<span class="number">-1</span>);</span><br><span class="line">setcookie(<span class="string">'sex'</span>,<span class="string">""</span>,time()<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p><img src="images/session.png" alt="cookie.gif"></p>
<p>session与cookie相似，只是原来将信息存在客户端，现在保存到服务端</p>
<p>客户端第一次访问时将信息保存到服务器，同时分配给用户一个固定长度的字符串（sessionID），并以cookie方式保存在客户端</p>
<p>在php.ini配置文件中，可以指定这个sessionID的名称：</p>
<p>session.name = PHPSESSID</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>session_start()</td>
<td>开启session</td>
</tr>
<tr>
<td>session_destroy()</td>
<td>销毁服务器端session文件</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启session 要保证在它之前，没有向浏览器输出过任何内容,通常放在代码第一行</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//往session中存储信息</span></span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'张三'</span>;</span><br><span class="line">$_SESSION[<span class="string">'sex'</span>] = <span class="string">'男'</span>;</span><br><span class="line">$_SESSION[<span class="string">'age'</span>] = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取session信息</span></span><br><span class="line">$name=$_SESSION[<span class="string">'name'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁session中的信息</span></span><br><span class="line"><span class="keyword">unset</span>($_SESSION);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁session文件</span></span><br><span class="line">session_destroy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁客户端cookie信息</span></span><br><span class="line">setcookie(<span class="string">'PHPSESSID'</span>,<span class="string">''</span>,time()<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h3><table>
<thead>
<tr>
<th>区别</th>
<th>cookie</th>
<th>session</th>
</tr>
</thead>
<tbody><tr>
<td>存放位置</td>
<td>客户端</td>
<td>服务器端</td>
</tr>
<tr>
<td>安全性</td>
<td>不够安全</td>
<td>安全</td>
</tr>
<tr>
<td>资源占用</td>
<td>存放在客户端，不占服务器资源</td>
<td>占服务器资源</td>
</tr>
<tr>
<td>生命周期</td>
<td>固定时长</td>
<td>每次访问，重新计算时长</td>
</tr>
<tr>
<td>文件大小</td>
<td>4k</td>
<td>不限制</td>
</tr>
</tbody></table>
<p><strong>建议将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中</strong></p>
<h3 id="session垃圾回收-GC-机制"><a href="#session垃圾回收-GC-机制" class="headerlink" title="session垃圾回收(GC)机制"></a>session垃圾回收(GC)机制</h3><p>php有专门GC（Garbage Collection）垃圾回收机制负责清理垃圾数据，防止内存泄漏。以下是针对session的垃圾回收机制。</p>
<ul>
<li><p>在php.ini文件中，有以下三个设置，这三个配置组合构建服务端session的垃圾回收机制,默认值为：</p>
<p>session.gc_probability = 1（probability：概率）<br>session.gc_divisor = 100（divisor：除数）<br>session.gc_maxlifetime = 1440 （maxlifetime：最大生命周期）</p>
<p>服务端定期有一定的概率调用gc函数来对session进行清理，清理的概率为： gc_probability/gc_divisor ，例如:</p>
<p>session.gc_probability = 1<br>session.gc_divisor = 100            </p>
<p>表示每一个新会话初始化时，有1/100的概率会启动垃圾回收程序</p>
</li>
<li><p>清理的标准为session.gc_maxlifetime定义的时间</p>
<p>由于PHP的工作机制，它并没有一个后台线程，来定时地扫描session信息并判断其是否失效。</p>
<p>它的解决之道是，当一个有效请求发生时(  每次session_start() 时 )，PHP会根据gc_probability/gc_divisor的概率，来决定是否调用一个GC。</p>
<p>session.gc_maxlifetime只是作为时间节点，如果生存时间已经超过gc_maxlifetime，就把该session删除。</p>
</li>
</ul>
<h1 id="第十四章-面向对象的编程"><a href="#第十四章-面向对象的编程" class="headerlink" title="第十四章 面向对象的编程"></a>第十四章 面向对象的编程</h1><h2 id="1-类-对象"><a href="#1-类-对象" class="headerlink" title="1. 类/对象"></a>1. 类/对象</h2><p>世间万物皆对象，你自己本身也是一个对象；面向对象的核心就是，让对象帮我们实现功能</p>
<ul>
<li>对象：具有一定功能和特征的单个事物，就是对象</li>
<li>类：具有相同功能和特征的对象的抽象，就是类</li>
<li>类与对象的关系：对象是类的实例化，类是对象的抽象化<h3 id="定义类与对象实例化"><a href="#定义类与对象实例化" class="headerlink" title="定义类与对象实例化"></a>定义类与对象实例化</h3></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用class关键字定义一个类  类名的首字母要求大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span>&#123;</span><br><span class="line">  <span class="comment">//成员属性</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用new运算符，实例化一个类的对象</span></span><br><span class="line">$hxsd = <span class="keyword">new</span> School();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用instanceof 判断$hxsd是否是School的实例</span></span><br><span class="line">$bool=$hxsd <span class="keyword">instanceof</span> School;</span><br><span class="line">var_dump($bool);</span><br></pre></td></tr></table></figure>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th>访问修饰符（3p）</th>
<th>修饰对象</th>
<th>类外</th>
<th>子类</th>
<th>本类</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>属性  方法</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>属性  方法</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>private</td>
<td>属性  方法</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>额外修饰符</th>
<th>修饰对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>属性  方法</td>
<td>静态：可以不new实例，直接通过 <code>类::方法</code>   <code>类::属性</code>   的方式调用。<br>静态方法不能调用非静态属性（需先实例化对象 ）</td>
</tr>
<tr>
<td>final</td>
<td>类  方法</td>
<td>最终：修饰的类不能被继承，修饰的方法不能被重写</td>
</tr>
<tr>
<td>abstract</td>
<td>类  方法</td>
<td>抽象：定义抽象类</td>
</tr>
</tbody></table>
<h3 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h3><h4 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h4><ul>
<li>必须使用<code>3P</code>修饰符进行修饰</li>
<li>可以用static修饰为静态，静态属性不会随对象实例销毁</li>
<li>可以没有初始值</li>
<li>初始值不能为资源型和对象型</li>
<li>初始值不能为变量或函数调用</li>
<li>成员属性不能重复定义</li>
</ul>
<h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul>
<li>必须使用<code>3P</code>修饰符进行修饰</li>
<li>可以没有形参、返回值与程序体</li>
</ul>
<h4 id="类常量"><a href="#类常量" class="headerlink" title="类常量"></a>类常量</h4><ul>
<li>在类中始终保持不变的值定义为常量，类中方法不可更改它的值</li>
<li>类常量可以使用类名或类的实例，用 <code>::</code> 来访问</li>
<li>类的常量属于类本身，不能被子类继承 或 覆盖。</li>
<li>不能使用表示变量的符号 $，全部大写</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用class关键字定义一个类  类名的首字母要求大写</span></span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性-----------------------</span></span><br><span class="line">  	<span class="keyword">public</span> $students=<span class="number">100</span>;  <span class="comment">//公共 学生人数</span></span><br><span class="line">	<span class="keyword">public</span> $anme;  <span class="comment">//公共 学校名称  未命名</span></span><br><span class="line">	<span class="keyword">protected</span> $tech=<span class="number">100</span>; <span class="comment">//受保护的 技术资料</span></span><br><span class="line">    <span class="keyword">private</span> $money=<span class="number">100000</span>; <span class="comment">//私有 资金 </span></span><br><span class="line">	  	  	</span><br><span class="line">	<span class="comment">//类常量-------------------------</span></span><br><span class="line">	<span class="keyword">const</span> ADDRESS=<span class="string">"清华东路100号"</span>;</span><br><span class="line">	  </span><br><span class="line">  	<span class="comment">//成员方法------------------------</span></span><br><span class="line">	<span class="comment">//构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($shool_name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;students=<span class="number">1500</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name=$shool_name;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//自定义方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"学校简介：名称："</span>.<span class="keyword">$this</span>-&gt;name.<span class="string">",本校有"</span>.<span class="keyword">$this</span>-&gt;students.<span class="string">"名学生，本校有教师"</span>.<span class="keyword">$this</span>-&gt;staff.<span class="string">"人，地址："</span>.<span class="keyword">self</span>::ADDRESS.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//使用new运算符，实例化一个类的对象</span></span><br><span class="line">$shool = <span class="keyword">new</span> School(<span class="string">"清华大学"</span>,<span class="string">"1500"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用var_dump可以直接查看对象属性</span></span><br><span class="line">var_dump（$shool）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用get_class_methods（）,可以查看类中定义的方法</span></span><br><span class="line">var_dump（get_class_methods($shool)）;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//修改对象属性</span></span><br><span class="line">$shool-&gt;students=<span class="number">2000</span>;</span><br><span class="line">$shool-&gt;staff=<span class="number">50</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//类常量可以直接访问</span></span><br><span class="line">var_dump(School::ADDRESS);</span><br><span class="line">var_dump($shool::ADDRESS);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>类中只能包含 <strong>成员属性、成员方法、类常量</strong></p>
<p>类中成员属性和成员方法的位置可以互换，建议成员属性在前，成员方法在后</p>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>PHP中把以两个下划线 <code>__</code> 开头的函数（方法）称为魔术方法（Magic methods），这些函数不需要显示的调用，而是由某种特定的条件触发。</p>
<table>
<thead>
<tr>
<th>魔术方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>__construct()</td>
<td>类的构造函数，当一个类被实例化的时候自动调用</td>
</tr>
<tr>
<td>__destruct()</td>
<td>类的析构函数，脚本执行结束的时候、销毁对象的时候、重新定义对象的时候</td>
</tr>
<tr>
<td>__get()</td>
<td>读取不可访问或不存在属性时被调用</td>
</tr>
<tr>
<td>__set()</td>
<td>当给不可访问或不存在属性赋值时被调用</td>
</tr>
<tr>
<td>__isset()</td>
<td>当对不可访问属性调用isset()或empty()时调用</td>
</tr>
<tr>
<td>__unset()</td>
<td>当对不可访问属性调用unset()时被调用</td>
</tr>
<tr>
<td>__sleep()</td>
<td>当使用serialize时被调用（不需要保存大对象的所有数据时很有用)</td>
</tr>
<tr>
<td>__wakeup()</td>
<td>当使用unserialize时被调用，可用于做些对象的初始化操作</td>
</tr>
<tr>
<td>__toString()</td>
<td>当一个类被转换成字符串时被调用</td>
</tr>
<tr>
<td>__clone()</td>
<td>进行对象clone时被调用，用来调整对象的克隆行为</td>
</tr>
<tr>
<td>__invoke()</td>
<td>当以函数方式调用对象时被调用</td>
</tr>
<tr>
<td>__set_state()</td>
<td>调用var_export()导出类时，此静态方法会被调用</td>
</tr>
<tr>
<td>__call()</td>
<td>调用非public或不存在的方法时被调用</td>
</tr>
<tr>
<td>__callStatic()</td>
<td>调用不可访问或不存在的静态方法时被调用</td>
</tr>
<tr>
<td>__debugInfo()</td>
<td>打印所需调试信息</td>
</tr>
</tbody></table>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><table>
<thead>
<tr>
<th>指针</th>
<th>指向</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$this</td>
<td>实例化对象</td>
<td>只能应用于成员方法中<br>可以调用<code>本类</code> 或从 <code>父类</code>中继承来的属性和方法<br>避免用$this引用静态成员属性和类常量（使用self）</td>
</tr>
<tr>
<td>self</td>
<td>类本身</td>
<td>可以访问 <code>本类</code> 或 <code>父类</code> 中的静态属性和静态方法</td>
</tr>
<tr>
<td>parent</td>
<td>父类</td>
<td>访问 <code>父类</code> 中的静态属性和方法</td>
</tr>
</tbody></table>
<h3 id="static（静态）"><a href="#static（静态）" class="headerlink" title="static（静态）"></a>static（静态）</h3><ul>
<li>静态属性只能是标量类型，不能使用表达式、另一个变量、函数返回值 或 指向一个对象</li>
</ul>
<ul>
<li>静态属性/方法，可以不实例化对象而直接访问（<code>类::属性</code>   或   <code>类::方法</code>）</li>
<li>静态<code>属性</code>不能通过一个类的实例化对象来访问</li>
<li>静态<code>方法</code>依然可以通过一个类的实例化对象来访问</li>
<li>静态属性/方法默认为公有（public）。</li>
<li>静态方法使用 <code>self::方法</code>   <code>self::属性</code> 的方式访问其他静态属性/方法（不能访问非静态属性/方法，否则会报错）。</li>
</ul>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式确保某个类只有一个实例</p>
<p>例如：PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cls</span></span>&#123;</span><br><span class="line">    <span class="comment">//3.定义静态成员属性用于存储实例化对象（静态属性赋值后不会消失）</span></span><br><span class="line">    <span class="keyword">static</span> $obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.定义静态成员方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">self</span>::$obj==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">self</span>::$obj = <span class="keyword">new</span> Cls();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">self</span>::$obj;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'已经实例化了，不能重复实例化！'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'我是单例模式中的一个方法'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用静态成员方法</span></span><br><span class="line">$obj = Cls::getObj();</span><br><span class="line">var_dump($obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">$obj-&gt;demo();</span><br></pre></td></tr></table></figure>

<h2 id="2-封装"><a href="#2-封装" class="headerlink" title="2. 封装"></a>2. 封装</h2><p>为了最大限度的保护类内部信息的细节而准备，使用 <strong>3P修饰符</strong> 和 <strong>gusic魔术方法</strong> 来实现类的封装</p>
<table>
<thead>
<tr>
<th>gusic魔术方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>__get(属性名)</td>
<td>当在类外部<strong>访问</strong>非公有成员属性时，自动调用，<br>并且，参数传入要获取的成员属性的名称，返回获取的属性值</td>
</tr>
<tr>
<td>__unset(属性名)</td>
<td>当在类外部<strong>销毁</strong>非公有成员属性时，自动调用，<br>并且，将正在销毁的成员属性名传递进来</td>
</tr>
<tr>
<td>__set(属性名，属性值)</td>
<td>当在类外部<strong>设置</strong>非公有成员属性时，自动调用，<br>并且，将正在添加的成员属性的名字和值同时传进来</td>
</tr>
<tr>
<td>__isset(属性名)</td>
<td>当在类外部<strong>判断</strong>非公有成员属性是否存在时，自动调用，<br>并且，将正在判断的属性名传进来</td>
</tr>
<tr>
<td>__call(方法名和参数列表)</td>
<td>当在类外部<strong>访问</strong>非公有成员<strong>方法</strong>时，自动调用，<br>并且，将正在访问的方法名和参数列表传进来</td>
</tr>
</tbody></table>
<p>gusic魔术方法在实际开发中，并不经常使用，仅作为知识点掌握即可。</p>
<h2 id="3-继承（extends）"><a href="#3-继承（extends）" class="headerlink" title="3. 继承（extends）"></a>3. 继承（extends）</h2><p>自己没有，别人有，可以拿来，就是继承</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用extends关键字 定义继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;...&#125;   <span class="comment">//B 继承 A</span></span><br></pre></td></tr></table></figure>

<h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//php不支持多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span>,<span class="title">C</span></span>&#123;....&#125; <span class="comment">//不能同时继承多个类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若想继承多个类，可以采用如下方法：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;...&#125;  <span class="comment">//B继承A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;...&#125;	<span class="comment">//C继承B，同时继承了A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span></span>&#123;...&#125;	<span class="comment">//D继承C，同时继承了B和A</span></span><br></pre></td></tr></table></figure>

<h3 id="方法重写（重载）"><a href="#方法重写（重载）" class="headerlink" title="方法重写（重载）"></a>方法重写（重载）</h3><ul>
<li>子类包含与父类重名的方法，则子类的方法重写（覆盖）父类方法</li>
<li>子类重写父类方法，访问权限一定要高于或等于父类方法的访问权限 : public &gt; protected &gt; private</li>
<li>子类重写父类方法，比父类方法多出的参数，必须指定默认值</li>
<li>static（静态）方法必须还是static</li>
</ul>
<h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4. 多态"></a>4. 多态</h2><blockquote>
<p>按字面的意思就是“多种状态”。在面向对象语言中，多态就是把子类对象赋值给父类引用，然后调用父类的方法，去执行子类覆盖父类的那个方法。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="comment">//做工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>&#123;                 </span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">"这个方法需要在子类具体实现"</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">    <span class="comment">//从事何种工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doWork</span><span class="params">($shenfen_obj)</span></span>&#123;<span class="comment">//通过传入不同“身份”的对象，实现不同形态</span></span><br><span class="line">    	$shenfen_obj-&gt;work();</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定义油漆工类 继承 Man类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Painter</span> <span class="keyword">extends</span> <span class="title">Man</span></span>&#123;                                    </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>&#123;                 </span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"油漆工正在刷漆！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定义教师类 继承 Man类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Man</span></span>&#123;                                    </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>&#123;                     </span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">"老师正在上课！"</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//实例化一个人</span></span><br><span class="line">$man=<span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在是油漆工</span></span><br><span class="line">$man-&gt;doWork(<span class="keyword">new</span> Painter());</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换了身份，现在是老师啦</span></span><br><span class="line">$man-&gt;doWork(<span class="keyword">new</span> Teacher());</span><br></pre></td></tr></table></figure>

<h2 id="5-autoload"><a href="#5-autoload" class="headerlink" title="5. __autoload()"></a>5. __autoload()</h2><p>__autoload()方法并不是一个魔术方法，但是这个方法非常有用，当实例化或继承一个不存在的类，会自动调用__autoload()，同时将该类的类名作为参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require "Model.class.php";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前页面需要调用class A</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($arg)</span></span>&#123;</span><br><span class="line">    var_dump($arg); <span class="comment">//Model类名</span></span><br><span class="line">  	</span><br><span class="line">  	<span class="comment">//引入 model.class.php</span></span><br><span class="line">  	<span class="keyword">require</span> <span class="string">"&#123;$arg&#125;.class.php"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">$shool=<span class="keyword">new</span> Model();</span><br></pre></td></tr></table></figure>

<h2 id="6-抽象类和接口"><a href="#6-抽象类和接口" class="headerlink" title="6. 抽象类和接口"></a>6. 抽象类和接口</h2><h3 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h3><ul>
<li><p>任何一个类，如果它里面至少有一个方法是抽象的（该方法用abstract修饰，没有函数体），那么这个类就必须被声明为抽象的。</p>
</li>
<li><p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p>
</li>
<li><p>定义为抽象的类不能被实例化。</p>
</li>
<li><p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；这些方法的访问权限一定要高于或等于父类方法的访问权限 : public &gt; protected &gt; private。此外，方法的调用方式必须匹配，即类型和所需参数的数量必须一致。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dev_teamA</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $lesson_A=<span class="string">"python"</span>;</span><br><span class="line">	<span class="keyword">public</span> $lesson_B=<span class="string">"bigData"</span>;	</span><br><span class="line">			</span><br><span class="line">	<span class="comment">//实现dev_python方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_python</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;lesson_A.<span class="string">"课程开发完成！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//未实现的方法 使用abstract定义为抽象方法</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_bigData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//子类必须定义父类中的所有抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dev_teamB</span> <span class="keyword">extends</span> <span class="title">Dev_teamA</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//子类必须定义父类中的所有抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_bigData</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;lesson_B.<span class="string">"课程开发完成！"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子类可以重新父类方法	</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_python</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"重新完善"</span>.<span class="keyword">$this</span>-&gt;lesson_A.<span class="string">"课程"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">$dev=<span class="keyword">new</span> Dev_teamB();</span><br><span class="line">	</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">$dev-&gt;dev_python();</span><br><span class="line">$dev-&gt;dev_bigData();</span><br></pre></td></tr></table></figure>



<h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><p>一个抽象类里面的所有方法都是抽象方法，并且都是public权限，那么这种特殊的抽象类就叫接口（interface）。</p>
<ul>
<li>接口是通过<strong>interface</strong> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的，不需要abstract修饰。</li>
<li>使用接口可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</li>
<li>接口中定义的所有方法都必须是public的。</li>
<li>接口中可以定义常量，不可以定义成员属性。接口常量和类常量的使用完全相同。</li>
<li>要实现一个接口，使用 <strong>implements</strong> 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。</li>
<li>类可以实现多个接口，用逗号来分隔多个接口的名称。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义Ai课程interface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ai</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> LESSON_A=<span class="string">"python"</span>;</span><br><span class="line">    <span class="keyword">const</span> LESSON_B=<span class="string">"bigData"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_python</span><span class="params">()</span></span>;  <span class="comment">//研发python课程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_bigData</span><span class="params">()</span></span>;  <span class="comment">//研发BigData课程</span></span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定义Ui课程interface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ui</span></span>&#123;</span><br><span class="line">    <span class="comment">//不要与其他接口内的常量重名</span></span><br><span class="line">    <span class="keyword">const</span> LESSON_C=<span class="string">"moviePoster"</span>; <span class="comment">//电影海报</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_moviePoster</span><span class="params">()</span></span>;  <span class="comment">//研发电影海报课程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*dev_teamA类使用implements关键字，可以同时实现Ai，Ui接口</span></span><br><span class="line"><span class="comment">*dev_teamA只实现了Ai接口的dev_python方法，没有实现dev_bigData</span></span><br><span class="line"><span class="comment">*因此，dev_teamA类还是个抽象类，必须用abstract修饰</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">dev_teamA</span> <span class="keyword">implements</span> <span class="title">Ai</span>,<span class="title">Ui</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现dev_python方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_python</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::LESSON_A.<span class="string">"课程开发完成！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//实现dev_moviePoster()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_moviePoster</span><span class="params">()</span></span>&#123;<span class="comment">//研发电影海报课程</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::LESSON_C.<span class="string">"课程开发完成！！"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//未实现的方法 继续使用abstract定义为抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_bigData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dev_teamB类extends了dev_teamA类，继续进行课程研发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dev_teamB</span> <span class="keyword">extends</span> <span class="title">dev_teamA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_bigData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::LESSON_B.<span class="string">"课程开发完成！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dev_python</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"重新完善"</span>.<span class="keyword">self</span>::LESSON_A.<span class="string">"课程"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">$dev=<span class="keyword">new</span> dev_teamB();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">$dev-&gt;dev_python();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$dev-&gt;dev_bigData();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$dev-&gt;dev_moviePoster();</span><br></pre></td></tr></table></figure>

<h3 id="抽象类与接口的差别"><a href="#抽象类与接口的差别" class="headerlink" title="抽象类与接口的差别"></a>抽象类与接口的差别</h3><p>抽象类是对根源的抽象，比如，男人，女人这两个类，可以为这两个类设计一个更高级的抽象类—人。</p>
<p>接口是对动作的抽象，比如，定义一个吃饭接口，开车接口，踢球接口等等</p>
<p>一个类只能继承一个抽象类（因为，你不可能同时是“人”类 又是“猫”类），但是一个类可以同时实现多个接口。</p>
<h1 id="第十五章-php操作MySQL"><a href="#第十五章-php操作MySQL" class="headerlink" title="第十五章 php操作MySQL"></a>第十五章 php操作MySQL</h1><h2 id="1-mySql"><a href="#1-mySql" class="headerlink" title="1. mySql"></a>1. mySql</h2><p>MySQL是一个关系型数据库数据系统， PHP+MySQL是最流行使用方法，当然，PHP也支持其他的数据库，如Mango，MangoDB，Microsoft SQL Server，Oracle OCI8，Sybase，DB++，PostgreSQL，Access，SQLite等。</p>
<h2 id="2-配置MySQL"><a href="#2-配置MySQL" class="headerlink" title="2. 配置MySQL"></a>2. 配置MySQL</h2><p>在PHP中想要对MySQL数据库进行操作，需要使用mysqli扩展，这时候需要修改PHP的配置文件，打开php.ini，找到“;extension=mysqli”，将前面的分号去掉。修改好以后保存，重启Apache服务。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="keyword">if</span> ($mysqli) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"env mysql success"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"env mysql error"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-访问数据库"><a href="#3-访问数据库" class="headerlink" title="3. 访问数据库"></a>3. 访问数据库</h2><h3 id="连接MySQL服务器"><a href="#连接MySQL服务器" class="headerlink" title="连接MySQL服务器"></a>连接MySQL服务器</h3><p>建立与MySQL数据库的连接，使用mysqli_connect()函数，它的语法格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqli mysqli_connect ([string server[, string username[, string password[, string dbname[, int port[, string socket]]]]]])</span><br></pre></td></tr></table></figure>

<p>它的参数含义如下：</p>
<ul>
<li>server：可选参数，MySQL服务器地址。</li>
<li>username：可选参数，MySQL服务器用户名。</li>
<li>password：可选参数，MySQL服务器用户密码。</li>
<li>dbname：可选参数，要连接的数据库名字。</li>
<li>port：可选参数，MySQL服务器的端口号，默认3306。</li>
<li>socket：可选参数，使用设置的socket或者pipe。</li>
</ul>
<p>前四个参数比较常用，后两个很少用到。</p>
<h3 id="选择MySQL数据库"><a href="#选择MySQL数据库" class="headerlink" title="选择MySQL数据库"></a>选择MySQL数据库</h3><p>PHP提供了mysqli_select_db()函数来选择MySQL数据库，它的语法格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $server = <span class="string">"localhost"</span>;</span><br><span class="line">    $username = <span class="string">"root"</span>;</span><br><span class="line">    $password = <span class="string">"123456"</span>;</span><br><span class="line">    $dbname = <span class="string">"php_db"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快速写法</span></span><br><span class="line">    $mysqli = <span class="keyword">new</span> mysqli ( $server, $username, $password, $dbname );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兼容写法</span></span><br><span class="line">    $mysqli = <span class="keyword">new</span> mysqli ( $server, $username, $password );</span><br><span class="line">    mysqli_select_db ( $mysqli, $dbname );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象写法</span></span><br><span class="line">    $mysqli = <span class="keyword">new</span> mysqli ();</span><br><span class="line">    $mysqli-&gt;connect ( $server, $username, $password );</span><br><span class="line">    $mysqli-&gt;select_db ( $mysqli, $dbname );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="断开MySQL服务器"><a href="#断开MySQL服务器" class="headerlink" title="断开MySQL服务器"></a>断开MySQL服务器</h3><p>使用mysqli_close()函数来关闭与MySQL服务器的连接。</p>
<h3 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h3><p>数据库的“增删改查”说到底都是一句SQL语句，PHP提供了mysqli_query()函数来执行SQL语句，它的语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mixed mysqli_query (mysqli link, string query[, int resultmode])</span><br></pre></td></tr></table></figure>

<p>link : 是调用mysqli_connect()函数返回的mysqli对象，</p>
<p>query : 是要执行的SQL语句，</p>
<p>resultmode : 是可选参数，它的默认值是MYSQLI_STORE_RESULT，如果需要查询的数据量很大，需要使用MYSQLI_USE_RESULT。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $server = <span class="string">"localhost"</span>;</span><br><span class="line">    $username = <span class="string">"root"</span>;</span><br><span class="line">    $password = <span class="string">"123456"</span>;</span><br><span class="line">    $dbname = <span class="string">"account_db"</span>;</span><br><span class="line">    $mysqli = <span class="keyword">new</span> mysqli ( $server, $username, $password, $dbname );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    $result = mysqli_query ( $mysqli, <span class="string">"insert into account(username, password, email) values('张三', '123456', 'zhangsan@example.com')"</span> );</span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    $result = mysqli_query ( $mysqli, <span class="string">"delete from account where user='张三'"</span> );</span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    $result = mysqli_query ( $mysqli, <span class="string">"update account set password='abcdefg' where user='张三'"</span> );</span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    $result = mysqli_query ( $mysqli, <span class="string">"select * from account "</span> );</span><br><span class="line">    mysqli_close ( $mysqli );</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-解析结果集"><a href="#4-解析结果集" class="headerlink" title="4. 解析结果集"></a>4. 解析结果集</h2><table>
<thead>
<tr>
<th>面向对象</th>
<th>面向过程</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>free()   close()   free_result()</td>
<td>mysqli_free_result()</td>
<td>释放与结果集占用的内存</td>
</tr>
<tr>
<td>fetch_row()</td>
<td>mysqli_fetch_row()</td>
<td>以索引数组方式返回一行数据</td>
</tr>
<tr>
<td>fetch_assoc()</td>
<td>mysqli_fetch_assoc()</td>
<td>以关联数组方式返回一行数据</td>
</tr>
<tr>
<td>fetch_array()</td>
<td>mysqli_fetch_array()</td>
<td>以数组的方式返回一行数据</td>
</tr>
<tr>
<td>fetch_object()</td>
<td>mysqli_fetch_object()</td>
<td>以对象的方式返回一行数据</td>
</tr>
<tr>
<td>data_seek()</td>
<td>mysqli_data_seek()</td>
<td>移动结果集中的指针到任意行</td>
</tr>
<tr>
<td>num_rows</td>
<td>mysqli_num_rows()</td>
<td>获取结果集中行的数量</td>
</tr>
</tbody></table>
<h2 id="5-PDO（PHP-Data-Object）"><a href="#5-PDO（PHP-Data-Object）" class="headerlink" title="5. PDO（PHP Data Object）"></a>5. PDO（PHP Data Object）</h2><p>PDO是PHP数据对象的英文缩写，英文全称为PHP Data Object，是有MySQL官方封装的、基于面向对象编程思想的、使用C语言开发的数据库抽象层。</p>
<h2 id="6-配置PDO"><a href="#6-配置PDO" class="headerlink" title="6. 配置PDO"></a>6. 配置PDO</h2><p>Windows下启动PDO需要在“php.ini”文件中进行配置，添加扩展：</p>
<p>extension=php_pdo.dll</p>
<p>在最新版PHP中，PDO已经默认开启，只需要启动其他数据库扩展即可。配置好这些后重启Apache服务。执行phpinfo()函数，看到PDO配置项，说明开启成功。</p>
<h2 id="7-访问数据库"><a href="#7-访问数据库" class="headerlink" title="7. 访问数据库"></a>7. 访问数据库</h2><p>与mysqli扩展类似，PDO扩展也是实例一个PDO对象，然后可以调用相关方法和属性来执行数据库的操作。</p>
<h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>使用PDO与服务器建立连接，需要先使用构造方法来创建PDO实例，PDO的构造方法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">_construct(string data_source_name [,string user[,string pwd[,<span class="keyword">array</span> driver_options]]])</span><br></pre></td></tr></table></figure>

<p>data_source_name : 数据源，该参数包括了数据库名，主机名。MySQL数据库的DSN为：“mysql:host=localhost;dbname=account_db; port=3306”</p>
<p>user：数据库服务器用户名</p>
<p>pwd：为数据库服务器密码</p>
<p>数据库连接成功后，将返回一个PDO的实例，连接失败将会抛出一个PDOException异常，通常会使用try/catch语句进行处理。</p>
<h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><p>要想关闭连接，需要销毁对象以确保所有到它的引用都被删除，可以给变量赋一个NULL。</p>
<h2 id="8-执行SQL语句"><a href="#8-执行SQL语句" class="headerlink" title="8. 执行SQL语句"></a>8. 执行SQL语句</h2><p>PDO提供了三种执行SQL语句的方法，分别是exec()，query()，预处理语句。</p>
<h3 id="exec-）"><a href="#exec-）" class="headerlink" title="exec(）"></a>exec(）</h3><p>exec()方法可以执行一条语句，并返回受影响的行数，它的语法格式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> PDO::exec(String sql)</span><br></pre></td></tr></table></figure>

<p>exec()方法通常用于insert into，delete，update等语句。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">    $dbms = <span class="string">"mysql"</span>;</span><br><span class="line">    $server = <span class="string">"localhost"</span>;</span><br><span class="line">    $username = <span class="string">"root"</span>;</span><br><span class="line">    $password = <span class="string">"123456"</span>;</span><br><span class="line">    $dsn = <span class="string">"$dbms:host=$server"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"PDO连接MySQL数据库服务器成功"</span>;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"create database account_pdo_db"</span> )) ;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"use account_pdo_db"</span> )) ;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"set names utf8"</span> )) ;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"create table account(id int auto_increment primary key, username varchar(50) not null, password varchar(50) not null, email  varchar(50) not null)"</span> )) ;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"insert into account(username, password, email) values ('Jack', '123456', 'jack@example.com')"</span> )) ;</span><br><span class="line">        <span class="keyword">print</span> ($pdo-&gt;exec ( <span class="string">"insert into account(username, password, email) values ('Lucy', '123456', 'lucy@example.com')"</span> )) ;</span><br><span class="line">        $pdo = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"PDO连接MySQL数据库服务器失败"</span>;</span><br><span class="line">        <span class="keyword">die</span> ();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="query"><a href="#query" class="headerlink" title="query()"></a>query()</h3><p>query()方法不同于exec()，通常用于select语句中，它的返回值是PDOStatement的实例，是POD里的结果集。它的语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PDOStatement PDO::query(String sql)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">$dbms = <span class="string">"mysql"</span>;</span><br><span class="line">$server = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br><span class="line">$dbname = <span class="string">"account_pdo_db"</span>;</span><br><span class="line">$dsn = <span class="string">"$dbms:host=$server;dbname=$dbname"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器成功&lt;/p&gt;"</span>;</span><br><span class="line">    $result = $pdo-&gt;query ( <span class="string">"select * from account"</span> );</span><br><span class="line">    <span class="keyword">foreach</span> ( $result <span class="keyword">as</span> $row ) &#123;</span><br><span class="line">        var_dump ( $row );</span><br><span class="line">    &#125;</span><br><span class="line">    $pdo = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"PDO连接MySQL数据库服务器失败"</span>;</span><br><span class="line">    <span class="keyword">die</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-预处理语句"><a href="#9-预处理语句" class="headerlink" title="9. 预处理语句"></a>9. 预处理语句</h2><p>PDO提供对预处理语句的支持。</p>
<p>预处理语句是预先将一个预处理的sql语句发送到数据库服务器，执行其他sql语句只是修改预处理语句里对应的参数。简单的说，就是将sql语句强制一分为二：第一部分为前面相同的命令和结构部分，第二部分为后面可变的数据部分。预处理语句，可以减轻数据库服务器压力。</p>
<h3 id="定义预处理语句"><a href="#定义预处理语句" class="headerlink" title="定义预处理语句"></a>定义预处理语句</h3><p>使用prepare()方法执行sql预处理语句，得到一个PDOStatement实例，sql预处理语句通常有如下两种定义方式：</p>
<ul>
<li>命名参数：自定义的有意义的字符串作为命名参数，前面加上冒号。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="built_in">table_name</span>(<span class="type">name</span>,<span class="keyword">password</span>,email) <span class="keyword">values</span>(:<span class="type">name</span>,:<span class="keyword">password</span>,:email)</span><br></pre></td></tr></table></figure>

<ul>
<li>问号数据占位符：使用“？”作为参数。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="built_in">table_name</span>(<span class="type">name</span>,<span class="keyword">password</span>,email) <span class="keyword">values</span>(?,?,?)</span><br></pre></td></tr></table></figure>

<h3 id="绑定参数"><a href="#绑定参数" class="headerlink" title="绑定参数"></a>绑定参数</h3><p>往预处理语句绑定参数有三种方法：</p>
<ul>
<li><p>bindParam()方法一个一个绑定，绑定完成执行execute()方法使之生效。</p>
</li>
<li><p>bindValue()方法一个一个绑定，绑定完成执行execute()方法使之生效。</p>
</li>
<li><p>直接使用execute()方法传递一个数组，命名参数使用关联数组，数据占位符使用索引数组。</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">    $dbms = <span class="string">"mysql"</span>;</span><br><span class="line">    $server = <span class="string">"localhost"</span>;</span><br><span class="line">    $username = <span class="string">"root"</span>;</span><br><span class="line">    $password = <span class="string">"123456"</span>;</span><br><span class="line">    $dbname = <span class="string">"account_pdo_db"</span>;</span><br><span class="line">    $dsn = <span class="string">"$dbms:host=$server;dbname=$dbname"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"PDO连接MySQL数据库服务器成功"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数据占位符</span></span><br><span class="line">        $pre = $pdo-&gt;prepare(<span class="string">"insert into account(username, password, email) values (?,?,?)"</span>);</span><br><span class="line">        $name = <span class="string">"Peter"</span>;</span><br><span class="line">        $pwd = <span class="string">"333333"</span>;</span><br><span class="line">        </span><br><span class="line">        $pre-&gt;bindParam ( <span class="number">1</span>, $name );</span><br><span class="line">        $pre-&gt;bindValue ( <span class="number">2</span>, $pwd );</span><br><span class="line">        $pre-&gt;bindValue ( <span class="number">3</span>, <span class="string">"Peter@example.com"</span> );</span><br><span class="line">        $pre-&gt;execute ();</span><br><span class="line"></span><br><span class="line">        $name = <span class="string">"张三"</span>;</span><br><span class="line">        $pre-&gt;execute (<span class="keyword">array</span>($name,<span class="string">"1245"</span>,<span class="string">"zhangsan@example.com"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 命名参数</span></span><br><span class="line">        $pre = $pdo-&gt;prepare(<span class="string">"insert into account(username, password, email) values (:name,:pwd,:email)"</span> );</span><br><span class="line">        $name = <span class="string">"老王"</span>;</span><br><span class="line">        $pwd = <span class="string">"00544abc"</span>;</span><br><span class="line">        $email = <span class="string">"laowang@example.com"</span>;</span><br><span class="line">        $pre-&gt;bindParam ( <span class="string">":name"</span>, $name );</span><br><span class="line">        $pre-&gt;bindParam ( <span class="string">":pwd"</span>, $pwd );</span><br><span class="line">        $pre-&gt;bindParam ( <span class="string">":email"</span>, $email );</span><br><span class="line">        $pre-&gt;execute();</span><br><span class="line">        $name = <span class="string">"柴科夫斯基"</span>;</span><br><span class="line">        $pre-&gt;execute(<span class="keyword">array</span>(<span class="string">":name"</span>=&gt;$name,<span class="string">":pwd"</span>=&gt;<span class="string">"love"</span>,<span class="string">":email"</span>=&gt;<span class="string">"abc@abc.com"</span>));</span><br><span class="line">        $pdo = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"PDO连接MySQL数据库服务器失败"</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-解析结果集"><a href="#10-解析结果集" class="headerlink" title="10. 解析结果集"></a>10. 解析结果集</h2><p>PDO提供了三种方法来解析结果集</p>
<h3 id="fetch-方法"><a href="#fetch-方法" class="headerlink" title="fetch()方法"></a>fetch()方法</h3><p>从结果集中获取下一行的数据，返回的数组依赖于提取的类型，它的语法格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> PDOStatement::fetch([int fetch_style[, int cursor_orientation[, int cursor_offset])</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbms = <span class="string">"mysql"</span>;</span><br><span class="line">$server = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br><span class="line">$dbname = <span class="string">"account_pdo_db"</span>;</span><br><span class="line">$dsn = <span class="string">"$dbms:host=$server;dbname=$dbname"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器成功&lt;/p&gt;"</span>;</span><br><span class="line">    $result = $pdo-&gt;query(<span class="string">"select * from account"</span>);</span><br><span class="line">    var_dump($result-&gt;fetch());</span><br><span class="line">    var_dump($result-&gt;fetch(PDO::FETCH_ASSOC)); <span class="comment">//返回索引为集列名的数组</span></span><br><span class="line">    var_dump($result-&gt;fetch(PDO::FETCH_NUM)); <span class="comment">//返回索引为数值的数组</span></span><br><span class="line">    var_dump($result-&gt;fetch(PDO::FETCH_OBJ)); <span class="comment">//返回属性名对应结果集的列表的匿名对象</span></span><br><span class="line">    $pdo = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器失败&lt;/p&gt;"</span>;</span><br><span class="line">    <span class="keyword">die</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="fetchAll-方法"><a href="#fetchAll-方法" class="headerlink" title="fetchAll()方法"></a>fetchAll()方法</h3><p>fetchAll()方法可以返回一个包含结果集中所有行的数组，它的语法格式如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span> PDOStatement::fetchAll([int $fetch_style[, mixed fetch_arg[, <span class="keyword">array</span> ctor_arg]]])</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbms = <span class="string">"mysql"</span>;</span><br><span class="line">$server = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br><span class="line">$dbname = <span class="string">"account_pdo_db"</span>;</span><br><span class="line">$dsn = <span class="string">"$dbms:host=$server;dbname=$dbname"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器成功&lt;/p&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    $result = $pdo-&gt;query ( <span class="string">"select * from account"</span> );</span><br><span class="line">    var_dump ( $result-&gt;fetchAll (PDO::FETCH_NUM) );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    $result = $pdo-&gt;query ( <span class="string">"select * from account"</span> );</span><br><span class="line">    var_dump ( $result-&gt;fetchAll ( PDO::FETCH_ASSOC ) );</span><br><span class="line">    </span><br><span class="line">    $pdo = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器失败&lt;/p&gt;"</span>;</span><br><span class="line">    <span class="keyword">die</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="fetchColumn-方法"><a href="#fetchColumn-方法" class="headerlink" title="fetchColumn()方法"></a>fetchColumn()方法</h3><p>fetchColumn()方法用来从结果集中获取下一行中指定列的值。它的基本语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">string PDOStatement::fetchColumn([int column_num])</span><br><span class="line"><span class="comment">//column_num是列的索引数字（从0开始），默认值为0，表示第一列</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbms = <span class="string">"mysql"</span>;</span><br><span class="line">$server = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">"123456"</span>;</span><br><span class="line">$dbname = <span class="string">"account_pdo_db"</span>;</span><br><span class="line">$dsn = <span class="string">"$dbms:host=$server;dbname=$dbname"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO ( $dsn, $username, $password );</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器成功&lt;/p&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    $result = $pdo-&gt;query ( <span class="string">"select * from account"</span> );</span><br><span class="line">    var_dump ( $result-&gt;fetchColumn());</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    var_dump ( $result-&gt;fetchColumn(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    var_dump ( $result-&gt;fetchColumn(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;hr /&gt;"</span>;</span><br><span class="line">    var_dump ( $result-&gt;fetchColumn(<span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    $pdo = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> ( PDOException $e ) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;PDO连接MySQL数据库服务器失败&lt;/p&gt;"</span>;</span><br><span class="line">    <span class="keyword">die</span> ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-SQL注入"><a href="#11-SQL注入" class="headerlink" title="11. SQL注入"></a>11. SQL注入</h2><p>SQL注入就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。SQL注入通常由于执行sql语句时，没有对用户通过Web表单提交的参数或者查询的字符串没有进行特殊字符过滤等，导致欺骗服务器执行恶意SQL命令。</p>
<p>为了防止这种情况，写脚本文件的时候，通常会考虑防止SQL注入，最简单的办法就是使用预处理语句，因为预处理语句事先已经编译了语句，传递的参数是不参与解释的。</p>
<h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><h3 id="PHP-的报错级别"><a href="#PHP-的报错级别" class="headerlink" title="PHP 的报错级别"></a>PHP 的报错级别</h3><table>
<thead>
<tr>
<th>值</th>
<th>常量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>E_ERROR</td>
<td>致命的运行时错误。 错误无法恢复过来。脚本的执行被暂停</td>
</tr>
<tr>
<td>2</td>
<td>E_WARNING</td>
<td>非致命的运行时错误。 脚本的执行不会停止</td>
</tr>
<tr>
<td>4</td>
<td>E_PARSE</td>
<td>编译时分析错误。解析应该只由分析器生成的错误</td>
</tr>
<tr>
<td>8</td>
<td>E_NOTICE</td>
<td>可能发现了一个错误</td>
</tr>
<tr>
<td>16</td>
<td>E_CORE_ERROR</td>
<td>在PHP启动时的致命错误</td>
</tr>
<tr>
<td>32</td>
<td>E_CORE_WARNING</td>
<td>在PHP启动时的非致命错误</td>
</tr>
<tr>
<td>64</td>
<td>E_COMPILE_ERROR</td>
<td>致命的编译时错误</td>
</tr>
<tr>
<td>128</td>
<td>E_COMPILE_WARNING</td>
<td>非致命编译时警告</td>
</tr>
<tr>
<td>256</td>
<td>E_USER_ERROR</td>
<td>用户生成的致命错误</td>
</tr>
<tr>
<td>512</td>
<td>E_USER_WARNING</td>
<td>用户生成的非致命警告</td>
</tr>
<tr>
<td>1024</td>
<td>E_USER_NOTICE</td>
<td>用户生成的通知</td>
</tr>
<tr>
<td>2048</td>
<td>E_STRICT</td>
<td>协同性或兼容性错误</td>
</tr>
<tr>
<td>4096</td>
<td>E_RECOVERABLE_ERROR</td>
<td>可捕获的致命错误</td>
</tr>
<tr>
<td>8191</td>
<td>E_ALL</td>
<td>所有的错误和警告</td>
</tr>
</tbody></table>
<p>###　$_SERVER参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$_SERVER[‘REMOTE_PORT’]</td>
<td>端口</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_ADDR’]</td>
<td>浏览当前页面的用户的 IP 地址</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_NAME’]</td>
<td>服务器主机的名称</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADMIN’]</td>
<td>管理员信息</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PORT’]</td>
<td>服务器所使用的端口</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SIGNATURE’]</td>
<td>包含服务器版本和虚拟主机名的字符串</td>
</tr>
<tr>
<td>$_SERVER[‘argv’]</td>
<td>传递给该脚本的参数</td>
</tr>
<tr>
<td>$_SERVER[‘argc’]</td>
<td>传递给程序的命令行参数的个数</td>
</tr>
<tr>
<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>
<td>CGI 规范的版本</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SOFTWARE’]</td>
<td>服务器标识的字串</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PROTOCOL’]</td>
<td>请求页面时通信协议的名称和版本   例如：”HTTP/1.0”。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_METHOD’]</td>
<td>访问页面时的请求方法  例如：”GET”, “POST”</td>
</tr>
<tr>
<td>$_SERVER[‘QUERY_STRING’]</td>
<td>查询(query)的字符串</td>
</tr>
<tr>
<td>$_SERVER[‘DOCUMENT_ROOT’]</td>
<td>当前运行脚本所在的文档根目录</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT’]</td>
<td>当前请求的 Accept: 头部的内容</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>
<td>当前请求的 Accept-Charset: 头部的内容</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT_ENCODING’]</td>
<td>当前请求的 Accept-Encoding: 头部的内容</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_CONNECTION’]</td>
<td>当前请求的 Connection: 头部的内容。例如：“Keep-Alive”</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>当前请求的 Host: 头部的内容</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_REFERER’]</td>
<td>链接到当前页面的前一页面的 URL 地址</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_USER_AGENT’]</td>
<td>当前请求的 User_Agent: 头部的内容</td>
</tr>
<tr>
<td>$_SERVER[‘HTTPS’]</td>
<td>如果通过https访问,则被设为一个非空的值(on)，否则返回off</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_FILENAME’]</td>
<td>当前执行脚本的绝对路径名</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_NAME’]</td>
<td>包含当前脚本的路径。这在页面需指向自己时非常有用</td>
</tr>
<tr>
<td>$_SERVER[‘PHP_SELF’]</td>
<td>正在执行脚本的文件名</td>
</tr>
<tr>
<td>$_SERVER[‘PHP_AUTH_USER’]</td>
<td>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。</td>
</tr>
<tr>
<td>$_SERVER[‘PHP_AUTH_PW’]</td>
<td>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码</td>
</tr>
<tr>
<td>$_SERVER[‘AUTH_TYPE’]</td>
<td>当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</td>
</tr>
<tr>
<td>$_SERVER[‘PATH_TRANSLATED’]</td>
<td>当前脚本所在文件系统（不是文档根目录）的基本路径</td>
</tr>
</tbody></table>
</form>]]></content>
  </entry>
  <entry>
    <title>web前后端数据交互</title>
    <url>/2019/12/04/web%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<p>● HTTP通讯协议（Hypertext Transfer Protocol）</p>
<p>● AJAX（ Asynchronous JavaScript and XML）</p>
<hr>
<h1 id="第一章-HTTP通讯协议"><a href="#第一章-HTTP通讯协议" class="headerlink" title="第一章 HTTP通讯协议"></a>第一章 HTTP通讯协议</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则。</p>
<p>HTTP（超文本传输协议）是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p>
<a id="more"></a>

<p>HTTP消息结构</p>
<table>
<thead>
<tr>
<th>结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>request line</td>
<td>请求行：第一行必须是请求行，用来说明请求类型、要访问的资源以及使用的HTTP版本。</td>
</tr>
<tr>
<td>header</td>
<td>请求头：用来说明服务器要使用的附加信息。</td>
</tr>
<tr>
<td>blank line</td>
<td>空白行：请求头部与请求体之间必须有一个空白行，必不可少</td>
</tr>
<tr>
<td>body</td>
<td>请求体：也叫请求正文，可以添加任意的其他数据</td>
</tr>
</tbody></table>
<p><img src="C:/Users/%E6%9D%8E%E5%A8%9C%E5%A8%9C/Desktop/%E6%95%99%E7%A0%94%E6%9D%90%E6%96%99/02%20%E4%B8%AD%E7%BA%A7/2-%E6%95%99%E6%A1%88%E5%8F%8A%E5%85%B6%E4%BB%96%E5%8F%AF%E9%80%89%E6%A1%88%E4%BE%8B/%E6%95%99%E6%A1%88/Web%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%8A%80%E6%9C%AF/images/http.png" alt="http"></p>
<table>
<thead>
<tr>
<th>状态行</th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Host</td>
<td>接受请求的服务器地址，可以是：<code>IP：端口</code> 或 <code>域名</code></td>
</tr>
<tr>
<td>User-Agent</td>
<td>发送请求的应用程序名称（浏览器信息）</td>
</tr>
<tr>
<td>Connection</td>
<td>指定与连接相关的属性，如：Connection:Keep-Alive</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>客户端可以接受的编码格式</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>客户端可以接受的数据压缩格式</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>客户端可以接受的语言</td>
</tr>
<tr>
<td>referer</td>
<td>当前请求来自哪个链接（防盗连）</td>
</tr>
<tr>
<td>content-type</td>
<td>请求的文件类型</td>
</tr>
<tr>
<td>cookie</td>
<td>该网站相关的会话信息</td>
</tr>
</tbody></table>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><p>单向请求，HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。</p>
<h2 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3. 工作流程"></a>3. 工作流程</h2><p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<ol>
<li><p>首先客户机与服务器需要建立连接。</p>
</li>
<li><p>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，客户机信息和可能的内容。</p>
</li>
<li><p>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码（status Code状态码），后边服务器信息、实体信息和可能的内容。</p>
</li>
<li><p>客户端接收完服务器所返回的信息后，与服务器断开连接。</p>
<p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端。</p>
<p>对于用户来说，这些过程是由HTTP自己完成的，用户只要用鼠标点击，等待信息显示就可以了。</p>
</li>
</ol>
<h2 id="4-Status-Code"><a href="#4-Status-Code" class="headerlink" title="4. Status Code"></a>4. Status Code</h2><p>Status Code是HTTP协议状态码，当发起http请求后，服务器端会会返回不同的状态码，用以标示其工作状态：</p>
<p><strong>1xx：信息，服务器收到请求，需要请求者继续执行操作</strong></p>
<p>100    继续。客户端应继续其请求<br>101    切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</p>
<p><strong>2xx</strong>：成功，操作被成功接收并处理</p>
<p>200    请求成功。一般用于GET与POST请求<br>201    已创建。成功请求并创建了新的资源<br>202    已接受。已经接受请求，但未处理完成<br>203    非授权信息。请求成功。<br>204    无内容。服务器成功处理，但未返回内容。</p>
<p><strong>3xx</strong>：重定向，需要进一步的操作以完成请求</p>
<p>300    请求的资源可在多处得到<br>301    删除请求数据<br>304    网页自请求者上次请求后再也没有更改过 </p>
<p><strong>4xx</strong>：客户端错误，请求包含语法错误或无法完成请求</p>
<p>400    错误请求，如语法错误<br>401    请求授权失败<br>403    请求不允许<br>404    没有发现文件、查询或URl</p>
<p><strong>5xx</strong>：服务器错误，服务器在处理请求的过程中发生了错误</p>
<p>500    服务器产生内部错误<br>502    服务器暂时不可用，有时是为了防止发生系统过载<br>503    服务器过载或暂停维修<br>505    服务器不支持或拒绝支请求头中指定的HTTP版本</p>
<h1 id="第二章-AJAX的实现"><a href="#第二章-AJAX的实现" class="headerlink" title="第二章 AJAX的实现"></a>第二章 AJAX的实现</h1><h2 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>   synchronous：同步</p>
<p>Asynchronous：异步</p>
<p>AJAX（Asynchronous JavaScript and XML） 是一种在无需重新加载整个页面，仅更新部分网页的<strong>技术</strong>。</p>
<p>AJAX 通过<strong>异步</strong>方式与服务器进行少量数据交换。</p>
<p><img src="C:/Users/%E6%9D%8E%E5%A8%9C%E5%A8%9C/Desktop/%E6%95%99%E7%A0%94%E6%9D%90%E6%96%99/02%20%E4%B8%AD%E7%BA%A7/2-%E6%95%99%E6%A1%88%E5%8F%8A%E5%85%B6%E4%BB%96%E5%8F%AF%E9%80%89%E6%A1%88%E4%BE%8B/%E6%95%99%E6%A1%88/Web%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%8A%80%E6%9C%AF/images/ajax.jpg" alt="ajax"></p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>页面无需刷新，用户的体验非常好。</li>
<li>使用异步方式与服务器通信，具有更加迅速的响应能力。</li>
<li>可以把一些服务器负担的工作转嫁到客户端，减轻服务器和宽带的负担，节约空间和宽带租用成本。ajax的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担。</li>
<li>基于标准化、并被广泛支持的技术，不需要下载插件或者小程序。</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>ajax不支持浏览器back按钮</li>
<li>ajax暴露了与服务器交互的细节，存在安全隐患</li>
<li>对搜索引擎的支持比较弱</li>
<li>破坏了程序的异常机制</li>
<li>不容易调试  </li>
</ol>
<h2 id="2-AJAX工作原理"><a href="#2-AJAX工作原理" class="headerlink" title="2. AJAX工作原理"></a>2. AJAX工作原理</h2><p>既然Ajax能够发送HTTP请求，整个请求的过程就必须要符合HTTP协议。Ajax发送HTTP请求时需要指定以下参数：</p>
<ol>
<li>要请求的资源即URL地址。</li>
<li>指定请求的方式，常用的有get和post。</li>
<li>指定需要发送给服务器的数据，以“名=值&amp;名=值”的方式书写。</li>
<li>指定可以接收的数据类型，即告诉服务器可以回传的内容类型是什么，包括：HTML、JS脚本、JSON、XML等，常用的是文本txt和JSON。</li>
</ol>
<p>以上参数就包含了Ajax发送HTTP请求时请求头中的信息，但服务器响应后会回传结果，因此Ajax还必须有能够接收服务器回传的结果的参数。</p>
<p>匿名函数success:function(re){  }。re变量用于接收服务器回传的结果。</p>
<p>Ajax的基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url:&apos;请求的资源&apos;,</span><br><span class="line">	type:&apos;请求方式get|post&apos;,</span><br><span class="line">	data:&apos;发送数据 名=值&amp;名=值&apos;,</span><br><span class="line">	dataType:&apos;回传值的类型&apos;,</span><br><span class="line">	success:function(re)&#123; re接收返回值</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>![ajax工作原理](C:\Users\李娜娜\Desktop\教研材料\02 中级\2-教案及其他可选案例\教案\Web前后端交互技术\images\ajax工作原理.png)</p>
<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>可扩展标记语言(eXtensible Markup Language)，是一种用于标记电子文件使其具有结构性的标记语言。</p>
<p>XML和HTML的区别：</p>
<table>
<thead>
<tr>
<th>XML</th>
<th>HTML</th>
</tr>
</thead>
<tbody><tr>
<td>所有的标记必须成对出现</td>
<td>不是所有的都需要成对出现</td>
</tr>
<tr>
<td>区分大小写</td>
<td>不区分大小写</td>
</tr>
</tbody></table>
<p>由于XML结构过于复杂，逐渐被JSON格式所取代。</p>
<p>XMLHttpRequest对象是window的一个方法（构造函数），用于在后台与服务器交换数据，所有现代的浏览器都支持该对象，它能够实现：</p>
<p>在后台（异步方式）向服务器发送数据</p>
<p>在页面已加载后从服务器 请求/接收 数据，在不重新加载页面的情况下更新网页</p>
<p>尽管名为 XMLHttpRequest，它并不限于和 XML 文档一起使用：它可以接收任何形式的文本文档</p>
<p>AJAX通过操作XMLHttpRequest对象，与服务器异步交互数据，要完整实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</p>
<ol>
<li>创建XMLHttpRequest对象</li>
<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</li>
<li>发送数据</li>
<li>接收数据</li>
</ol>
<h1 id="第三章-JSONP"><a href="#第三章-JSONP" class="headerlink" title="第三章 JSONP"></a>第三章 JSONP</h1><p>Jsonp(JSON with Padding) 可以<strong>异步、跨域</strong>进行数据请求。</p>
<p>ajax由于受到同源策略的限制，不能进行跨域请求，但在某些情况下，又需要进行跨域请求数据，就诞生了jsonp技术，严格说，jsonp不是技术，是 json 的一种”使用模式”。</p>
<p>实现jsonp跨域请求，需要前后两端进行配合。</p>
<h2 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1. hello world"></a>1. hello world</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>html页面中的，有三种标签，可以跨域（get）请求资源，分别是：link 、img、script，试着用script发送一个异步请求：</p>
<p><strong>域：127.0.0.1:8888</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">play</span><span class="params">(obj)</span></span>&#123;</span></span><br><span class="line">        alert(obj.msg);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8000/doAction.php?callback=play"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>声明了一个play函数</li>
<li>从127.0.0.1:8888域 向 127.0.0.1:8000域的doAction.php接口发送了get请求，并带有cb=play的参数</li>
</ol>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>用php创建一个后端接口：doAction.php</p>
<p><strong>域：127.0.0.1:8000</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> 	$fn=$_GET[<span class="string">"callback"</span>];</span><br><span class="line">	$json=<span class="string">'&#123;"msg":"hello world"&#125;'</span>;<span class="comment">//json格式的数据</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&#123;$fn&#125;($json)"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>play函数被调用，弹出”hello world“。</p>
<h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h2><p>以上就是一个完整的jsonp，在这个案例中：</p>
<ol>
<li>前端将要调用的函数名play，作为参数传递给后台</li>
<li>后台接收参数，返回一个字符串，字符串的的内容就是调用play函数的语句，并且带有json格式数据的参数</li>
<li>前端接收到后端返回的字符串，既然是script标签发出的请求，接收回来的字符串就会被当做命令执行，该命令调用已经定义好的play函数，同时接收到了传递过来的json格式数据。</li>
</ol>
<p>以上步骤，是实现一个jsonp的标准流程和基本原理。在这个过程中，如果前后端约定好了回调函数的名称，那cb这一传参步骤可以省略。</p>
<p>既然可以通过get传参，那么，前端就可以将其他请求信息传递到后端，完成更复杂的异步请求数据的操作。</p>
<p><strong>注意：</strong></p>
<p><strong>后端只能以json格式作为参数</strong>（jsonp也是因此得名的）。</p>
<h1 id="第四章-iframe页面异步通信"><a href="#第四章-iframe页面异步通信" class="headerlink" title="第四章 iframe页面异步通信"></a>第四章 iframe页面异步通信</h1><h2 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>iframe是HTML的一个标签，我们知道，每个HTML标签都会在页面上呈现不同的内容，iframe标签的作用就是在页面中再开放出一个窗口，且这个窗口能够重新显示一个页面。</p>
<p>所以iframe称作页面内框架，可以理解为页面中的页面。</p>
<h2 id="2-JS操作iframe标签"><a href="#2-JS操作iframe标签" class="headerlink" title="2. JS操作iframe标签"></a>2. JS操作iframe标签</h2><p>Js操作iframe标签过程分为2步：</p>
<ol>
<li>找到iframe标签</li>
<li>操作iframe标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>发布聊天内容：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"fr1"</span> <span class="attr">style</span>=<span class="string">"height:50px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"namer"</span> <span class="attr">name</span>=<span class="string">"namer"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        内容：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"height:50px;width:300px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"发送"</span> <span class="attr">onclick</span>=<span class="string">"sendMessage();"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取两个输入框中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> n = <span class="built_in">document</span>.getElementById(<span class="string">'namer'</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).value;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//拼接url地址</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> urlStr = <span class="string">"do.php?namer="</span> + n + <span class="string">"&amp;content="</span> + c;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//把urlStr值赋给iframe的src属性</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'fr1'</span>).src = urlStr;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写Js中调用的php文件，该php文件主要功能是将输入的内容打印打印出来，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$namer = $_GET[<span class="string">'namer'</span>];</span><br><span class="line">$content = $_GET[<span class="string">'content'</span>];</span><br><span class="line">var_dump($namer,$content);</span><br></pre></td></tr></table></figure>

<p>在点击发送数据的时候并没有刷新整个页面，而是借助于iframe标签实现了页面的异步刷新。当然，我们也可以在点击发送的时候向服务器发送数据，并借助iframe实现页面异步刷新。</p>
<h2 id="3-JQuery操作iframe标签"><a href="#3-JQuery操作iframe标签" class="headerlink" title="3. JQuery操作iframe标签"></a>3. JQuery操作iframe标签</h2><p>同Js一样，JQuery操作iframe标签过程也分为2步：</p>
<ol>
<li>找到iframe标签</li>
<li>操作iframe标签</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//code.jquery.com/jquery-3.4.0.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;发布聊天内容：&lt;/</span>h1&gt;</span><br><span class="line">        &lt;iframe id=<span class="string">"fr1"</span> style=<span class="string">"height:50px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">        姓名：&lt;input type="text" id="namer" name="namer"&gt;&lt;br&gt;</span><br><span class="line">        内容：&lt;textarea id="content" name="content" style="height:200px;width:500px;"&gt;&lt;/textarea&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type="button" value="发送" onclick="sendMessage();" /&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        function sendMessage () &#123;</span><br><span class="line">            //获取两个输入框中的值</span><br><span class="line">            var n = $("[name='namer']").val();</span><br><span class="line">            var c = $("[name='content']").val();</span><br><span class="line">            //拼接url地址</span><br><span class="line">            var urlStr = "do.php?namer=" + n + "&amp;content=" + c;</span><br><span class="line">            //把urlStr值赋给iframe的src属性</span><br><span class="line">            $("#fr1").attr('src', urlStr)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>然后编写Js中调用的php文件，该php文件主要功能是将输入的内容插入到服务器的数据库中，并返会插入成功的条目数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$namer = $_GET[<span class="string">'namer'</span>];</span><br><span class="line">$content = $_GET[<span class="string">'content'</span>];</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=php'</span>,<span class="string">'root'</span>,<span class="string">'123456'</span>);</span><br><span class="line">$sql = <span class="string">"insert into token(namer,content,pubtime) value('"</span>.$namer.<span class="string">"','"</span>.$content.<span class="string">"',"</span>.time().<span class="string">")"</span>;</span><br><span class="line">$re = $pdo-&gt;exec($sql);</span><br><span class="line">var_dump($re);</span><br></pre></td></tr></table></figure>

<h1 id="第五章-页面性能优化技术"><a href="#第五章-页面性能优化技术" class="headerlink" title="第五章 页面性能优化技术"></a>第五章 页面性能优化技术</h1><blockquote>
<p>会话控制是一种跟踪用户的通信方式</p>
<p>例如：当一个用户在请求一个页面后，再次请求这个页面，网站是无法知道这个用户刚才是否曾经来访问过。由此我们就会觉得奇怪，平时我们在电商网站购物时，只要我们在这个站点内，不论我们怎么跳转页面，网站总会记得我是谁，这是怎么做到的呢？这就是运用了HTTP会话控制。在网站中跟踪一个变量，通过对变量的跟踪，使多个请求事物之间建立联系，根据授权和用户身份显示不同的内容、不同页面。</p>
</blockquote>
<p><img src="C:/Users/%E6%9D%8E%E5%A8%9C%E5%A8%9C/Desktop/%E6%95%99%E7%A0%94%E6%9D%90%E6%96%99/02%20%E4%B8%AD%E7%BA%A7/2-%E6%95%99%E6%A1%88%E5%8F%8A%E5%85%B6%E4%BB%96%E5%8F%AF%E9%80%89%E6%A1%88%E4%BE%8B/%E6%95%99%E6%A1%88/PHP%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/images/cookie.png" alt="cookie.gif"></p>
<p>Cookie是一种会话变量。会话变量是用来存放数据的一个容器，这个容器对应的就是内存空间。</p>
<h2 id="1-Cookie的创建、使用和销毁"><a href="#1-Cookie的创建、使用和销毁" class="headerlink" title="1. Cookie的创建、使用和销毁"></a>1. Cookie的创建、使用和销毁</h2><p>cookie是在服务器端创建，并写回到客户端浏览器</p>
<p>浏览器接到指令则在本地临时文件夹中创建了一个cookie文件，其中保存了你的cookie内容</p>
<p>客户端浏览器每次访问网站时，都会检测是否有该网站的cookie信息，如果有的话，也会同时发送过去。</p>
<p>注意：</p>
<p>cookie内容的存储是<strong>键/值</strong>对的方式，<strong>键和值都只能是字符串</strong>。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>setcookie( key , value ,有效期 )</td>
<td>设置会话 cookie 参数</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义cookie</span></span><br><span class="line"><span class="comment">//setcookie(键, 值, 有效期(秒))</span></span><br><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">"zhangsan"</span>,time()+<span class="number">1000</span>); <span class="comment">//如果不设置有效期，关闭浏览器就会消失</span></span><br><span class="line">setcookie(<span class="string">"pwd"</span>,<span class="string">"123"</span>,time()+<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除cookie（设定过期时间，使失效）</span></span><br><span class="line">setcookie(<span class="string">"name"</span>,<span class="string">""</span>,time()<span class="number">-1</span>);</span><br><span class="line">setcookie(<span class="string">'age'</span>,<span class="keyword">null</span>,time()<span class="number">-1</span>);</span><br><span class="line">setcookie(<span class="string">'sex'</span>,<span class="string">""</span>,time()<span class="number">-1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>在php中使用setcookie方法来创建cookie，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$re = setcookie ( <span class="string">'username'</span>, <span class="string">'xiaozhang'</span>, time () + <span class="number">30</span> * <span class="number">60</span>, <span class="string">'/'</span> );</span><br><span class="line">var_dump ( $re );</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>PHP中使用$_COOKIE全局变量来获取Cookie，例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$re = $_COOKIE [<span class="string">'username'</span>];</span><br><span class="line">var_dump($re);</span><br></pre></td></tr></table></figure>

<h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><p>PHP中没有直接销毁的方法，通常会将Cookie的过期时间重新设置一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$re = setcookie ( <span class="string">'username'</span>, <span class="keyword">null</span>, time () + <span class="number">1</span>, <span class="string">'/'</span> );</span><br><span class="line">var_dump($re);</span><br></pre></td></tr></table></figure>

<h2 id="2-页面性能优化"><a href="#2-页面性能优化" class="headerlink" title="2. 页面性能优化"></a>2. 页面性能优化</h2><p>为了减少服务器的压力，并使服务器尽快响应客户端请求的页面，需要对页面进行优化。通常会从如下两个方面入手对页面进行优化：</p>
<ol>
<li>减少HTTP请求次数；</li>
<li>静态资源和动态程序分开，即通过不同的域名访问。</li>
</ol>
<h3 id="3-建设HTTP请求次数"><a href="#3-建设HTTP请求次数" class="headerlink" title="3. 建设HTTP请求次数"></a>3. 建设HTTP请求次数</h3><p>减少HTTP请求次数的方法常见的有如下几种：</p>
<ol>
<li>制作图片地图，页面中出现了网页中所有的背景图片，允许一个图片关联多个url，即将多个图片合并为一个图片。</li>
<li>使用雪碧图，简单的说就是CSS中的background-position来定位图片中的某一具体部分，这样就可以把多张小图片合并为一张大图片。</li>
<li>合并JS和CSS文件，直接减少HTTP的请求次数。</li>
<li>充分利用浏览器缓存，如果图片或者脚本，样式文件内容比较固定，不经常被修改，那么，尽可能利用缓存技术，减少HTTP请求次数或文件下载次数。</li>
</ol>
<h3 id="4-静态资源与动态程序分开"><a href="#4-静态资源与动态程序分开" class="headerlink" title="4. 静态资源与动态程序分开"></a>4. 静态资源与动态程序分开</h3><p>动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p>
<h1 id="第六章-Socket通信"><a href="#第六章-Socket通信" class="headerlink" title="第六章 Socket通信"></a>第六章 Socket通信</h1><h2 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。socket（套接字）既不是程序，也不是协议，其只是操作系统提供的通信层的一组抽象API。</p>
<p>通信需要服务端和客户端组成：</p>
<p><strong>服务端：</strong></p>
<ul>
<li>使用php初始化socket然后绑定一个端口，对端口进行监听。</li>
<li>调用accept阻塞，等待客户端连接。</li>
</ul>
<p><strong>客户端：</strong></p>
<ul>
<li>初始化一个socket，</li>
<li>连接服务器，如果连接成功，客户端与服务器端建立连接。</li>
<li>发送数据请求，服务器端接收请求并处理请求，把回应数据发送给客户端</li>
<li>读取数据</li>
<li>关闭连接，一次交互结束。</li>
</ul>
<p>客户端——服务端是可以彼此交互的应用程序。客户端和服务端之间的交互需要连接。Socket编程负责的就是为应用程序之间建立可进行交互的连接。</p>
<p>Socket通信是双向的、长连接，它提供了网络通信的一些接口，我们基于这些接口可以控制数据的发送。</p>
<p>在一般情况下，服务器多用PHP来开发Socket通信，客户端多用Javascript或者JQuery来开发Socket通信。</p>
<table>
<thead>
<tr>
<th>服务器端函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>socket_create($net,$stream,$protocol)</td>
<td>创建Socket，参数：<br>$net：网络协议<br>$stream：socket流<br>$protocl：协议</td>
</tr>
<tr>
<td>socket_bind()</td>
<td>绑定ip和端口</td>
</tr>
<tr>
<td>socket_listen()</td>
<td>监听端口</td>
</tr>
<tr>
<td>socket_accept()</td>
<td>接受一个socket连接，与客户端建立连接</td>
</tr>
<tr>
<td>socket_read()</td>
<td>读取客户端发送过来的数据</td>
</tr>
<tr>
<td>socket_write()</td>
<td>将数据写到 socket 缓存 向客户端发送</td>
</tr>
<tr>
<td>socket_close()</td>
<td>关闭Socket连接</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>客户端函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Websocket(wsurl)</td>
<td>向服务器发送连接</td>
</tr>
<tr>
<td>send(string)</td>
<td>向服务器发送数据</td>
</tr>
<tr>
<td>onmessage事件</td>
<td>监听服务器发送过来的数据</td>
</tr>
<tr>
<td>onclose事件</td>
<td>监听服务器开关状态</td>
</tr>
</tbody></table>
<h2 id="2-Socket通信的工作原理"><a href="#2-Socket通信的工作原理" class="headerlink" title="2. Socket通信的工作原理"></a>2. Socket通信的工作原理</h2><p>根据连接启动的方式以及本地套接字要连接的目标，套接字之间的连接过程可以分为三个步骤：</p>
<ol>
<li>服务器监听：是服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态。</li>
<li>客户端请求：是指由客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</li>
<li>连接确认：是指当服务器端套接字监听到或者说接收到客户端套接字的连接请求，它就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，连接就建立好了。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</li>
</ol>
<p>socket通讯的工作原理可以参考下面的流程图：</p>
<p>![socket通信服务端](C:\Users\李娜娜\Desktop\教研材料\02 中级\2-教案及其他可选案例\教案\Web前后端交互技术\images\socket通信服务端.png)</p>
<h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">$port = <span class="number">8001</span>;<span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建socket</span></span><br><span class="line">$sock = socket_create(AF_INET,SOCK_STREAM,SOL_TCP）；</span><br><span class="line"><span class="comment">//参数：</span></span><br><span class="line"><span class="comment">//AF_INET： IPv4 网络协议。TCP 和 UDP 都可使用此协议。一般都用这个</span></span><br><span class="line"><span class="comment">//SOCK_STREAM:是基于TCP的，数据传输比较有保障   </span></span><br><span class="line"><span class="comment">//SOL_TCP:TCP 协议               </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定ip和端口                      </span></span><br><span class="line">$ret = socket_bind($sock,$ip,$port)；</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听                      </span></span><br><span class="line">$ret = socket_listen($sock,<span class="number">4</span>)； <span class="comment">//最大监听套接字个数</span></span><br><span class="line"> </span><br><span class="line">$count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (($msgsock = socket_accept($sock)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"失败: "</span>.socket_strerror($msgsock) ;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//发到客户端</span></span><br><span class="line">        $msg =<span class="string">"测试成功！"</span>;</span><br><span class="line">        socket_write($msgsock, $msg, strlen($msg));</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"测试成功了啊"</span>;</span><br><span class="line">        </span><br><span class="line">        $buf = socket_read($msgsock,<span class="number">8192</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"收到的信息:&#123;$buf&#125;"</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(++$count &gt;= <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    socket_close($msgsock);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">                      </span><br><span class="line">socket_close($sock);</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//连接Socket的URL地址</span></span><br><span class="line">	<span class="keyword">var</span> wsurl = <span class="string">"ws://127.0.0.1:8001/socket_server.php"</span>;</span><br><span class="line">	<span class="keyword">var</span> websocket; <span class="comment">//用于存放客户端创建的Socket对象</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">window</span>.WebSocket) &#123;</span><br><span class="line">		websocket = <span class="keyword">new</span> WebSocket(wsurl);</span><br><span class="line">		websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;<span class="comment">//onopen事件，连接成功</span></span><br><span class="line">			$(body).append(<span class="string">"&lt;p&gt;conneted success!&lt;/p&gt;"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;<span class="comment">//onmessage事件，接收消息，显示在页面上</span></span><br><span class="line">            <span class="keyword">var</span> msg = <span class="built_in">JSON</span>.parse(event.data);</span><br><span class="line">            <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="3-Socket通信实现聊天室"><a href="#3-Socket通信实现聊天室" class="headerlink" title="3. Socket通信实现聊天室"></a>3. Socket通信实现聊天室</h2><h3 id="PHP实现Socket服务端"><a href="#PHP实现Socket服务端" class="headerlink" title="PHP实现Socket服务端"></a>PHP实现Socket服务端</h3><p>![图片1](C:\Users\李娜娜\Desktop\教研材料\02 中级\2-教案及其他可选案例\教案\Web前后端交互技术\images\图片1.png)</p>
<h3 id="Js实现Socket客户端"><a href="#Js实现Socket客户端" class="headerlink" title="Js实现Socket客户端"></a>Js实现Socket客户端</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/msg"</span>);ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span></span><br><span class="line"><span class="function"></span>&#123;	<span class="built_in">console</span>.log(<span class="string">"Connection open ..."</span>);	ws.send(<span class="string">"Hello WebSockets!"</span>);&#125;;ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span></span><br><span class="line"><span class="function"></span>&#123;	<span class="built_in">console</span>.log(<span class="string">"Received Message: "</span> + evt.data);	ws.close();&#125;;ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Connection closed."</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>üSocket概念、工作原理、服务端与客户端、通信协议、通信机制、通信过程</p>
]]></content>
  </entry>
</search>
